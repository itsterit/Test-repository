/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include "stm32f1xx.h"
#include "main.h"
#include <ClockControl/ClockControl.h>

short Uart2_Cond        = 1;
short Uart2_Counter     = 0;
short Uart2_Len         = 0;
char Uart2_BufSend[100] = {0};

char LibA[10] = {'A', '\n'};

int main(void)
{ 
 /**
   * @brief   Start HSI clock
   *
   * @details Returns 1 if launch is successful
   * @details HSE not divided for PLL entry
   */
  ClockControl::HSE::Start_HSE();
  ClockControl::HSE::PLL::Clean_PLLXTPRE();
  /**
   * @brief   PLL clocking from HSE
   *          Set PLL as system clock
   * @details Written only when PLL is disabled
   * @details On successful launch pll returns 1
   */
  ClockControl::HSE::PLL::Set_PLLSRC_HSE();
  ClockControl::HSE::PLL::Set_PLL_MUL(6);
  ClockControl::HSE::PLL::Start_PLL();
  ClockControl::HSE::PLL::Set_SW_PLL();
  /**
   * @brief   installation of frequency dividers
   *
   * @details AHB bus, core, memory and DMA - 48Mhz
   * @details Cortex System timer           - 48Mhz
   * @details FCLK Cortex                   - 48Mhz
   * @details APB1 peripherals              - 24Mhz
   * @details APB1 timers                   - 48Mhz
   * @details APB2 peripherals              - 48Mhz
   * @details APB1 timers                   - 48Mhz
   * @details To ADC                        - 12Mhz
   */
  ClockControl::Set_AHB_Prescaler(1);
  ClockControl::Set_APB1_Prescaler(2);
  ClockControl::Set_APB2_Prescaler(1);
  ClockControl::Set_ADC_Prescaler(4);

  Uart2_Ini(USART2, 24000000, 9600);

  PinSet();

  while (1)
  {    
    GPIOC->ODR ^= GPIO_ODR_ODR13;    
    
    USART2->SR = 0x00;
    USART2->CR1 |= USART_CR1_TCIE;
    //USART2->DR = LibA[0];

    for (int i = 0; i != 1000000; i++)
    {
    }
  }
}
