/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include "stm32f1xx.h"
#include "main.h"
#include <ClockControl/ClockControl.h>
#include <DmaControl/DmaControl.h>
#include <UartWrap/Uart.h>

int main(void)
{
  /**
   * @brief   Start HSI clock
   *
   * @details Returns 1 if launch is successful
   * @details HSE not divided for PLL entry
   */
  ClockControl::HSE::Start_HSE();
  ClockControl::HSE::PLL::Clean_PLLXTPRE();
  /**
   * @brief   PLL clocking from HSE
   *          Set PLL as system clock
   * @details Written only when PLL is disabled
   * @details On successful launch pll returns 1
   */
  ClockControl::HSE::PLL::Set_PLLSRC_HSE();
  ClockControl::HSE::PLL::Set_PLL_MUL(6);
  ClockControl::HSE::PLL::Start_PLL();
  ClockControl::HSE::PLL::Set_SW_PLL();
  /**
   * @brief   installation of frequency dividers
   *
   * @details AHB bus, core, memory and DMA - 48Mhz
   * @details Cortex System timer           - 48Mhz
   * @details FCLK Cortex                   - 48Mhz
   * @details APB1 peripherals              - 24Mhz
   * @details APB1 timers                   - 48Mhz
   * @details APB2 peripherals              - 48Mhz
   * @details APB1 timers                   - 48Mhz
   * @details To ADC                        - 12Mhz
   */
  ClockControl::Set_AHB_Prescaler(1);
  ClockControl::Set_APB1_Prescaler(2);
  ClockControl::Set_APB2_Prescaler(1);
  ClockControl::Set_ADC_Prescaler(4);

  DMA1_Channel1->CNDTR = 0x00; // сколько кадров данных подлежит передаче
  DMA1_Channel1->CPAR = 0x00;  // адрес памяти
  DMA1_Channel1->CPAR = 0x00;  // адрес периферийного устройства

  DMA_Config DMA_Ch1_cfg;
  DMA_Ch1_cfg.MEM2MEM = MEM2MEM_Disabled;
  DMA_Ch1_cfg.PL      = PL_High;
  DMA_Ch1_cfg.MSIZE   = MSIZE_8bits;
  DMA_Ch1_cfg.PSIZE   = PSIZE_8bits;
  DMA_Ch1_cfg.MINC    = MINC_Disabled;
  DMA_Ch1_cfg.PINC    = PINC_Disabled;
  DMA_Ch1_cfg.CIRC    = CIRC_Disabled;
  DMA_Ch1_cfg.DIR     = DIR_From_Memory;
  DMA_Ch1_cfg.TEIE    = TEIE_Disabled;
  DMA_Ch1_cfg.HTIE    = HTIE_Disabled;
  DMA_Ch1_cfg.TCIE    = TCIE_Disabled;
  DMA_Ch1_cfg.EN      = EN_Disabled;
  DmaControl Dma_Ch1(DMA1, DMA1_Channel1, &DMA_Ch1_cfg);

  /**
   * @brief: Start GPIO
   */
  PinSet();
  Uart2_Ini(USART2, 24000000, 9600);
  ADC1_IN9_PB1_ini();

  while (1)
  {
    GPIOC->ODR ^= GPIO_ODR_ODR13;
    ADC1->CR2 |= ADC_CR2_SWSTART;

    for (int i = 0; i != 1000000; i++)
    {
    }
  }
}
