
Metal_Detector_F103_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001480  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080015b0  080015b0  000115b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015f0  080015f0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080015f0  080015f0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015f0  080015f0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015f0  080015f0  000115f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015f4  080015f4  000115f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080015f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000068  08001660  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08001660  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b16  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d79  00000000  00000000  00022ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000268  00000000  00000000  00023920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d0  00000000  00000000  00023b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012aaf  00000000  00000000  00023d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003fc9  00000000  00000000  00036807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059f8f  00000000  00000000  0003a7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009475f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b44  00000000  00000000  000947b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	08001598 	.word	0x08001598

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	08001598 	.word	0x08001598

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	2b00      	cmp	r3, #0
 8000190:	db0b      	blt.n	80001aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	f003 021f 	and.w	r2, r3, #31
 8000198:	4906      	ldr	r1, [pc, #24]	; (80001b4 <__NVIC_EnableIRQ+0x34>)
 800019a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800019e:	095b      	lsrs	r3, r3, #5
 80001a0:	2001      	movs	r0, #1
 80001a2:	fa00 f202 	lsl.w	r2, r0, r2
 80001a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001aa:	bf00      	nop
 80001ac:	370c      	adds	r7, #12
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	e000e100 	.word	0xe000e100

080001b8 <_Z16ADC1_IN9_PB1_iniv>:
#include <string.h>
#include "stm32f1xx.h"
#include "main.h"

void ADC1_IN9_PB1_ini()
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
  // Input mode
  GPIOB->CRL &= ~GPIO_CRL_MODE1;
 80001be:	4b43      	ldr	r3, [pc, #268]	; (80002cc <_Z16ADC1_IN9_PB1_iniv+0x114>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a42      	ldr	r2, [pc, #264]	; (80002cc <_Z16ADC1_IN9_PB1_iniv+0x114>)
 80001c4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80001c8:	6013      	str	r3, [r2, #0]
  GPIOB->CRL |= (0b00 << GPIO_CRL_MODE1_Pos); 
 80001ca:	4b40      	ldr	r3, [pc, #256]	; (80002cc <_Z16ADC1_IN9_PB1_iniv+0x114>)
 80001cc:	4a3f      	ldr	r2, [pc, #252]	; (80002cc <_Z16ADC1_IN9_PB1_iniv+0x114>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	6013      	str	r3, [r2, #0]
  // In input mode - Analog mode
  GPIOB->CRL &= ~GPIO_CRL_CNF1;
 80001d2:	4b3e      	ldr	r3, [pc, #248]	; (80002cc <_Z16ADC1_IN9_PB1_iniv+0x114>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a3d      	ldr	r2, [pc, #244]	; (80002cc <_Z16ADC1_IN9_PB1_iniv+0x114>)
 80001d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001dc:	6013      	str	r3, [r2, #0]
  GPIOB->CRL |= (0b00 << GPIO_CRL_CNF1_Pos);  
 80001de:	4b3b      	ldr	r3, [pc, #236]	; (80002cc <_Z16ADC1_IN9_PB1_iniv+0x114>)
 80001e0:	4a3a      	ldr	r2, [pc, #232]	; (80002cc <_Z16ADC1_IN9_PB1_iniv+0x114>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	6013      	str	r3, [r2, #0]
  // Тактирование порта B
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;     
 80001e6:	4b3a      	ldr	r3, [pc, #232]	; (80002d0 <_Z16ADC1_IN9_PB1_iniv+0x118>)
 80001e8:	699b      	ldr	r3, [r3, #24]
 80001ea:	4a39      	ldr	r2, [pc, #228]	; (80002d0 <_Z16ADC1_IN9_PB1_iniv+0x118>)
 80001ec:	f043 0308 	orr.w	r3, r3, #8
 80001f0:	6193      	str	r3, [r2, #24]

  // Тактирование АЦП 1
  RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;         
 80001f2:	4b37      	ldr	r3, [pc, #220]	; (80002d0 <_Z16ADC1_IN9_PB1_iniv+0x118>)
 80001f4:	699b      	ldr	r3, [r3, #24]
 80001f6:	4a36      	ldr	r2, [pc, #216]	; (80002d0 <_Z16ADC1_IN9_PB1_iniv+0x118>)
 80001f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fc:	6193      	str	r3, [r2, #24]
  ADC1->CR2 |= ADC_CR2_ADON; 
 80001fe:	4b35      	ldr	r3, [pc, #212]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000200:	689b      	ldr	r3, [r3, #8]
 8000202:	4a34      	ldr	r2, [pc, #208]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000204:	f043 0301 	orr.w	r3, r3, #1
 8000208:	6093      	str	r3, [r2, #8]

  ADC1->SR = 0x00;
 800020a:	4b32      	ldr	r3, [pc, #200]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]

  // 1.5 cycles
  ADC1->SMPR2 &= ~ADC_SMPR2_SMP9; 
 8000210:	4b30      	ldr	r3, [pc, #192]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4a2f      	ldr	r2, [pc, #188]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000216:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800021a:	6113      	str	r3, [r2, #16]
  ADC1->SMPR2 |= (0b000 << ADC_SMPR2_SMP9_Pos); 
 800021c:	4b2d      	ldr	r3, [pc, #180]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 800021e:	4a2d      	ldr	r2, [pc, #180]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000220:	691b      	ldr	r3, [r3, #16]
 8000222:	6113      	str	r3, [r2, #16]
  
  // 1 conversion
  ADC1->SQR1 &= ~ADC_SQR1_L;
 8000224:	4b2b      	ldr	r3, [pc, #172]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000228:	4a2a      	ldr	r2, [pc, #168]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 800022a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800022e:	62d3      	str	r3, [r2, #44]	; 0x2c
  ADC1->SQR1 |= (0b0000 << ADC_SQR1_L_Pos);     
 8000230:	4b28      	ldr	r3, [pc, #160]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000232:	4a28      	ldr	r2, [pc, #160]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000236:	62d3      	str	r3, [r2, #44]	; 0x2c

  // 9й кАНАЛ
  ADC1->SQR3 = 0x00;
 8000238:	4b26      	ldr	r3, [pc, #152]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 800023a:	2200      	movs	r2, #0
 800023c:	635a      	str	r2, [r3, #52]	; 0x34
  ADC1->SQR3 |= (0b1001 << ADC_SQR3_SQ1_Pos);        
 800023e:	4b25      	ldr	r3, [pc, #148]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000242:	4a24      	ldr	r2, [pc, #144]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000244:	f043 0309 	orr.w	r3, r3, #9
 8000248:	6353      	str	r3, [r2, #52]	; 0x34

  ADC1->SQR2 = 0x00;
 800024a:	4b22      	ldr	r3, [pc, #136]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 800024c:	2200      	movs	r2, #0
 800024e:	631a      	str	r2, [r3, #48]	; 0x30

  ADC1->SQR1 = 0x00;
 8000250:	4b20      	ldr	r3, [pc, #128]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000252:	2200      	movs	r2, #0
 8000254:	62da      	str	r2, [r3, #44]	; 0x2c

  for (int StartUpCounter = 0; StartUpCounter <= 0x1000; StartUpCounter++){} // Небольшая задержка, что бы изменения вступили в силу
 8000256:	2300      	movs	r3, #0
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000260:	dc03      	bgt.n	800026a <_Z16ADC1_IN9_PB1_iniv+0xb2>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	3301      	adds	r3, #1
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	e7f7      	b.n	800025a <_Z16ADC1_IN9_PB1_iniv+0xa2>
  ADC1->CR2 |= ADC_CR2_CAL;                                                  // запуск калибровки
 800026a:	4b1a      	ldr	r3, [pc, #104]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 800026c:	689b      	ldr	r3, [r3, #8]
 800026e:	4a19      	ldr	r2, [pc, #100]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000270:	f043 0304 	orr.w	r3, r3, #4
 8000274:	6093      	str	r3, [r2, #8]
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0) ;                                   // ожидание окончания калибровки
 8000276:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	f003 0304 	and.w	r3, r3, #4
 800027e:	2b00      	cmp	r3, #0
 8000280:	bf14      	ite	ne
 8000282:	2301      	movne	r3, #1
 8000284:	2300      	moveq	r3, #0
 8000286:	b2db      	uxtb	r3, r3
 8000288:	2b00      	cmp	r3, #0
 800028a:	d000      	beq.n	800028e <_Z16ADC1_IN9_PB1_iniv+0xd6>
 800028c:	e7f3      	b.n	8000276 <_Z16ADC1_IN9_PB1_iniv+0xbe>

  // SWSTART
  ADC1->CR2 |= ADC_CR2_EXTTRIG;   
 800028e:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000290:	689b      	ldr	r3, [r3, #8]
 8000292:	4a10      	ldr	r2, [pc, #64]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000298:	6093      	str	r3, [r2, #8]
  ADC1->CR2 &= ~ADC_CR2_EXTSEL; 
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 80002a0:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80002a4:	6093      	str	r3, [r2, #8]
  ADC1->CR2 |= (0b111 << ADC_CR2_EXTSEL_Pos);
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 80002a8:	689b      	ldr	r3, [r3, #8]
 80002aa:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 80002ac:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80002b0:	6093      	str	r3, [r2, #8]

  // Врубить прерывание по преобразованию
  ADC1->CR1 |= ADC_CR1_EOCIE; 
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	4a07      	ldr	r2, [pc, #28]	; (80002d4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 80002b8:	f043 0320 	orr.w	r3, r3, #32
 80002bc:	6053      	str	r3, [r2, #4]
  NVIC_EnableIRQ(ADC1_2_IRQn);
 80002be:	2012      	movs	r0, #18
 80002c0:	f7ff ff5e 	bl	8000180 <__NVIC_EnableIRQ>
}
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40010c00 	.word	0x40010c00
 80002d0:	40021000 	.word	0x40021000
 80002d4:	40012400 	.word	0x40012400

080002d8 <_Z6PinSetv>:
  RCC->CFGR |= (RCC_CFGR_HPRE_DIV1);
  */
}

void PinSet()
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  // Тактирование порта C  
  RCC->APB2ENR |= (RCC_APB2ENR_IOPCEN);
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <_Z6PinSetv+0x44>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a0e      	ldr	r2, [pc, #56]	; (800031c <_Z6PinSetv+0x44>)
 80002e2:	f043 0310 	orr.w	r3, r3, #16
 80002e6:	6193      	str	r3, [r2, #24]
  // Output mode, max speed 50 MHz 
  GPIOC->CRH &= ~(GPIO_CRH_MODE13);
 80002e8:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <_Z6PinSetv+0x48>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	4a0c      	ldr	r2, [pc, #48]	; (8000320 <_Z6PinSetv+0x48>)
 80002ee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80002f2:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= (0b11 << GPIO_CRH_MODE13_Pos);
 80002f4:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <_Z6PinSetv+0x48>)
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	4a09      	ldr	r2, [pc, #36]	; (8000320 <_Z6PinSetv+0x48>)
 80002fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80002fe:	6053      	str	r3, [r2, #4]
  // General purpose output push-pull  
  GPIOC->CRH &= ~(GPIO_CRH_CNF13);
 8000300:	4b07      	ldr	r3, [pc, #28]	; (8000320 <_Z6PinSetv+0x48>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4a06      	ldr	r2, [pc, #24]	; (8000320 <_Z6PinSetv+0x48>)
 8000306:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800030a:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= (0b00 << GPIO_CRH_CNF13_Pos);
 800030c:	4b04      	ldr	r3, [pc, #16]	; (8000320 <_Z6PinSetv+0x48>)
 800030e:	4a04      	ldr	r2, [pc, #16]	; (8000320 <_Z6PinSetv+0x48>)
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	6053      	str	r3, [r2, #4]
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40021000 	.word	0x40021000
 8000320:	40011000 	.word	0x40011000

08000324 <main>:
#include <ClockControl/ClockControl.h>
#include <DmaControl/DmaControl.h>
#include <UartWrap/Uart.h>

int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
   * @brief   Start HSI clock
   *
   * @details Returns 1 if launch is successful
   * @details HSE not divided for PLL entry
   */
  ClockControl::HSE::Start_HSE();
 800032a:	f000 fa69 	bl	8000800 <_ZN12ClockControl3HSE9Start_HSEEv>
  ClockControl::HSE::PLL::Clean_PLLXTPRE();
 800032e:	f000 fa9f 	bl	8000870 <_ZN12ClockControl3HSE3PLL14Clean_PLLXTPREEv>
   * @brief   PLL clocking from HSE
   *          Set PLL as system clock
   * @details Written only when PLL is disabled
   * @details On successful launch pll returns 1
   */
  ClockControl::HSE::PLL::Set_PLLSRC_HSE();
 8000332:	f000 fa8f 	bl	8000854 <_ZN12ClockControl3HSE3PLL14Set_PLLSRC_HSEEv>
  ClockControl::HSE::PLL::Set_PLL_MUL(6);
 8000336:	2006      	movs	r0, #6
 8000338:	f000 faa6 	bl	8000888 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt>
  ClockControl::HSE::PLL::Start_PLL();
 800033c:	f000 facc 	bl	80008d8 <_ZN12ClockControl3HSE3PLL9Start_PLLEv>
  ClockControl::HSE::PLL::Set_SW_PLL();
 8000340:	f000 faf4 	bl	800092c <_ZN12ClockControl3HSE3PLL10Set_SW_PLLEv>
   * @details APB1 timers                   - 48Mhz
   * @details APB2 peripherals              - 48Mhz
   * @details APB1 timers                   - 48Mhz
   * @details To ADC                        - 12Mhz
   */
  ClockControl::Set_AHB_Prescaler(1);
 8000344:	2001      	movs	r0, #1
 8000346:	f000 f8e1 	bl	800050c <_ZN12ClockControl17Set_AHB_PrescalerEt>
  ClockControl::Set_APB1_Prescaler(2);
 800034a:	2002      	movs	r0, #2
 800034c:	f000 f964 	bl	8000618 <_ZN12ClockControl18Set_APB1_PrescalerEt>
  ClockControl::Set_APB2_Prescaler(1);
 8000350:	2001      	movs	r0, #1
 8000352:	f000 f9bb 	bl	80006cc <_ZN12ClockControl18Set_APB2_PrescalerEt>
  ClockControl::Set_ADC_Prescaler(4);
 8000356:	2004      	movs	r0, #4
 8000358:	f000 fa12 	bl	8000780 <_ZN12ClockControl17Set_ADC_PrescalerEt>

  DMA1_Channel1->CNDTR = 0x00; // сколько кадров данных подлежит передаче
 800035c:	4b23      	ldr	r3, [pc, #140]	; (80003ec <main+0xc8>)
 800035e:	2200      	movs	r2, #0
 8000360:	605a      	str	r2, [r3, #4]
  DMA1_Channel1->CPAR = 0x00;  // адрес памяти
 8000362:	4b22      	ldr	r3, [pc, #136]	; (80003ec <main+0xc8>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  DMA1_Channel1->CPAR = 0x00;  // адрес периферийного устройства
 8000368:	4b20      	ldr	r3, [pc, #128]	; (80003ec <main+0xc8>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]

  DMA_Config DMA_Ch1_cfg;
  DMA_Ch1_cfg.MEM2MEM = MEM2MEM_Disabled;
 800036e:	2300      	movs	r3, #0
 8000370:	723b      	strb	r3, [r7, #8]
  DMA_Ch1_cfg.PL      = PL_High;
 8000372:	2302      	movs	r3, #2
 8000374:	727b      	strb	r3, [r7, #9]
  DMA_Ch1_cfg.MSIZE   = MSIZE_8bits;
 8000376:	2300      	movs	r3, #0
 8000378:	72bb      	strb	r3, [r7, #10]
  DMA_Ch1_cfg.PSIZE   = PSIZE_8bits;
 800037a:	2300      	movs	r3, #0
 800037c:	72fb      	strb	r3, [r7, #11]
  DMA_Ch1_cfg.MINC    = MINC_Disabled;
 800037e:	2300      	movs	r3, #0
 8000380:	733b      	strb	r3, [r7, #12]
  DMA_Ch1_cfg.PINC    = PINC_Disabled;
 8000382:	2300      	movs	r3, #0
 8000384:	737b      	strb	r3, [r7, #13]
  DMA_Ch1_cfg.CIRC    = CIRC_Disabled;
 8000386:	2300      	movs	r3, #0
 8000388:	73bb      	strb	r3, [r7, #14]
  DMA_Ch1_cfg.DIR     = DIR_From_Memory;
 800038a:	2301      	movs	r3, #1
 800038c:	73fb      	strb	r3, [r7, #15]
  DMA_Ch1_cfg.TEIE    = TEIE_Disabled;
 800038e:	2300      	movs	r3, #0
 8000390:	743b      	strb	r3, [r7, #16]
  DMA_Ch1_cfg.HTIE    = HTIE_Disabled;
 8000392:	2300      	movs	r3, #0
 8000394:	747b      	strb	r3, [r7, #17]
  DMA_Ch1_cfg.TCIE    = TCIE_Disabled;
 8000396:	2300      	movs	r3, #0
 8000398:	74bb      	strb	r3, [r7, #18]
  DMA_Ch1_cfg.EN      = EN_Disabled;
 800039a:	2300      	movs	r3, #0
 800039c:	74fb      	strb	r3, [r7, #19]
  DmaControl Dma_Ch1(DMA1, DMA1_Channel1, &DMA_Ch1_cfg);
 800039e:	f107 0308 	add.w	r3, r7, #8
 80003a2:	1d38      	adds	r0, r7, #4
 80003a4:	4a11      	ldr	r2, [pc, #68]	; (80003ec <main+0xc8>)
 80003a6:	4912      	ldr	r1, [pc, #72]	; (80003f0 <main+0xcc>)
 80003a8:	f000 face 	bl	8000948 <_ZN10DmaControlC1EP11DMA_TypeDefP19DMA_Channel_TypeDefP10DMA_Config>

  /**
   * @brief: Start GPIO
   */
  PinSet();
 80003ac:	f7ff ff94 	bl	80002d8 <_Z6PinSetv>
  Uart2_Ini(USART2, 24000000, 9600);
 80003b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003b4:	490f      	ldr	r1, [pc, #60]	; (80003f4 <main+0xd0>)
 80003b6:	4810      	ldr	r0, [pc, #64]	; (80003f8 <main+0xd4>)
 80003b8:	f000 fb74 	bl	8000aa4 <_Z9Uart2_IniP13USART_TypeDefli>
  ADC1_IN9_PB1_ini();
 80003bc:	f7ff fefc 	bl	80001b8 <_Z16ADC1_IN9_PB1_iniv>

  while (1)
  {
    GPIOC->ODR ^= GPIO_ODR_ODR13;
 80003c0:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <main+0xd8>)
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	4a0d      	ldr	r2, [pc, #52]	; (80003fc <main+0xd8>)
 80003c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80003ca:	60d3      	str	r3, [r2, #12]
    ADC1->CR2 |= ADC_CR2_SWSTART;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <main+0xdc>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <main+0xdc>)
 80003d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003d6:	6093      	str	r3, [r2, #8]

    for (int i = 0; i != 1000000; i++)
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	4a09      	ldr	r2, [pc, #36]	; (8000404 <main+0xe0>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d0ed      	beq.n	80003c0 <main+0x9c>
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	3301      	adds	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
 80003ea:	e7f7      	b.n	80003dc <main+0xb8>
 80003ec:	40020008 	.word	0x40020008
 80003f0:	40020000 	.word	0x40020000
 80003f4:	016e3600 	.word	0x016e3600
 80003f8:	40004400 	.word	0x40004400
 80003fc:	40011000 	.word	0x40011000
 8000400:	40012400 	.word	0x40012400
 8000404:	000f4240 	.word	0x000f4240

08000408 <ADC1_2_IRQHandler>:
extern "C"
{
#endif

    void ADC1_2_IRQHandler()
    {
 8000408:	b580      	push	{r7, lr}
 800040a:	b09a      	sub	sp, #104	; 0x68
 800040c:	af00      	add	r7, sp, #0
        if (ADC1->SR & ADC_SR_EOC)
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <ADC1_2_IRQHandler+0x4c>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f003 0302 	and.w	r3, r3, #2
 8000416:	2b00      	cmp	r3, #0
 8000418:	bf14      	ite	ne
 800041a:	2301      	movne	r3, #1
 800041c:	2300      	moveq	r3, #0
 800041e:	b2db      	uxtb	r3, r3
 8000420:	2b00      	cmp	r3, #0
 8000422:	d00f      	beq.n	8000444 <ADC1_2_IRQHandler+0x3c>
        {
            char buf[100];
            sprintf(buf, "V-> %ld \n\r", (ADC1->DR) * 3000 / 4096 );
 8000424:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <ADC1_2_IRQHandler+0x4c>)
 8000426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000428:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800042c:	fb02 f303 	mul.w	r3, r2, r3
 8000430:	0b1a      	lsrs	r2, r3, #12
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	4908      	ldr	r1, [pc, #32]	; (8000458 <ADC1_2_IRQHandler+0x50>)
 8000436:	4618      	mov	r0, r3
 8000438:	f000 fc2c 	bl	8000c94 <siprintf>
            Uart2_StrWrite(buf);
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	4618      	mov	r0, r3
 8000440:	f000 faf6 	bl	8000a30 <_Z14Uart2_StrWritePc>
        }

        ADC1->SR = 0x00;
 8000444:	4b03      	ldr	r3, [pc, #12]	; (8000454 <ADC1_2_IRQHandler+0x4c>)
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
    }
 800044a:	bf00      	nop
 800044c:	3768      	adds	r7, #104	; 0x68
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40012400 	.word	0x40012400
 8000458:	080015b0 	.word	0x080015b0

0800045c <TIM1_UP_IRQHandler>:

    void TIM1_UP_IRQHandler(void)
    {
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
        GPIOC->ODR |= (GPIO_ODR_ODR13);
 8000460:	4b0a      	ldr	r3, [pc, #40]	; (800048c <TIM1_UP_IRQHandler+0x30>)
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	4a09      	ldr	r2, [pc, #36]	; (800048c <TIM1_UP_IRQHandler+0x30>)
 8000466:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800046a:	60d3      	str	r3, [r2, #12]
        GPIOC->ODR &= ~(GPIO_ODR_ODR13);
 800046c:	4b07      	ldr	r3, [pc, #28]	; (800048c <TIM1_UP_IRQHandler+0x30>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4a06      	ldr	r2, [pc, #24]	; (800048c <TIM1_UP_IRQHandler+0x30>)
 8000472:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000476:	60d3      	str	r3, [r2, #12]
        TIM1->SR &= ~TIM_SR_UIF;
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <TIM1_UP_IRQHandler+0x34>)
 800047a:	691b      	ldr	r3, [r3, #16]
 800047c:	4a04      	ldr	r2, [pc, #16]	; (8000490 <TIM1_UP_IRQHandler+0x34>)
 800047e:	f023 0301 	bic.w	r3, r3, #1
 8000482:	6113      	str	r3, [r2, #16]
    }
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	40011000 	.word	0x40011000
 8000490:	40012c00 	.word	0x40012c00

08000494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800049c:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <_sbrk+0x5c>)
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <_sbrk+0x60>)
 80004a0:	1ad3      	subs	r3, r2, r3
 80004a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004a8:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <_sbrk+0x64>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d102      	bne.n	80004b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <_sbrk+0x64>)
 80004b2:	4a12      	ldr	r2, [pc, #72]	; (80004fc <_sbrk+0x68>)
 80004b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004b6:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <_sbrk+0x64>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	693a      	ldr	r2, [r7, #16]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d207      	bcs.n	80004d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004c4:	f000 fbbc 	bl	8000c40 <__errno>
 80004c8:	4603      	mov	r3, r0
 80004ca:	220c      	movs	r2, #12
 80004cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ce:	f04f 33ff 	mov.w	r3, #4294967295
 80004d2:	e009      	b.n	80004e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <_sbrk+0x64>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <_sbrk+0x64>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4413      	add	r3, r2
 80004e2:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <_sbrk+0x64>)
 80004e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3718      	adds	r7, #24
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20005000 	.word	0x20005000
 80004f4:	00000400 	.word	0x00000400
 80004f8:	20000084 	.word	0x20000084
 80004fc:	20000100 	.word	0x20000100

08000500 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <_ZN12ClockControl17Set_AHB_PrescalerEt>:
	 * Use default setting
	 * 8Mhz HSI
	 */
}
void ClockControl::Set_AHB_Prescaler(unsigned short AHB_Prescaler_Value)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	80fb      	strh	r3, [r7, #6]
	switch (AHB_Prescaler_Value)
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800051c:	d068      	beq.n	80005f0 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xe4>
 800051e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000522:	dc6c      	bgt.n	80005fe <_ZN12ClockControl17Set_AHB_PrescalerEt+0xf2>
 8000524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000528:	d05b      	beq.n	80005e2 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xd6>
 800052a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800052e:	dc66      	bgt.n	80005fe <_ZN12ClockControl17Set_AHB_PrescalerEt+0xf2>
 8000530:	2b80      	cmp	r3, #128	; 0x80
 8000532:	d04f      	beq.n	80005d4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xc8>
 8000534:	2b80      	cmp	r3, #128	; 0x80
 8000536:	dc62      	bgt.n	80005fe <_ZN12ClockControl17Set_AHB_PrescalerEt+0xf2>
 8000538:	2b10      	cmp	r3, #16
 800053a:	dc25      	bgt.n	8000588 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x7c>
 800053c:	2b02      	cmp	r3, #2
 800053e:	db5e      	blt.n	80005fe <_ZN12ClockControl17Set_AHB_PrescalerEt+0xf2>
 8000540:	3b02      	subs	r3, #2
 8000542:	2b0e      	cmp	r3, #14
 8000544:	d85b      	bhi.n	80005fe <_ZN12ClockControl17Set_AHB_PrescalerEt+0xf2>
 8000546:	a201      	add	r2, pc, #4	; (adr r2, 800054c <_ZN12ClockControl17Set_AHB_PrescalerEt+0x40>)
 8000548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800054c:	0800058f 	.word	0x0800058f
 8000550:	080005ff 	.word	0x080005ff
 8000554:	0800059d 	.word	0x0800059d
 8000558:	080005ff 	.word	0x080005ff
 800055c:	080005ff 	.word	0x080005ff
 8000560:	080005ff 	.word	0x080005ff
 8000564:	080005ab 	.word	0x080005ab
 8000568:	080005ff 	.word	0x080005ff
 800056c:	080005ff 	.word	0x080005ff
 8000570:	080005ff 	.word	0x080005ff
 8000574:	080005ff 	.word	0x080005ff
 8000578:	080005ff 	.word	0x080005ff
 800057c:	080005ff 	.word	0x080005ff
 8000580:	080005ff 	.word	0x080005ff
 8000584:	080005b9 	.word	0x080005b9
 8000588:	2b40      	cmp	r3, #64	; 0x40
 800058a:	d01c      	beq.n	80005c6 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xba>
 800058c:	e037      	b.n	80005fe <_ZN12ClockControl17Set_AHB_PrescalerEt+0xf2>
	{
	case 2:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV2;
 800058e:	4b21      	ldr	r3, [pc, #132]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	4a20      	ldr	r2, [pc, #128]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000598:	6053      	str	r3, [r2, #4]
		break;
 800059a:	e035      	b.n	8000608 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xfc>
	case 4:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV4;
 800059c:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	4a1c      	ldr	r2, [pc, #112]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 80005a2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80005a6:	6053      	str	r3, [r2, #4]
		break;
 80005a8:	e02e      	b.n	8000608 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xfc>
	case 8:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV8;
 80005aa:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	4a19      	ldr	r2, [pc, #100]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 80005b0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80005b4:	6053      	str	r3, [r2, #4]
		break;
 80005b6:	e027      	b.n	8000608 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xfc>
	case 16:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV16;
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	4a15      	ldr	r2, [pc, #84]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 80005be:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80005c2:	6053      	str	r3, [r2, #4]
		break;
 80005c4:	e020      	b.n	8000608 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xfc>
	case 64:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV64;
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 80005cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80005d0:	6053      	str	r3, [r2, #4]
		break;
 80005d2:	e019      	b.n	8000608 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xfc>
	case 128:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV128;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 80005da:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80005de:	6053      	str	r3, [r2, #4]
		break;
 80005e0:	e012      	b.n	8000608 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xfc>
	case 256:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV256;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 80005e8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80005ec:	6053      	str	r3, [r2, #4]
		break;
 80005ee:	e00b      	b.n	8000608 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xfc>
	case 512:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV512;
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 80005f6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80005fa:	6053      	str	r3, [r2, #4]
		break;
 80005fc:	e004      	b.n	8000608 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xfc>
	default:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	6053      	str	r3, [r2, #4]
	}
}
 8000606:	bf00      	nop
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <_ZN12ClockControl18Set_APB1_PrescalerEt>:
void ClockControl::Set_APB1_Prescaler(unsigned short APB1_Prescaler_Value)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
	switch (APB1_Prescaler_Value)
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	3b01      	subs	r3, #1
 8000626:	2b0f      	cmp	r3, #15
 8000628:	d843      	bhi.n	80006b2 <_ZN12ClockControl18Set_APB1_PrescalerEt+0x9a>
 800062a:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <_ZN12ClockControl18Set_APB1_PrescalerEt+0x18>)
 800062c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000630:	08000671 	.word	0x08000671
 8000634:	0800067b 	.word	0x0800067b
 8000638:	080006b3 	.word	0x080006b3
 800063c:	08000689 	.word	0x08000689
 8000640:	080006b3 	.word	0x080006b3
 8000644:	080006b3 	.word	0x080006b3
 8000648:	080006b3 	.word	0x080006b3
 800064c:	08000697 	.word	0x08000697
 8000650:	080006b3 	.word	0x080006b3
 8000654:	080006b3 	.word	0x080006b3
 8000658:	080006b3 	.word	0x080006b3
 800065c:	080006b3 	.word	0x080006b3
 8000660:	080006b3 	.word	0x080006b3
 8000664:	080006b3 	.word	0x080006b3
 8000668:	080006b3 	.word	0x080006b3
 800066c:	080006a5 	.word	0x080006a5
	{
	case 1:
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	6053      	str	r3, [r2, #4]
		break;
 8000678:	e020      	b.n	80006bc <_ZN12ClockControl18Set_APB1_PrescalerEt+0xa4>
	case 2:
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 8000680:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000684:	6053      	str	r3, [r2, #4]
		break;
 8000686:	e019      	b.n	80006bc <_ZN12ClockControl18Set_APB1_PrescalerEt+0xa4>
	case 4:
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 800068e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000692:	6053      	str	r3, [r2, #4]
		break;
 8000694:	e012      	b.n	80006bc <_ZN12ClockControl18Set_APB1_PrescalerEt+0xa4>
	case 8:
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV8;
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 800069c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80006a0:	6053      	str	r3, [r2, #4]
		break;
 80006a2:	e00b      	b.n	80006bc <_ZN12ClockControl18Set_APB1_PrescalerEt+0xa4>
	case 16:
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV16;
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 80006aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80006ae:	6053      	str	r3, [r2, #4]
		break;
 80006b0:	e004      	b.n	80006bc <_ZN12ClockControl18Set_APB1_PrescalerEt+0xa4>
	default:
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	6053      	str	r3, [r2, #4]
	}
}
 80006ba:	bf00      	nop
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000

080006cc <_ZN12ClockControl18Set_APB2_PrescalerEt>:
void ClockControl::Set_APB2_Prescaler(unsigned short APB2_Prescaler_Value)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	80fb      	strh	r3, [r7, #6]
	switch (APB2_Prescaler_Value)
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	3b01      	subs	r3, #1
 80006da:	2b0f      	cmp	r3, #15
 80006dc:	d843      	bhi.n	8000766 <_ZN12ClockControl18Set_APB2_PrescalerEt+0x9a>
 80006de:	a201      	add	r2, pc, #4	; (adr r2, 80006e4 <_ZN12ClockControl18Set_APB2_PrescalerEt+0x18>)
 80006e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e4:	08000725 	.word	0x08000725
 80006e8:	0800072f 	.word	0x0800072f
 80006ec:	08000767 	.word	0x08000767
 80006f0:	0800073d 	.word	0x0800073d
 80006f4:	08000767 	.word	0x08000767
 80006f8:	08000767 	.word	0x08000767
 80006fc:	08000767 	.word	0x08000767
 8000700:	0800074b 	.word	0x0800074b
 8000704:	08000767 	.word	0x08000767
 8000708:	08000767 	.word	0x08000767
 800070c:	08000767 	.word	0x08000767
 8000710:	08000767 	.word	0x08000767
 8000714:	08000767 	.word	0x08000767
 8000718:	08000767 	.word	0x08000767
 800071c:	08000767 	.word	0x08000767
 8000720:	08000759 	.word	0x08000759
	{
	case 1:
		RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	6053      	str	r3, [r2, #4]
		break;
 800072c:	e020      	b.n	8000770 <_ZN12ClockControl18Set_APB2_PrescalerEt+0xa4>
	case 2:
		RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	4a12      	ldr	r2, [pc, #72]	; (800077c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 8000734:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000738:	6053      	str	r3, [r2, #4]
		break;
 800073a:	e019      	b.n	8000770 <_ZN12ClockControl18Set_APB2_PrescalerEt+0xa4>
	case 4:
		RCC->CFGR |= RCC_CFGR_PPRE2_DIV4;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	4a0e      	ldr	r2, [pc, #56]	; (800077c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 8000742:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8000746:	6053      	str	r3, [r2, #4]
		break;
 8000748:	e012      	b.n	8000770 <_ZN12ClockControl18Set_APB2_PrescalerEt+0xa4>
	case 8:
		RCC->CFGR |= RCC_CFGR_PPRE2_DIV8;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	4a0b      	ldr	r2, [pc, #44]	; (800077c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 8000750:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000754:	6053      	str	r3, [r2, #4]
		break;
 8000756:	e00b      	b.n	8000770 <_ZN12ClockControl18Set_APB2_PrescalerEt+0xa4>
	case 16:
		RCC->CFGR |= RCC_CFGR_PPRE2_DIV16;
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 800075e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000762:	6053      	str	r3, [r2, #4]
		break;
 8000764:	e004      	b.n	8000770 <_ZN12ClockControl18Set_APB2_PrescalerEt+0xa4>
	default:
		RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	6053      	str	r3, [r2, #4]
	}
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000

08000780 <_ZN12ClockControl17Set_ADC_PrescalerEt>:
void ClockControl::Set_ADC_Prescaler(unsigned short ADC_Prescaler_Value)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
	switch (ADC_Prescaler_Value)
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	3b02      	subs	r3, #2
 800078e:	2b06      	cmp	r3, #6
 8000790:	d82a      	bhi.n	80007e8 <_ZN12ClockControl17Set_ADC_PrescalerEt+0x68>
 8000792:	a201      	add	r2, pc, #4	; (adr r2, 8000798 <_ZN12ClockControl17Set_ADC_PrescalerEt+0x18>)
 8000794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000798:	080007b5 	.word	0x080007b5
 800079c:	080007e9 	.word	0x080007e9
 80007a0:	080007bf 	.word	0x080007bf
 80007a4:	080007e9 	.word	0x080007e9
 80007a8:	080007cd 	.word	0x080007cd
 80007ac:	080007e9 	.word	0x080007e9
 80007b0:	080007db 	.word	0x080007db
	{
	case 2:
		RCC->CFGR |= RCC_CFGR_ADCPRE_DIV2;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 80007b6:	4a11      	ldr	r2, [pc, #68]	; (80007fc <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	6053      	str	r3, [r2, #4]
		break;
 80007bc:	e019      	b.n	80007f2 <_ZN12ClockControl17Set_ADC_PrescalerEt+0x72>
	case 4:
		RCC->CFGR |= RCC_CFGR_ADCPRE_DIV4;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6053      	str	r3, [r2, #4]
		break;
 80007ca:	e012      	b.n	80007f2 <_ZN12ClockControl17Set_ADC_PrescalerEt+0x72>
	case 6:
		RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 80007d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007d6:	6053      	str	r3, [r2, #4]
		break;
 80007d8:	e00b      	b.n	80007f2 <_ZN12ClockControl17Set_ADC_PrescalerEt+0x72>
	case 8:
		RCC->CFGR |= RCC_CFGR_ADCPRE_DIV8;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	4a07      	ldr	r2, [pc, #28]	; (80007fc <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 80007e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e4:	6053      	str	r3, [r2, #4]
		break;
 80007e6:	e004      	b.n	80007f2 <_ZN12ClockControl17Set_ADC_PrescalerEt+0x72>
	default:
		RCC->CFGR |= RCC_CFGR_ADCPRE_DIV2;
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 80007ea:	4a04      	ldr	r2, [pc, #16]	; (80007fc <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	6053      	str	r3, [r2, #4]
	}
}
 80007f0:	bf00      	nop
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	40021000 	.word	0x40021000

08000800 <_ZN12ClockControl3HSE9Start_HSEEv>:
{
	RCC->CFGR &= ~RCC_CFGR_USBPRE;
}

bool ClockControl::HSE::Start_HSE()
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <_ZN12ClockControl3HSE9Start_HSEEv+0x50>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a11      	ldr	r2, [pc, #68]	; (8000850 <_ZN12ClockControl3HSE9Start_HSEEv+0x50>)
 800080c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000810:	6013      	str	r3, [r2, #0]

	for (int StartUpCounter = 0;; StartUpCounter++)
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
	{
		if (StartUpCounter > 0x1000)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800081c:	dd01      	ble.n	8000822 <_ZN12ClockControl3HSE9Start_HSEEv+0x22>
			return 0;
 800081e:	2300      	movs	r3, #0
 8000820:	e010      	b.n	8000844 <_ZN12ClockControl3HSE9Start_HSEEv+0x44>
		else if (RCC->CR & RCC_CR_HSERDY)
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <_ZN12ClockControl3HSE9Start_HSEEv+0x50>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800082a:	2b00      	cmp	r3, #0
 800082c:	bf14      	ite	ne
 800082e:	2301      	movne	r3, #1
 8000830:	2300      	moveq	r3, #0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <_ZN12ClockControl3HSE9Start_HSEEv+0x3c>
			return 1;
 8000838:	2301      	movs	r3, #1
 800083a:	e003      	b.n	8000844 <_ZN12ClockControl3HSE9Start_HSEEv+0x44>
	for (int StartUpCounter = 0;; StartUpCounter++)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3301      	adds	r3, #1
 8000840:	607b      	str	r3, [r7, #4]
		if (StartUpCounter > 0x1000)
 8000842:	e7e8      	b.n	8000816 <_ZN12ClockControl3HSE9Start_HSEEv+0x16>
	}
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <_ZN12ClockControl3HSE3PLL14Set_PLLSRC_HSEEv>:
void ClockControl::HSE::Stop_HSE()
{
	RCC->CR &= ~RCC_CR_HSEON;
}
void ClockControl::HSE::PLL::Set_PLLSRC_HSE()
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <_ZN12ClockControl3HSE3PLL14Set_PLLSRC_HSEEv+0x18>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	4a03      	ldr	r2, [pc, #12]	; (800086c <_ZN12ClockControl3HSE3PLL14Set_PLLSRC_HSEEv+0x18>)
 800085e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000862:	6053      	str	r3, [r2, #4]
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	40021000 	.word	0x40021000

08000870 <_ZN12ClockControl3HSE3PLL14Clean_PLLXTPREEv>:
void ClockControl::HSE::PLL::Set_PLLXTPRE()
{
	RCC->CFGR |= (1 << RCC_CFGR_PLLXTPRE_Pos);
}
void ClockControl::HSE::PLL::Clean_PLLXTPRE()
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
	RCC->CFGR &= ~(0 << RCC_CFGR_PLLXTPRE_Pos);
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <_ZN12ClockControl3HSE3PLL14Clean_PLLXTPREEv+0x14>)
 8000876:	4a03      	ldr	r2, [pc, #12]	; (8000884 <_ZN12ClockControl3HSE3PLL14Clean_PLLXTPREEv+0x14>)
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	6053      	str	r3, [r2, #4]
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40021000 	.word	0x40021000

08000888 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt>:
void ClockControl::HSE::PLL::Set_PLL_MUL(unsigned short PLL_MUL_Value)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
	if (PLL_MUL_Value < 2)
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d804      	bhi.n	80008a2 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x1a>
	{
		RCC->CFGR |= RCC_CFGR_PLLMULL2;
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x4c>)
 800089a:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x4c>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	6053      	str	r3, [r2, #4]
		else
		{
			RCC->CFGR |= ((PLL_MUL_Value - 2) << RCC_CFGR_PLLMULL_Pos);
		}
	}
}
 80008a0:	e012      	b.n	80008c8 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x40>
		if (PLL_MUL_Value > 0b1111)
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	d906      	bls.n	80008b6 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x2e>
			RCC->CFGR |= RCC_CFGR_PLLMULL16;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x4c>)
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	4a09      	ldr	r2, [pc, #36]	; (80008d4 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x4c>)
 80008ae:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80008b2:	6053      	str	r3, [r2, #4]
}
 80008b4:	e008      	b.n	80008c8 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x40>
			RCC->CFGR |= ((PLL_MUL_Value - 2) << RCC_CFGR_PLLMULL_Pos);
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x4c>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	88fa      	ldrh	r2, [r7, #6]
 80008bc:	3a02      	subs	r2, #2
 80008be:	0492      	lsls	r2, r2, #18
 80008c0:	4611      	mov	r1, r2
 80008c2:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x4c>)
 80008c4:	430b      	orrs	r3, r1
 80008c6:	6053      	str	r3, [r2, #4]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000

080008d8 <_ZN12ClockControl3HSE3PLL9Start_PLLEv>:
bool ClockControl::HSE::PLL::Start_PLL()
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_PLLON;
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <_ZN12ClockControl3HSE3PLL9Start_PLLEv+0x50>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a11      	ldr	r2, [pc, #68]	; (8000928 <_ZN12ClockControl3HSE3PLL9Start_PLLEv+0x50>)
 80008e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008e8:	6013      	str	r3, [r2, #0]

	for (int StartUpCounter = 0;; StartUpCounter++)
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
	{
		if (StartUpCounter > 0x1000)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008f4:	dd01      	ble.n	80008fa <_ZN12ClockControl3HSE3PLL9Start_PLLEv+0x22>
			return 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e010      	b.n	800091c <_ZN12ClockControl3HSE3PLL9Start_PLLEv+0x44>
		else if (RCC->CR & RCC_CR_PLLRDY)
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <_ZN12ClockControl3HSE3PLL9Start_PLLEv+0x50>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000902:	2b00      	cmp	r3, #0
 8000904:	bf14      	ite	ne
 8000906:	2301      	movne	r3, #1
 8000908:	2300      	moveq	r3, #0
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <_ZN12ClockControl3HSE3PLL9Start_PLLEv+0x3c>
			return 1;
 8000910:	2301      	movs	r3, #1
 8000912:	e003      	b.n	800091c <_ZN12ClockControl3HSE3PLL9Start_PLLEv+0x44>
	for (int StartUpCounter = 0;; StartUpCounter++)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3301      	adds	r3, #1
 8000918:	607b      	str	r3, [r7, #4]
		if (StartUpCounter > 0x1000)
 800091a:	e7e8      	b.n	80008ee <_ZN12ClockControl3HSE3PLL9Start_PLLEv+0x16>
	}
}
 800091c:	4618      	mov	r0, r3
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <_ZN12ClockControl3HSE3PLL10Set_SW_PLLEv>:
void ClockControl::HSE::PLL::Set_SW_PLL()
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <_ZN12ClockControl3HSE3PLL10Set_SW_PLLEv+0x18>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	4a03      	ldr	r2, [pc, #12]	; (8000944 <_ZN12ClockControl3HSE3PLL10Set_SW_PLLEv+0x18>)
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	6053      	str	r3, [r2, #4]
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	40021000 	.word	0x40021000

08000948 <_ZN10DmaControlC1EP11DMA_TypeDefP19DMA_Channel_TypeDefP10DMA_Config>:
 */

#include "stm32f1xx.h"
#include <DmaControl/DmaControl.h>

DmaControl::DmaControl(DMA_TypeDef *DMA_Num, DMA_Channel_TypeDef *DMA_Channel, DMA_Config *cfg)
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
 8000954:	603b      	str	r3, [r7, #0]
{
    if (DMA_Num == DMA1)
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	4a25      	ldr	r2, [pc, #148]	; (80009f0 <_ZN10DmaControlC1EP11DMA_TypeDefP19DMA_Channel_TypeDefP10DMA_Config+0xa8>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d105      	bne.n	800096a <_ZN10DmaControlC1EP11DMA_TypeDefP19DMA_Channel_TypeDefP10DMA_Config+0x22>
        RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 800095e:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <_ZN10DmaControlC1EP11DMA_TypeDefP19DMA_Channel_TypeDefP10DMA_Config+0xac>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	4a24      	ldr	r2, [pc, #144]	; (80009f4 <_ZN10DmaControlC1EP11DMA_TypeDefP19DMA_Channel_TypeDefP10DMA_Config+0xac>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6153      	str	r3, [r2, #20]

    DMA_Num->ISR = 0x00;  // DMA interrupt status register
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
    DMA_Num->IFCR = 0x00; // DMA interrupt flag clear register
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	2200      	movs	r2, #0
 8000974:	605a      	str	r2, [r3, #4]

    DMA_Channel->CCR = 0x00;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
    DMA_Channel->CCR |=
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
        (cfg->MEM2MEM << DMA_CCR_MEM2MEM_Pos) // Memory to memory mode disabled
 8000980:	683a      	ldr	r2, [r7, #0]
 8000982:	7812      	ldrb	r2, [r2, #0]
 8000984:	0391      	lsls	r1, r2, #14
        | (cfg->PL    << DMA_CCR_PL_Pos)         // Channel priority level
 8000986:	683a      	ldr	r2, [r7, #0]
 8000988:	7852      	ldrb	r2, [r2, #1]
 800098a:	0312      	lsls	r2, r2, #12
 800098c:	4311      	orrs	r1, r2
        | (cfg->MSIZE << DMA_CCR_MSIZE_Pos)   // Memory size
 800098e:	683a      	ldr	r2, [r7, #0]
 8000990:	7892      	ldrb	r2, [r2, #2]
 8000992:	0292      	lsls	r2, r2, #10
 8000994:	4311      	orrs	r1, r2
        | (cfg->PSIZE << DMA_CCR_PSIZE_Pos)   // Peripheral size
 8000996:	683a      	ldr	r2, [r7, #0]
 8000998:	78d2      	ldrb	r2, [r2, #3]
 800099a:	0212      	lsls	r2, r2, #8
 800099c:	4311      	orrs	r1, r2
        | (cfg->MINC  << DMA_CCR_MINC_Pos)     // Memory increment mode
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	7912      	ldrb	r2, [r2, #4]
 80009a2:	01d2      	lsls	r2, r2, #7
 80009a4:	4311      	orrs	r1, r2
        | (cfg->PINC  << DMA_CCR_PINC_Pos)     // Peripheral increment mode
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	7952      	ldrb	r2, [r2, #5]
 80009aa:	0192      	lsls	r2, r2, #6
 80009ac:	4311      	orrs	r1, r2
        | (cfg->CIRC  << DMA_CCR_CIRC_Pos)     // Circular mode
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	7992      	ldrb	r2, [r2, #6]
 80009b2:	0152      	lsls	r2, r2, #5
 80009b4:	4311      	orrs	r1, r2
        | (cfg->DIR   << DMA_CCR_DIR_Pos)       // Data transfer direction
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	79d2      	ldrb	r2, [r2, #7]
 80009ba:	0112      	lsls	r2, r2, #4
 80009bc:	4311      	orrs	r1, r2
        | (cfg->TEIE  << DMA_CCR_TEIE_Pos)     // Transfer error interrupt enable
 80009be:	683a      	ldr	r2, [r7, #0]
 80009c0:	7a12      	ldrb	r2, [r2, #8]
 80009c2:	00d2      	lsls	r2, r2, #3
 80009c4:	4311      	orrs	r1, r2
        | (cfg->HTIE  << DMA_CCR_HTIE_Pos)     // Half transfer interrupt enable
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	7a52      	ldrb	r2, [r2, #9]
 80009ca:	0092      	lsls	r2, r2, #2
 80009cc:	4311      	orrs	r1, r2
        | (cfg->TCIE  << DMA_CCR_TCIE_Pos)     // Transfer complete interrupt enable
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	7a92      	ldrb	r2, [r2, #10]
 80009d2:	0052      	lsls	r2, r2, #1
 80009d4:	430a      	orrs	r2, r1
        | (cfg->EN    << DMA_CCR_EN_Pos);        // Channel enable
 80009d6:	6839      	ldr	r1, [r7, #0]
 80009d8:	7ac9      	ldrb	r1, [r1, #11]
 80009da:	430a      	orrs	r2, r1
    DMA_Channel->CCR |=
 80009dc:	431a      	orrs	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	601a      	str	r2, [r3, #0]
}
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	4618      	mov	r0, r3
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40021000 	.word	0x40021000

080009f8 <__NVIC_EnableIRQ>:
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	db0b      	blt.n	8000a22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f003 021f 	and.w	r2, r3, #31
 8000a10:	4906      	ldr	r1, [pc, #24]	; (8000a2c <__NVIC_EnableIRQ+0x34>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	095b      	lsrs	r3, r3, #5
 8000a18:	2001      	movs	r0, #1
 8000a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	e000e100 	.word	0xe000e100

08000a30 <_Z14Uart2_StrWritePc>:
short Uart2_Counter = 0;
short Uart2_Len = 0;
char Uart2_BufSend[100] = {0};

void Uart2_StrWrite(char Buf[100])
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if (Uart2_Cond)
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <_Z14Uart2_StrWritePc+0x60>)
 8000a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d021      	beq.n	8000a86 <_Z14Uart2_StrWritePc+0x56>
  {
    Uart2_Cond = 0;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <_Z14Uart2_StrWritePc+0x60>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	801a      	strh	r2, [r3, #0]
    Uart2_Counter = 0;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <_Z14Uart2_StrWritePc+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	801a      	strh	r2, [r3, #0]
    Uart2_Len = 0;
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <_Z14Uart2_StrWritePc+0x68>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	801a      	strh	r2, [r3, #0]

    strcpy(Uart2_BufSend, Buf);
 8000a54:	6879      	ldr	r1, [r7, #4]
 8000a56:	4811      	ldr	r0, [pc, #68]	; (8000a9c <_Z14Uart2_StrWritePc+0x6c>)
 8000a58:	f000 f93c 	bl	8000cd4 <strcpy>
    Uart2_Len = strlen(Uart2_BufSend);
 8000a5c:	480f      	ldr	r0, [pc, #60]	; (8000a9c <_Z14Uart2_StrWritePc+0x6c>)
 8000a5e:	f7ff fb87 	bl	8000170 <strlen>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <_Z14Uart2_StrWritePc+0x68>)
 8000a68:	801a      	strh	r2, [r3, #0]

    USART2->DR = Uart2_BufSend[Uart2_Counter];
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <_Z14Uart2_StrWritePc+0x64>)
 8000a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <_Z14Uart2_StrWritePc+0x6c>)
 8000a74:	5c9a      	ldrb	r2, [r3, r2]
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <_Z14Uart2_StrWritePc+0x70>)
 8000a78:	605a      	str	r2, [r3, #4]
    USART2->CR1 |= USART_CR1_TXEIE;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <_Z14Uart2_StrWritePc+0x70>)
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <_Z14Uart2_StrWritePc+0x70>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	60d3      	str	r3, [r2, #12]
  }
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20000088 	.word	0x20000088
 8000a98:	2000008a 	.word	0x2000008a
 8000a9c:	2000008c 	.word	0x2000008c
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <_Z9Uart2_IniP13USART_TypeDefli>:

void Uart2_Ini(USART_TypeDef *UartNumb, long int UartBusCLK, int BaudRate)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  /*  включаем тактирование UART  */
  RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000ab0:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <_Z9Uart2_IniP13USART_TypeDefli+0x9c>)
 8000ab2:	69db      	ldr	r3, [r3, #28]
 8000ab4:	4a22      	ldr	r2, [pc, #136]	; (8000b40 <_Z9Uart2_IniP13USART_TypeDefli+0x9c>)
 8000ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aba:	61d3      	str	r3, [r2, #28]

  /*  UART2 использует выводы: PA2 (TX) и PA3 (RX).  */
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; // тактирование порта GPIOA
 8000abc:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <_Z9Uart2_IniP13USART_TypeDefli+0x9c>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a1f      	ldr	r2, [pc, #124]	; (8000b40 <_Z9Uart2_IniP13USART_TypeDefli+0x9c>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	6193      	str	r3, [r2, #24]

  /*  PA2_Tx  */
  GPIOA->CRL &= ~(GPIO_CRL_CNF2);
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 8000ace:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000ad2:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= (0b10 << GPIO_CRL_CNF2_Pos); // Alternate Function outpu Push-pull
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a1a      	ldr	r2, [pc, #104]	; (8000b44 <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 8000ada:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ade:	6013      	str	r3, [r2, #0]
  GPIOA->CRL &= ~(GPIO_CRL_MODE2);
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 8000ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000aea:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= (0b11 << GPIO_CRL_MODE2_Pos); // Max speed
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 8000af2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000af6:	6013      	str	r3, [r2, #0]

  /*  PA3_Rx  */

  /*  конфигурация UART2  */
  UartNumb->CR1 = 0x00;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  UartNumb->CR1 |= USART_CR1_UE; // разрешаем USART2
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	60da      	str	r2, [r3, #12]

  /*  USARTDIV = Fck / (16 * BAUD) = 72000000 / (16 * 9600) = 468,75        */
  /*  Значение регистра USART_BRR = 468,75 * 16 = 7500 - скорость 9600 бод  */
  // USART2->BRR = 833;  // скорость 9600 бод при частоте 8 Мгц
  UartNumb->BRR = UartBusCLK / BaudRate;
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	609a      	str	r2, [r3, #8]

 // разрешаем приемник, передатчик и прерывание по приему
  UartNumb->CR1 |= USART_CR1_TE 
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	f043 020c 	orr.w	r2, r3, #12
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	60da      	str	r2, [r3, #12]
                | USART_CR1_RE;

  UartNumb->CR2 = 0;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  UartNumb->CR3 = 0;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]

  NVIC_EnableIRQ(USART2_IRQn);
 8000b30:	2026      	movs	r0, #38	; 0x26
 8000b32:	f7ff ff61 	bl	80009f8 <__NVIC_EnableIRQ>
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40010800 	.word	0x40010800

08000b48 <USART2_IRQHandler>:
#ifdef __cplusplus
extern "C"
{
#endif
    void USART2_IRQHandler(void)
    {
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
        if (USART2->SR & USART_SR_TXE)
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <USART2_IRQHandler+0x90>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	bf14      	ite	ne
 8000b58:	2301      	movne	r3, #1
 8000b5a:	2300      	moveq	r3, #0
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d035      	beq.n	8000bce <USART2_IRQHandler+0x86>
        {
            if (Uart2_Counter < Uart2_Len)
 8000b62:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <USART2_IRQHandler+0x94>)
 8000b64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <USART2_IRQHandler+0x98>)
 8000b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	da1a      	bge.n	8000ba8 <USART2_IRQHandler+0x60>
            {
                Uart2_Counter++;
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <USART2_IRQHandler+0x94>)
 8000b74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <USART2_IRQHandler+0x94>)
 8000b82:	801a      	strh	r2, [r3, #0]
                USART2->DR = Uart2_BufSend[Uart2_Counter];
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <USART2_IRQHandler+0x94>)
 8000b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <USART2_IRQHandler+0x9c>)
 8000b8e:	5c9a      	ldrb	r2, [r3, r2]
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <USART2_IRQHandler+0x90>)
 8000b92:	605a      	str	r2, [r3, #4]

                USART2->SR = 0x00;
 8000b94:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <USART2_IRQHandler+0x90>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
                USART2->CR1 &= ~USART_CR1_TCIE;
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <USART2_IRQHandler+0x90>)
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <USART2_IRQHandler+0x90>)
 8000ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ba4:	60d3      	str	r3, [r2, #12]
                Uart2_Len = 0;
                Uart2_BufSend[100] = {0};
                USART2->CR1 &= ~USART_CR1_TXEIE;
            }
        }
    }
 8000ba6:	e012      	b.n	8000bce <USART2_IRQHandler+0x86>
                Uart2_Cond = 1;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <USART2_IRQHandler+0xa0>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	801a      	strh	r2, [r3, #0]
                Uart2_Counter = 0;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <USART2_IRQHandler+0x94>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	801a      	strh	r2, [r3, #0]
                Uart2_Len = 0;
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <USART2_IRQHandler+0x98>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	801a      	strh	r2, [r3, #0]
                Uart2_BufSend[100] = {0};
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <USART2_IRQHandler+0x9c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                USART2->CR1 &= ~USART_CR1_TXEIE;
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <USART2_IRQHandler+0x90>)
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <USART2_IRQHandler+0x90>)
 8000bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bcc:	60d3      	str	r3, [r2, #12]
    }
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40004400 	.word	0x40004400
 8000bdc:	20000088 	.word	0x20000088
 8000be0:	2000008a 	.word	0x2000008a
 8000be4:	2000008c 	.word	0x2000008c
 8000be8:	20000000 	.word	0x20000000

08000bec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bf0:	f7ff fc86 	bl	8000500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	; (8000c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <LoopForever+0xe>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	; (8000c38 <LoopForever+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c1a:	f000 f817 	bl	8000c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1e:	f7ff fb81 	bl	8000324 <main>

08000c22 <LoopForever>:

LoopForever:
    b LoopForever
 8000c22:	e7fe      	b.n	8000c22 <LoopForever>
  ldr   r0, =_estack
 8000c24:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c30:	080015f8 	.word	0x080015f8
  ldr r2, =_sbss
 8000c34:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c38:	20000100 	.word	0x20000100

08000c3c <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC3_IRQHandler>
	...

08000c40 <__errno>:
 8000c40:	4b01      	ldr	r3, [pc, #4]	; (8000c48 <__errno+0x8>)
 8000c42:	6818      	ldr	r0, [r3, #0]
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000004 	.word	0x20000004

08000c4c <__libc_init_array>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4d0c      	ldr	r5, [pc, #48]	; (8000c84 <__libc_init_array+0x38>)
 8000c52:	4c0d      	ldr	r4, [pc, #52]	; (8000c88 <__libc_init_array+0x3c>)
 8000c54:	1b64      	subs	r4, r4, r5
 8000c56:	10a4      	asrs	r4, r4, #2
 8000c58:	42a6      	cmp	r6, r4
 8000c5a:	d109      	bne.n	8000c70 <__libc_init_array+0x24>
 8000c5c:	f000 fc9c 	bl	8001598 <_init>
 8000c60:	2600      	movs	r6, #0
 8000c62:	4d0a      	ldr	r5, [pc, #40]	; (8000c8c <__libc_init_array+0x40>)
 8000c64:	4c0a      	ldr	r4, [pc, #40]	; (8000c90 <__libc_init_array+0x44>)
 8000c66:	1b64      	subs	r4, r4, r5
 8000c68:	10a4      	asrs	r4, r4, #2
 8000c6a:	42a6      	cmp	r6, r4
 8000c6c:	d105      	bne.n	8000c7a <__libc_init_array+0x2e>
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}
 8000c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c74:	4798      	blx	r3
 8000c76:	3601      	adds	r6, #1
 8000c78:	e7ee      	b.n	8000c58 <__libc_init_array+0xc>
 8000c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c7e:	4798      	blx	r3
 8000c80:	3601      	adds	r6, #1
 8000c82:	e7f2      	b.n	8000c6a <__libc_init_array+0x1e>
 8000c84:	080015f0 	.word	0x080015f0
 8000c88:	080015f0 	.word	0x080015f0
 8000c8c:	080015f0 	.word	0x080015f0
 8000c90:	080015f4 	.word	0x080015f4

08000c94 <siprintf>:
 8000c94:	b40e      	push	{r1, r2, r3}
 8000c96:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000c9a:	b500      	push	{lr}
 8000c9c:	b09c      	sub	sp, #112	; 0x70
 8000c9e:	ab1d      	add	r3, sp, #116	; 0x74
 8000ca0:	9002      	str	r0, [sp, #8]
 8000ca2:	9006      	str	r0, [sp, #24]
 8000ca4:	9107      	str	r1, [sp, #28]
 8000ca6:	9104      	str	r1, [sp, #16]
 8000ca8:	4808      	ldr	r0, [pc, #32]	; (8000ccc <siprintf+0x38>)
 8000caa:	4909      	ldr	r1, [pc, #36]	; (8000cd0 <siprintf+0x3c>)
 8000cac:	f853 2b04 	ldr.w	r2, [r3], #4
 8000cb0:	9105      	str	r1, [sp, #20]
 8000cb2:	6800      	ldr	r0, [r0, #0]
 8000cb4:	a902      	add	r1, sp, #8
 8000cb6:	9301      	str	r3, [sp, #4]
 8000cb8:	f000 f870 	bl	8000d9c <_svfiprintf_r>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	9b02      	ldr	r3, [sp, #8]
 8000cc0:	701a      	strb	r2, [r3, #0]
 8000cc2:	b01c      	add	sp, #112	; 0x70
 8000cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000cc8:	b003      	add	sp, #12
 8000cca:	4770      	bx	lr
 8000ccc:	20000004 	.word	0x20000004
 8000cd0:	ffff0208 	.word	0xffff0208

08000cd4 <strcpy>:
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000cda:	f803 2b01 	strb.w	r2, [r3], #1
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	d1f9      	bne.n	8000cd6 <strcpy+0x2>
 8000ce2:	4770      	bx	lr

08000ce4 <__ssputs_r>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	688e      	ldr	r6, [r1, #8]
 8000cea:	4682      	mov	sl, r0
 8000cec:	429e      	cmp	r6, r3
 8000cee:	460c      	mov	r4, r1
 8000cf0:	4690      	mov	r8, r2
 8000cf2:	461f      	mov	r7, r3
 8000cf4:	d838      	bhi.n	8000d68 <__ssputs_r+0x84>
 8000cf6:	898a      	ldrh	r2, [r1, #12]
 8000cf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000cfc:	d032      	beq.n	8000d64 <__ssputs_r+0x80>
 8000cfe:	6825      	ldr	r5, [r4, #0]
 8000d00:	6909      	ldr	r1, [r1, #16]
 8000d02:	3301      	adds	r3, #1
 8000d04:	eba5 0901 	sub.w	r9, r5, r1
 8000d08:	6965      	ldr	r5, [r4, #20]
 8000d0a:	444b      	add	r3, r9
 8000d0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000d10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000d14:	106d      	asrs	r5, r5, #1
 8000d16:	429d      	cmp	r5, r3
 8000d18:	bf38      	it	cc
 8000d1a:	461d      	movcc	r5, r3
 8000d1c:	0553      	lsls	r3, r2, #21
 8000d1e:	d531      	bpl.n	8000d84 <__ssputs_r+0xa0>
 8000d20:	4629      	mov	r1, r5
 8000d22:	f000 fb6f 	bl	8001404 <_malloc_r>
 8000d26:	4606      	mov	r6, r0
 8000d28:	b950      	cbnz	r0, 8000d40 <__ssputs_r+0x5c>
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f8ca 3000 	str.w	r3, [sl]
 8000d34:	89a3      	ldrh	r3, [r4, #12]
 8000d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d3a:	81a3      	strh	r3, [r4, #12]
 8000d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d40:	464a      	mov	r2, r9
 8000d42:	6921      	ldr	r1, [r4, #16]
 8000d44:	f000 face 	bl	80012e4 <memcpy>
 8000d48:	89a3      	ldrh	r3, [r4, #12]
 8000d4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d52:	81a3      	strh	r3, [r4, #12]
 8000d54:	6126      	str	r6, [r4, #16]
 8000d56:	444e      	add	r6, r9
 8000d58:	6026      	str	r6, [r4, #0]
 8000d5a:	463e      	mov	r6, r7
 8000d5c:	6165      	str	r5, [r4, #20]
 8000d5e:	eba5 0509 	sub.w	r5, r5, r9
 8000d62:	60a5      	str	r5, [r4, #8]
 8000d64:	42be      	cmp	r6, r7
 8000d66:	d900      	bls.n	8000d6a <__ssputs_r+0x86>
 8000d68:	463e      	mov	r6, r7
 8000d6a:	4632      	mov	r2, r6
 8000d6c:	4641      	mov	r1, r8
 8000d6e:	6820      	ldr	r0, [r4, #0]
 8000d70:	f000 fac6 	bl	8001300 <memmove>
 8000d74:	68a3      	ldr	r3, [r4, #8]
 8000d76:	2000      	movs	r0, #0
 8000d78:	1b9b      	subs	r3, r3, r6
 8000d7a:	60a3      	str	r3, [r4, #8]
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	4433      	add	r3, r6
 8000d80:	6023      	str	r3, [r4, #0]
 8000d82:	e7db      	b.n	8000d3c <__ssputs_r+0x58>
 8000d84:	462a      	mov	r2, r5
 8000d86:	f000 fbb1 	bl	80014ec <_realloc_r>
 8000d8a:	4606      	mov	r6, r0
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d1e1      	bne.n	8000d54 <__ssputs_r+0x70>
 8000d90:	4650      	mov	r0, sl
 8000d92:	6921      	ldr	r1, [r4, #16]
 8000d94:	f000 face 	bl	8001334 <_free_r>
 8000d98:	e7c7      	b.n	8000d2a <__ssputs_r+0x46>
	...

08000d9c <_svfiprintf_r>:
 8000d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000da0:	4698      	mov	r8, r3
 8000da2:	898b      	ldrh	r3, [r1, #12]
 8000da4:	4607      	mov	r7, r0
 8000da6:	061b      	lsls	r3, r3, #24
 8000da8:	460d      	mov	r5, r1
 8000daa:	4614      	mov	r4, r2
 8000dac:	b09d      	sub	sp, #116	; 0x74
 8000dae:	d50e      	bpl.n	8000dce <_svfiprintf_r+0x32>
 8000db0:	690b      	ldr	r3, [r1, #16]
 8000db2:	b963      	cbnz	r3, 8000dce <_svfiprintf_r+0x32>
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	f000 fb25 	bl	8001404 <_malloc_r>
 8000dba:	6028      	str	r0, [r5, #0]
 8000dbc:	6128      	str	r0, [r5, #16]
 8000dbe:	b920      	cbnz	r0, 8000dca <_svfiprintf_r+0x2e>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	e0d1      	b.n	8000f6e <_svfiprintf_r+0x1d2>
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	616b      	str	r3, [r5, #20]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8000dd2:	2320      	movs	r3, #32
 8000dd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000dd8:	2330      	movs	r3, #48	; 0x30
 8000dda:	f04f 0901 	mov.w	r9, #1
 8000dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8000de2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000f88 <_svfiprintf_r+0x1ec>
 8000de6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000dea:	4623      	mov	r3, r4
 8000dec:	469a      	mov	sl, r3
 8000dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000df2:	b10a      	cbz	r2, 8000df8 <_svfiprintf_r+0x5c>
 8000df4:	2a25      	cmp	r2, #37	; 0x25
 8000df6:	d1f9      	bne.n	8000dec <_svfiprintf_r+0x50>
 8000df8:	ebba 0b04 	subs.w	fp, sl, r4
 8000dfc:	d00b      	beq.n	8000e16 <_svfiprintf_r+0x7a>
 8000dfe:	465b      	mov	r3, fp
 8000e00:	4622      	mov	r2, r4
 8000e02:	4629      	mov	r1, r5
 8000e04:	4638      	mov	r0, r7
 8000e06:	f7ff ff6d 	bl	8000ce4 <__ssputs_r>
 8000e0a:	3001      	adds	r0, #1
 8000e0c:	f000 80aa 	beq.w	8000f64 <_svfiprintf_r+0x1c8>
 8000e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e12:	445a      	add	r2, fp
 8000e14:	9209      	str	r2, [sp, #36]	; 0x24
 8000e16:	f89a 3000 	ldrb.w	r3, [sl]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 80a2 	beq.w	8000f64 <_svfiprintf_r+0x1c8>
 8000e20:	2300      	movs	r3, #0
 8000e22:	f04f 32ff 	mov.w	r2, #4294967295
 8000e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e2a:	f10a 0a01 	add.w	sl, sl, #1
 8000e2e:	9304      	str	r3, [sp, #16]
 8000e30:	9307      	str	r3, [sp, #28]
 8000e32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e36:	931a      	str	r3, [sp, #104]	; 0x68
 8000e38:	4654      	mov	r4, sl
 8000e3a:	2205      	movs	r2, #5
 8000e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e40:	4851      	ldr	r0, [pc, #324]	; (8000f88 <_svfiprintf_r+0x1ec>)
 8000e42:	f000 fa41 	bl	80012c8 <memchr>
 8000e46:	9a04      	ldr	r2, [sp, #16]
 8000e48:	b9d8      	cbnz	r0, 8000e82 <_svfiprintf_r+0xe6>
 8000e4a:	06d0      	lsls	r0, r2, #27
 8000e4c:	bf44      	itt	mi
 8000e4e:	2320      	movmi	r3, #32
 8000e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e54:	0711      	lsls	r1, r2, #28
 8000e56:	bf44      	itt	mi
 8000e58:	232b      	movmi	r3, #43	; 0x2b
 8000e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8000e62:	2b2a      	cmp	r3, #42	; 0x2a
 8000e64:	d015      	beq.n	8000e92 <_svfiprintf_r+0xf6>
 8000e66:	4654      	mov	r4, sl
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f04f 0c0a 	mov.w	ip, #10
 8000e6e:	9a07      	ldr	r2, [sp, #28]
 8000e70:	4621      	mov	r1, r4
 8000e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e76:	3b30      	subs	r3, #48	; 0x30
 8000e78:	2b09      	cmp	r3, #9
 8000e7a:	d94e      	bls.n	8000f1a <_svfiprintf_r+0x17e>
 8000e7c:	b1b0      	cbz	r0, 8000eac <_svfiprintf_r+0x110>
 8000e7e:	9207      	str	r2, [sp, #28]
 8000e80:	e014      	b.n	8000eac <_svfiprintf_r+0x110>
 8000e82:	eba0 0308 	sub.w	r3, r0, r8
 8000e86:	fa09 f303 	lsl.w	r3, r9, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	46a2      	mov	sl, r4
 8000e8e:	9304      	str	r3, [sp, #16]
 8000e90:	e7d2      	b.n	8000e38 <_svfiprintf_r+0x9c>
 8000e92:	9b03      	ldr	r3, [sp, #12]
 8000e94:	1d19      	adds	r1, r3, #4
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	9103      	str	r1, [sp, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bfbb      	ittet	lt
 8000e9e:	425b      	neglt	r3, r3
 8000ea0:	f042 0202 	orrlt.w	r2, r2, #2
 8000ea4:	9307      	strge	r3, [sp, #28]
 8000ea6:	9307      	strlt	r3, [sp, #28]
 8000ea8:	bfb8      	it	lt
 8000eaa:	9204      	strlt	r2, [sp, #16]
 8000eac:	7823      	ldrb	r3, [r4, #0]
 8000eae:	2b2e      	cmp	r3, #46	; 0x2e
 8000eb0:	d10c      	bne.n	8000ecc <_svfiprintf_r+0x130>
 8000eb2:	7863      	ldrb	r3, [r4, #1]
 8000eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8000eb6:	d135      	bne.n	8000f24 <_svfiprintf_r+0x188>
 8000eb8:	9b03      	ldr	r3, [sp, #12]
 8000eba:	3402      	adds	r4, #2
 8000ebc:	1d1a      	adds	r2, r3, #4
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	9203      	str	r2, [sp, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	bfb8      	it	lt
 8000ec6:	f04f 33ff 	movlt.w	r3, #4294967295
 8000eca:	9305      	str	r3, [sp, #20]
 8000ecc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8000f8c <_svfiprintf_r+0x1f0>
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	4650      	mov	r0, sl
 8000ed4:	7821      	ldrb	r1, [r4, #0]
 8000ed6:	f000 f9f7 	bl	80012c8 <memchr>
 8000eda:	b140      	cbz	r0, 8000eee <_svfiprintf_r+0x152>
 8000edc:	2340      	movs	r3, #64	; 0x40
 8000ede:	eba0 000a 	sub.w	r0, r0, sl
 8000ee2:	fa03 f000 	lsl.w	r0, r3, r0
 8000ee6:	9b04      	ldr	r3, [sp, #16]
 8000ee8:	3401      	adds	r4, #1
 8000eea:	4303      	orrs	r3, r0
 8000eec:	9304      	str	r3, [sp, #16]
 8000eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ef2:	2206      	movs	r2, #6
 8000ef4:	4826      	ldr	r0, [pc, #152]	; (8000f90 <_svfiprintf_r+0x1f4>)
 8000ef6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000efa:	f000 f9e5 	bl	80012c8 <memchr>
 8000efe:	2800      	cmp	r0, #0
 8000f00:	d038      	beq.n	8000f74 <_svfiprintf_r+0x1d8>
 8000f02:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <_svfiprintf_r+0x1f8>)
 8000f04:	bb1b      	cbnz	r3, 8000f4e <_svfiprintf_r+0x1b2>
 8000f06:	9b03      	ldr	r3, [sp, #12]
 8000f08:	3307      	adds	r3, #7
 8000f0a:	f023 0307 	bic.w	r3, r3, #7
 8000f0e:	3308      	adds	r3, #8
 8000f10:	9303      	str	r3, [sp, #12]
 8000f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f14:	4433      	add	r3, r6
 8000f16:	9309      	str	r3, [sp, #36]	; 0x24
 8000f18:	e767      	b.n	8000dea <_svfiprintf_r+0x4e>
 8000f1a:	460c      	mov	r4, r1
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f22:	e7a5      	b.n	8000e70 <_svfiprintf_r+0xd4>
 8000f24:	2300      	movs	r3, #0
 8000f26:	f04f 0c0a 	mov.w	ip, #10
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	3401      	adds	r4, #1
 8000f2e:	9305      	str	r3, [sp, #20]
 8000f30:	4620      	mov	r0, r4
 8000f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f36:	3a30      	subs	r2, #48	; 0x30
 8000f38:	2a09      	cmp	r2, #9
 8000f3a:	d903      	bls.n	8000f44 <_svfiprintf_r+0x1a8>
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0c5      	beq.n	8000ecc <_svfiprintf_r+0x130>
 8000f40:	9105      	str	r1, [sp, #20]
 8000f42:	e7c3      	b.n	8000ecc <_svfiprintf_r+0x130>
 8000f44:	4604      	mov	r4, r0
 8000f46:	2301      	movs	r3, #1
 8000f48:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f4c:	e7f0      	b.n	8000f30 <_svfiprintf_r+0x194>
 8000f4e:	ab03      	add	r3, sp, #12
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	462a      	mov	r2, r5
 8000f54:	4638      	mov	r0, r7
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <_svfiprintf_r+0x1fc>)
 8000f58:	a904      	add	r1, sp, #16
 8000f5a:	f3af 8000 	nop.w
 8000f5e:	1c42      	adds	r2, r0, #1
 8000f60:	4606      	mov	r6, r0
 8000f62:	d1d6      	bne.n	8000f12 <_svfiprintf_r+0x176>
 8000f64:	89ab      	ldrh	r3, [r5, #12]
 8000f66:	065b      	lsls	r3, r3, #25
 8000f68:	f53f af2c 	bmi.w	8000dc4 <_svfiprintf_r+0x28>
 8000f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f6e:	b01d      	add	sp, #116	; 0x74
 8000f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f74:	ab03      	add	r3, sp, #12
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	462a      	mov	r2, r5
 8000f7a:	4638      	mov	r0, r7
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <_svfiprintf_r+0x1fc>)
 8000f7e:	a904      	add	r1, sp, #16
 8000f80:	f000 f87c 	bl	800107c <_printf_i>
 8000f84:	e7eb      	b.n	8000f5e <_svfiprintf_r+0x1c2>
 8000f86:	bf00      	nop
 8000f88:	080015bb 	.word	0x080015bb
 8000f8c:	080015c1 	.word	0x080015c1
 8000f90:	080015c5 	.word	0x080015c5
 8000f94:	00000000 	.word	0x00000000
 8000f98:	08000ce5 	.word	0x08000ce5

08000f9c <_printf_common>:
 8000f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fa0:	4616      	mov	r6, r2
 8000fa2:	4699      	mov	r9, r3
 8000fa4:	688a      	ldr	r2, [r1, #8]
 8000fa6:	690b      	ldr	r3, [r1, #16]
 8000fa8:	4607      	mov	r7, r0
 8000faa:	4293      	cmp	r3, r2
 8000fac:	bfb8      	it	lt
 8000fae:	4613      	movlt	r3, r2
 8000fb0:	6033      	str	r3, [r6, #0]
 8000fb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000fb6:	460c      	mov	r4, r1
 8000fb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000fbc:	b10a      	cbz	r2, 8000fc2 <_printf_common+0x26>
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	6033      	str	r3, [r6, #0]
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	0699      	lsls	r1, r3, #26
 8000fc6:	bf42      	ittt	mi
 8000fc8:	6833      	ldrmi	r3, [r6, #0]
 8000fca:	3302      	addmi	r3, #2
 8000fcc:	6033      	strmi	r3, [r6, #0]
 8000fce:	6825      	ldr	r5, [r4, #0]
 8000fd0:	f015 0506 	ands.w	r5, r5, #6
 8000fd4:	d106      	bne.n	8000fe4 <_printf_common+0x48>
 8000fd6:	f104 0a19 	add.w	sl, r4, #25
 8000fda:	68e3      	ldr	r3, [r4, #12]
 8000fdc:	6832      	ldr	r2, [r6, #0]
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	42ab      	cmp	r3, r5
 8000fe2:	dc28      	bgt.n	8001036 <_printf_common+0x9a>
 8000fe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fe8:	1e13      	subs	r3, r2, #0
 8000fea:	6822      	ldr	r2, [r4, #0]
 8000fec:	bf18      	it	ne
 8000fee:	2301      	movne	r3, #1
 8000ff0:	0692      	lsls	r2, r2, #26
 8000ff2:	d42d      	bmi.n	8001050 <_printf_common+0xb4>
 8000ff4:	4649      	mov	r1, r9
 8000ff6:	4638      	mov	r0, r7
 8000ff8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ffc:	47c0      	blx	r8
 8000ffe:	3001      	adds	r0, #1
 8001000:	d020      	beq.n	8001044 <_printf_common+0xa8>
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	68e5      	ldr	r5, [r4, #12]
 8001006:	f003 0306 	and.w	r3, r3, #6
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf18      	it	ne
 800100e:	2500      	movne	r5, #0
 8001010:	6832      	ldr	r2, [r6, #0]
 8001012:	f04f 0600 	mov.w	r6, #0
 8001016:	68a3      	ldr	r3, [r4, #8]
 8001018:	bf08      	it	eq
 800101a:	1aad      	subeq	r5, r5, r2
 800101c:	6922      	ldr	r2, [r4, #16]
 800101e:	bf08      	it	eq
 8001020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001024:	4293      	cmp	r3, r2
 8001026:	bfc4      	itt	gt
 8001028:	1a9b      	subgt	r3, r3, r2
 800102a:	18ed      	addgt	r5, r5, r3
 800102c:	341a      	adds	r4, #26
 800102e:	42b5      	cmp	r5, r6
 8001030:	d11a      	bne.n	8001068 <_printf_common+0xcc>
 8001032:	2000      	movs	r0, #0
 8001034:	e008      	b.n	8001048 <_printf_common+0xac>
 8001036:	2301      	movs	r3, #1
 8001038:	4652      	mov	r2, sl
 800103a:	4649      	mov	r1, r9
 800103c:	4638      	mov	r0, r7
 800103e:	47c0      	blx	r8
 8001040:	3001      	adds	r0, #1
 8001042:	d103      	bne.n	800104c <_printf_common+0xb0>
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800104c:	3501      	adds	r5, #1
 800104e:	e7c4      	b.n	8000fda <_printf_common+0x3e>
 8001050:	2030      	movs	r0, #48	; 0x30
 8001052:	18e1      	adds	r1, r4, r3
 8001054:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800105e:	4422      	add	r2, r4
 8001060:	3302      	adds	r3, #2
 8001062:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001066:	e7c5      	b.n	8000ff4 <_printf_common+0x58>
 8001068:	2301      	movs	r3, #1
 800106a:	4622      	mov	r2, r4
 800106c:	4649      	mov	r1, r9
 800106e:	4638      	mov	r0, r7
 8001070:	47c0      	blx	r8
 8001072:	3001      	adds	r0, #1
 8001074:	d0e6      	beq.n	8001044 <_printf_common+0xa8>
 8001076:	3601      	adds	r6, #1
 8001078:	e7d9      	b.n	800102e <_printf_common+0x92>
	...

0800107c <_printf_i>:
 800107c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001080:	7e0f      	ldrb	r7, [r1, #24]
 8001082:	4691      	mov	r9, r2
 8001084:	2f78      	cmp	r7, #120	; 0x78
 8001086:	4680      	mov	r8, r0
 8001088:	460c      	mov	r4, r1
 800108a:	469a      	mov	sl, r3
 800108c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800108e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001092:	d807      	bhi.n	80010a4 <_printf_i+0x28>
 8001094:	2f62      	cmp	r7, #98	; 0x62
 8001096:	d80a      	bhi.n	80010ae <_printf_i+0x32>
 8001098:	2f00      	cmp	r7, #0
 800109a:	f000 80d9 	beq.w	8001250 <_printf_i+0x1d4>
 800109e:	2f58      	cmp	r7, #88	; 0x58
 80010a0:	f000 80a4 	beq.w	80011ec <_printf_i+0x170>
 80010a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80010ac:	e03a      	b.n	8001124 <_printf_i+0xa8>
 80010ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80010b2:	2b15      	cmp	r3, #21
 80010b4:	d8f6      	bhi.n	80010a4 <_printf_i+0x28>
 80010b6:	a101      	add	r1, pc, #4	; (adr r1, 80010bc <_printf_i+0x40>)
 80010b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80010bc:	08001115 	.word	0x08001115
 80010c0:	08001129 	.word	0x08001129
 80010c4:	080010a5 	.word	0x080010a5
 80010c8:	080010a5 	.word	0x080010a5
 80010cc:	080010a5 	.word	0x080010a5
 80010d0:	080010a5 	.word	0x080010a5
 80010d4:	08001129 	.word	0x08001129
 80010d8:	080010a5 	.word	0x080010a5
 80010dc:	080010a5 	.word	0x080010a5
 80010e0:	080010a5 	.word	0x080010a5
 80010e4:	080010a5 	.word	0x080010a5
 80010e8:	08001237 	.word	0x08001237
 80010ec:	08001159 	.word	0x08001159
 80010f0:	08001219 	.word	0x08001219
 80010f4:	080010a5 	.word	0x080010a5
 80010f8:	080010a5 	.word	0x080010a5
 80010fc:	08001259 	.word	0x08001259
 8001100:	080010a5 	.word	0x080010a5
 8001104:	08001159 	.word	0x08001159
 8001108:	080010a5 	.word	0x080010a5
 800110c:	080010a5 	.word	0x080010a5
 8001110:	08001221 	.word	0x08001221
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	1d1a      	adds	r2, r3, #4
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	602a      	str	r2, [r5, #0]
 800111c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001124:	2301      	movs	r3, #1
 8001126:	e0a4      	b.n	8001272 <_printf_i+0x1f6>
 8001128:	6820      	ldr	r0, [r4, #0]
 800112a:	6829      	ldr	r1, [r5, #0]
 800112c:	0606      	lsls	r6, r0, #24
 800112e:	f101 0304 	add.w	r3, r1, #4
 8001132:	d50a      	bpl.n	800114a <_printf_i+0xce>
 8001134:	680e      	ldr	r6, [r1, #0]
 8001136:	602b      	str	r3, [r5, #0]
 8001138:	2e00      	cmp	r6, #0
 800113a:	da03      	bge.n	8001144 <_printf_i+0xc8>
 800113c:	232d      	movs	r3, #45	; 0x2d
 800113e:	4276      	negs	r6, r6
 8001140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001144:	230a      	movs	r3, #10
 8001146:	485e      	ldr	r0, [pc, #376]	; (80012c0 <_printf_i+0x244>)
 8001148:	e019      	b.n	800117e <_printf_i+0x102>
 800114a:	680e      	ldr	r6, [r1, #0]
 800114c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001150:	602b      	str	r3, [r5, #0]
 8001152:	bf18      	it	ne
 8001154:	b236      	sxthne	r6, r6
 8001156:	e7ef      	b.n	8001138 <_printf_i+0xbc>
 8001158:	682b      	ldr	r3, [r5, #0]
 800115a:	6820      	ldr	r0, [r4, #0]
 800115c:	1d19      	adds	r1, r3, #4
 800115e:	6029      	str	r1, [r5, #0]
 8001160:	0601      	lsls	r1, r0, #24
 8001162:	d501      	bpl.n	8001168 <_printf_i+0xec>
 8001164:	681e      	ldr	r6, [r3, #0]
 8001166:	e002      	b.n	800116e <_printf_i+0xf2>
 8001168:	0646      	lsls	r6, r0, #25
 800116a:	d5fb      	bpl.n	8001164 <_printf_i+0xe8>
 800116c:	881e      	ldrh	r6, [r3, #0]
 800116e:	2f6f      	cmp	r7, #111	; 0x6f
 8001170:	bf0c      	ite	eq
 8001172:	2308      	moveq	r3, #8
 8001174:	230a      	movne	r3, #10
 8001176:	4852      	ldr	r0, [pc, #328]	; (80012c0 <_printf_i+0x244>)
 8001178:	2100      	movs	r1, #0
 800117a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800117e:	6865      	ldr	r5, [r4, #4]
 8001180:	2d00      	cmp	r5, #0
 8001182:	bfa8      	it	ge
 8001184:	6821      	ldrge	r1, [r4, #0]
 8001186:	60a5      	str	r5, [r4, #8]
 8001188:	bfa4      	itt	ge
 800118a:	f021 0104 	bicge.w	r1, r1, #4
 800118e:	6021      	strge	r1, [r4, #0]
 8001190:	b90e      	cbnz	r6, 8001196 <_printf_i+0x11a>
 8001192:	2d00      	cmp	r5, #0
 8001194:	d04d      	beq.n	8001232 <_printf_i+0x1b6>
 8001196:	4615      	mov	r5, r2
 8001198:	fbb6 f1f3 	udiv	r1, r6, r3
 800119c:	fb03 6711 	mls	r7, r3, r1, r6
 80011a0:	5dc7      	ldrb	r7, [r0, r7]
 80011a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80011a6:	4637      	mov	r7, r6
 80011a8:	42bb      	cmp	r3, r7
 80011aa:	460e      	mov	r6, r1
 80011ac:	d9f4      	bls.n	8001198 <_printf_i+0x11c>
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d10b      	bne.n	80011ca <_printf_i+0x14e>
 80011b2:	6823      	ldr	r3, [r4, #0]
 80011b4:	07de      	lsls	r6, r3, #31
 80011b6:	d508      	bpl.n	80011ca <_printf_i+0x14e>
 80011b8:	6923      	ldr	r3, [r4, #16]
 80011ba:	6861      	ldr	r1, [r4, #4]
 80011bc:	4299      	cmp	r1, r3
 80011be:	bfde      	ittt	le
 80011c0:	2330      	movle	r3, #48	; 0x30
 80011c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80011c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80011ca:	1b52      	subs	r2, r2, r5
 80011cc:	6122      	str	r2, [r4, #16]
 80011ce:	464b      	mov	r3, r9
 80011d0:	4621      	mov	r1, r4
 80011d2:	4640      	mov	r0, r8
 80011d4:	f8cd a000 	str.w	sl, [sp]
 80011d8:	aa03      	add	r2, sp, #12
 80011da:	f7ff fedf 	bl	8000f9c <_printf_common>
 80011de:	3001      	adds	r0, #1
 80011e0:	d14c      	bne.n	800127c <_printf_i+0x200>
 80011e2:	f04f 30ff 	mov.w	r0, #4294967295
 80011e6:	b004      	add	sp, #16
 80011e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ec:	4834      	ldr	r0, [pc, #208]	; (80012c0 <_printf_i+0x244>)
 80011ee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80011f2:	6829      	ldr	r1, [r5, #0]
 80011f4:	6823      	ldr	r3, [r4, #0]
 80011f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80011fa:	6029      	str	r1, [r5, #0]
 80011fc:	061d      	lsls	r5, r3, #24
 80011fe:	d514      	bpl.n	800122a <_printf_i+0x1ae>
 8001200:	07df      	lsls	r7, r3, #31
 8001202:	bf44      	itt	mi
 8001204:	f043 0320 	orrmi.w	r3, r3, #32
 8001208:	6023      	strmi	r3, [r4, #0]
 800120a:	b91e      	cbnz	r6, 8001214 <_printf_i+0x198>
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	f023 0320 	bic.w	r3, r3, #32
 8001212:	6023      	str	r3, [r4, #0]
 8001214:	2310      	movs	r3, #16
 8001216:	e7af      	b.n	8001178 <_printf_i+0xfc>
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	f043 0320 	orr.w	r3, r3, #32
 800121e:	6023      	str	r3, [r4, #0]
 8001220:	2378      	movs	r3, #120	; 0x78
 8001222:	4828      	ldr	r0, [pc, #160]	; (80012c4 <_printf_i+0x248>)
 8001224:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001228:	e7e3      	b.n	80011f2 <_printf_i+0x176>
 800122a:	0659      	lsls	r1, r3, #25
 800122c:	bf48      	it	mi
 800122e:	b2b6      	uxthmi	r6, r6
 8001230:	e7e6      	b.n	8001200 <_printf_i+0x184>
 8001232:	4615      	mov	r5, r2
 8001234:	e7bb      	b.n	80011ae <_printf_i+0x132>
 8001236:	682b      	ldr	r3, [r5, #0]
 8001238:	6826      	ldr	r6, [r4, #0]
 800123a:	1d18      	adds	r0, r3, #4
 800123c:	6961      	ldr	r1, [r4, #20]
 800123e:	6028      	str	r0, [r5, #0]
 8001240:	0635      	lsls	r5, r6, #24
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	d501      	bpl.n	800124a <_printf_i+0x1ce>
 8001246:	6019      	str	r1, [r3, #0]
 8001248:	e002      	b.n	8001250 <_printf_i+0x1d4>
 800124a:	0670      	lsls	r0, r6, #25
 800124c:	d5fb      	bpl.n	8001246 <_printf_i+0x1ca>
 800124e:	8019      	strh	r1, [r3, #0]
 8001250:	2300      	movs	r3, #0
 8001252:	4615      	mov	r5, r2
 8001254:	6123      	str	r3, [r4, #16]
 8001256:	e7ba      	b.n	80011ce <_printf_i+0x152>
 8001258:	682b      	ldr	r3, [r5, #0]
 800125a:	2100      	movs	r1, #0
 800125c:	1d1a      	adds	r2, r3, #4
 800125e:	602a      	str	r2, [r5, #0]
 8001260:	681d      	ldr	r5, [r3, #0]
 8001262:	6862      	ldr	r2, [r4, #4]
 8001264:	4628      	mov	r0, r5
 8001266:	f000 f82f 	bl	80012c8 <memchr>
 800126a:	b108      	cbz	r0, 8001270 <_printf_i+0x1f4>
 800126c:	1b40      	subs	r0, r0, r5
 800126e:	6060      	str	r0, [r4, #4]
 8001270:	6863      	ldr	r3, [r4, #4]
 8001272:	6123      	str	r3, [r4, #16]
 8001274:	2300      	movs	r3, #0
 8001276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800127a:	e7a8      	b.n	80011ce <_printf_i+0x152>
 800127c:	462a      	mov	r2, r5
 800127e:	4649      	mov	r1, r9
 8001280:	4640      	mov	r0, r8
 8001282:	6923      	ldr	r3, [r4, #16]
 8001284:	47d0      	blx	sl
 8001286:	3001      	adds	r0, #1
 8001288:	d0ab      	beq.n	80011e2 <_printf_i+0x166>
 800128a:	6823      	ldr	r3, [r4, #0]
 800128c:	079b      	lsls	r3, r3, #30
 800128e:	d413      	bmi.n	80012b8 <_printf_i+0x23c>
 8001290:	68e0      	ldr	r0, [r4, #12]
 8001292:	9b03      	ldr	r3, [sp, #12]
 8001294:	4298      	cmp	r0, r3
 8001296:	bfb8      	it	lt
 8001298:	4618      	movlt	r0, r3
 800129a:	e7a4      	b.n	80011e6 <_printf_i+0x16a>
 800129c:	2301      	movs	r3, #1
 800129e:	4632      	mov	r2, r6
 80012a0:	4649      	mov	r1, r9
 80012a2:	4640      	mov	r0, r8
 80012a4:	47d0      	blx	sl
 80012a6:	3001      	adds	r0, #1
 80012a8:	d09b      	beq.n	80011e2 <_printf_i+0x166>
 80012aa:	3501      	adds	r5, #1
 80012ac:	68e3      	ldr	r3, [r4, #12]
 80012ae:	9903      	ldr	r1, [sp, #12]
 80012b0:	1a5b      	subs	r3, r3, r1
 80012b2:	42ab      	cmp	r3, r5
 80012b4:	dcf2      	bgt.n	800129c <_printf_i+0x220>
 80012b6:	e7eb      	b.n	8001290 <_printf_i+0x214>
 80012b8:	2500      	movs	r5, #0
 80012ba:	f104 0619 	add.w	r6, r4, #25
 80012be:	e7f5      	b.n	80012ac <_printf_i+0x230>
 80012c0:	080015cc 	.word	0x080015cc
 80012c4:	080015dd 	.word	0x080015dd

080012c8 <memchr>:
 80012c8:	4603      	mov	r3, r0
 80012ca:	b510      	push	{r4, lr}
 80012cc:	b2c9      	uxtb	r1, r1
 80012ce:	4402      	add	r2, r0
 80012d0:	4293      	cmp	r3, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	d101      	bne.n	80012da <memchr+0x12>
 80012d6:	2000      	movs	r0, #0
 80012d8:	e003      	b.n	80012e2 <memchr+0x1a>
 80012da:	7804      	ldrb	r4, [r0, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	428c      	cmp	r4, r1
 80012e0:	d1f6      	bne.n	80012d0 <memchr+0x8>
 80012e2:	bd10      	pop	{r4, pc}

080012e4 <memcpy>:
 80012e4:	440a      	add	r2, r1
 80012e6:	4291      	cmp	r1, r2
 80012e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80012ec:	d100      	bne.n	80012f0 <memcpy+0xc>
 80012ee:	4770      	bx	lr
 80012f0:	b510      	push	{r4, lr}
 80012f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80012f6:	4291      	cmp	r1, r2
 80012f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80012fc:	d1f9      	bne.n	80012f2 <memcpy+0xe>
 80012fe:	bd10      	pop	{r4, pc}

08001300 <memmove>:
 8001300:	4288      	cmp	r0, r1
 8001302:	b510      	push	{r4, lr}
 8001304:	eb01 0402 	add.w	r4, r1, r2
 8001308:	d902      	bls.n	8001310 <memmove+0x10>
 800130a:	4284      	cmp	r4, r0
 800130c:	4623      	mov	r3, r4
 800130e:	d807      	bhi.n	8001320 <memmove+0x20>
 8001310:	1e43      	subs	r3, r0, #1
 8001312:	42a1      	cmp	r1, r4
 8001314:	d008      	beq.n	8001328 <memmove+0x28>
 8001316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800131a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800131e:	e7f8      	b.n	8001312 <memmove+0x12>
 8001320:	4601      	mov	r1, r0
 8001322:	4402      	add	r2, r0
 8001324:	428a      	cmp	r2, r1
 8001326:	d100      	bne.n	800132a <memmove+0x2a>
 8001328:	bd10      	pop	{r4, pc}
 800132a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800132e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001332:	e7f7      	b.n	8001324 <memmove+0x24>

08001334 <_free_r>:
 8001334:	b538      	push	{r3, r4, r5, lr}
 8001336:	4605      	mov	r5, r0
 8001338:	2900      	cmp	r1, #0
 800133a:	d040      	beq.n	80013be <_free_r+0x8a>
 800133c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001340:	1f0c      	subs	r4, r1, #4
 8001342:	2b00      	cmp	r3, #0
 8001344:	bfb8      	it	lt
 8001346:	18e4      	addlt	r4, r4, r3
 8001348:	f000 f910 	bl	800156c <__malloc_lock>
 800134c:	4a1c      	ldr	r2, [pc, #112]	; (80013c0 <_free_r+0x8c>)
 800134e:	6813      	ldr	r3, [r2, #0]
 8001350:	b933      	cbnz	r3, 8001360 <_free_r+0x2c>
 8001352:	6063      	str	r3, [r4, #4]
 8001354:	6014      	str	r4, [r2, #0]
 8001356:	4628      	mov	r0, r5
 8001358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800135c:	f000 b90c 	b.w	8001578 <__malloc_unlock>
 8001360:	42a3      	cmp	r3, r4
 8001362:	d908      	bls.n	8001376 <_free_r+0x42>
 8001364:	6820      	ldr	r0, [r4, #0]
 8001366:	1821      	adds	r1, r4, r0
 8001368:	428b      	cmp	r3, r1
 800136a:	bf01      	itttt	eq
 800136c:	6819      	ldreq	r1, [r3, #0]
 800136e:	685b      	ldreq	r3, [r3, #4]
 8001370:	1809      	addeq	r1, r1, r0
 8001372:	6021      	streq	r1, [r4, #0]
 8001374:	e7ed      	b.n	8001352 <_free_r+0x1e>
 8001376:	461a      	mov	r2, r3
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	b10b      	cbz	r3, 8001380 <_free_r+0x4c>
 800137c:	42a3      	cmp	r3, r4
 800137e:	d9fa      	bls.n	8001376 <_free_r+0x42>
 8001380:	6811      	ldr	r1, [r2, #0]
 8001382:	1850      	adds	r0, r2, r1
 8001384:	42a0      	cmp	r0, r4
 8001386:	d10b      	bne.n	80013a0 <_free_r+0x6c>
 8001388:	6820      	ldr	r0, [r4, #0]
 800138a:	4401      	add	r1, r0
 800138c:	1850      	adds	r0, r2, r1
 800138e:	4283      	cmp	r3, r0
 8001390:	6011      	str	r1, [r2, #0]
 8001392:	d1e0      	bne.n	8001356 <_free_r+0x22>
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4401      	add	r1, r0
 800139a:	6011      	str	r1, [r2, #0]
 800139c:	6053      	str	r3, [r2, #4]
 800139e:	e7da      	b.n	8001356 <_free_r+0x22>
 80013a0:	d902      	bls.n	80013a8 <_free_r+0x74>
 80013a2:	230c      	movs	r3, #12
 80013a4:	602b      	str	r3, [r5, #0]
 80013a6:	e7d6      	b.n	8001356 <_free_r+0x22>
 80013a8:	6820      	ldr	r0, [r4, #0]
 80013aa:	1821      	adds	r1, r4, r0
 80013ac:	428b      	cmp	r3, r1
 80013ae:	bf01      	itttt	eq
 80013b0:	6819      	ldreq	r1, [r3, #0]
 80013b2:	685b      	ldreq	r3, [r3, #4]
 80013b4:	1809      	addeq	r1, r1, r0
 80013b6:	6021      	streq	r1, [r4, #0]
 80013b8:	6063      	str	r3, [r4, #4]
 80013ba:	6054      	str	r4, [r2, #4]
 80013bc:	e7cb      	b.n	8001356 <_free_r+0x22>
 80013be:	bd38      	pop	{r3, r4, r5, pc}
 80013c0:	200000f0 	.word	0x200000f0

080013c4 <sbrk_aligned>:
 80013c4:	b570      	push	{r4, r5, r6, lr}
 80013c6:	4e0e      	ldr	r6, [pc, #56]	; (8001400 <sbrk_aligned+0x3c>)
 80013c8:	460c      	mov	r4, r1
 80013ca:	6831      	ldr	r1, [r6, #0]
 80013cc:	4605      	mov	r5, r0
 80013ce:	b911      	cbnz	r1, 80013d6 <sbrk_aligned+0x12>
 80013d0:	f000 f8bc 	bl	800154c <_sbrk_r>
 80013d4:	6030      	str	r0, [r6, #0]
 80013d6:	4621      	mov	r1, r4
 80013d8:	4628      	mov	r0, r5
 80013da:	f000 f8b7 	bl	800154c <_sbrk_r>
 80013de:	1c43      	adds	r3, r0, #1
 80013e0:	d00a      	beq.n	80013f8 <sbrk_aligned+0x34>
 80013e2:	1cc4      	adds	r4, r0, #3
 80013e4:	f024 0403 	bic.w	r4, r4, #3
 80013e8:	42a0      	cmp	r0, r4
 80013ea:	d007      	beq.n	80013fc <sbrk_aligned+0x38>
 80013ec:	1a21      	subs	r1, r4, r0
 80013ee:	4628      	mov	r0, r5
 80013f0:	f000 f8ac 	bl	800154c <_sbrk_r>
 80013f4:	3001      	adds	r0, #1
 80013f6:	d101      	bne.n	80013fc <sbrk_aligned+0x38>
 80013f8:	f04f 34ff 	mov.w	r4, #4294967295
 80013fc:	4620      	mov	r0, r4
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
 8001400:	200000f4 	.word	0x200000f4

08001404 <_malloc_r>:
 8001404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001408:	1ccd      	adds	r5, r1, #3
 800140a:	f025 0503 	bic.w	r5, r5, #3
 800140e:	3508      	adds	r5, #8
 8001410:	2d0c      	cmp	r5, #12
 8001412:	bf38      	it	cc
 8001414:	250c      	movcc	r5, #12
 8001416:	2d00      	cmp	r5, #0
 8001418:	4607      	mov	r7, r0
 800141a:	db01      	blt.n	8001420 <_malloc_r+0x1c>
 800141c:	42a9      	cmp	r1, r5
 800141e:	d905      	bls.n	800142c <_malloc_r+0x28>
 8001420:	230c      	movs	r3, #12
 8001422:	2600      	movs	r6, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4630      	mov	r0, r6
 8001428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800142c:	4e2e      	ldr	r6, [pc, #184]	; (80014e8 <_malloc_r+0xe4>)
 800142e:	f000 f89d 	bl	800156c <__malloc_lock>
 8001432:	6833      	ldr	r3, [r6, #0]
 8001434:	461c      	mov	r4, r3
 8001436:	bb34      	cbnz	r4, 8001486 <_malloc_r+0x82>
 8001438:	4629      	mov	r1, r5
 800143a:	4638      	mov	r0, r7
 800143c:	f7ff ffc2 	bl	80013c4 <sbrk_aligned>
 8001440:	1c43      	adds	r3, r0, #1
 8001442:	4604      	mov	r4, r0
 8001444:	d14d      	bne.n	80014e2 <_malloc_r+0xde>
 8001446:	6834      	ldr	r4, [r6, #0]
 8001448:	4626      	mov	r6, r4
 800144a:	2e00      	cmp	r6, #0
 800144c:	d140      	bne.n	80014d0 <_malloc_r+0xcc>
 800144e:	6823      	ldr	r3, [r4, #0]
 8001450:	4631      	mov	r1, r6
 8001452:	4638      	mov	r0, r7
 8001454:	eb04 0803 	add.w	r8, r4, r3
 8001458:	f000 f878 	bl	800154c <_sbrk_r>
 800145c:	4580      	cmp	r8, r0
 800145e:	d13a      	bne.n	80014d6 <_malloc_r+0xd2>
 8001460:	6821      	ldr	r1, [r4, #0]
 8001462:	3503      	adds	r5, #3
 8001464:	1a6d      	subs	r5, r5, r1
 8001466:	f025 0503 	bic.w	r5, r5, #3
 800146a:	3508      	adds	r5, #8
 800146c:	2d0c      	cmp	r5, #12
 800146e:	bf38      	it	cc
 8001470:	250c      	movcc	r5, #12
 8001472:	4638      	mov	r0, r7
 8001474:	4629      	mov	r1, r5
 8001476:	f7ff ffa5 	bl	80013c4 <sbrk_aligned>
 800147a:	3001      	adds	r0, #1
 800147c:	d02b      	beq.n	80014d6 <_malloc_r+0xd2>
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	442b      	add	r3, r5
 8001482:	6023      	str	r3, [r4, #0]
 8001484:	e00e      	b.n	80014a4 <_malloc_r+0xa0>
 8001486:	6822      	ldr	r2, [r4, #0]
 8001488:	1b52      	subs	r2, r2, r5
 800148a:	d41e      	bmi.n	80014ca <_malloc_r+0xc6>
 800148c:	2a0b      	cmp	r2, #11
 800148e:	d916      	bls.n	80014be <_malloc_r+0xba>
 8001490:	1961      	adds	r1, r4, r5
 8001492:	42a3      	cmp	r3, r4
 8001494:	6025      	str	r5, [r4, #0]
 8001496:	bf18      	it	ne
 8001498:	6059      	strne	r1, [r3, #4]
 800149a:	6863      	ldr	r3, [r4, #4]
 800149c:	bf08      	it	eq
 800149e:	6031      	streq	r1, [r6, #0]
 80014a0:	5162      	str	r2, [r4, r5]
 80014a2:	604b      	str	r3, [r1, #4]
 80014a4:	4638      	mov	r0, r7
 80014a6:	f104 060b 	add.w	r6, r4, #11
 80014aa:	f000 f865 	bl	8001578 <__malloc_unlock>
 80014ae:	f026 0607 	bic.w	r6, r6, #7
 80014b2:	1d23      	adds	r3, r4, #4
 80014b4:	1af2      	subs	r2, r6, r3
 80014b6:	d0b6      	beq.n	8001426 <_malloc_r+0x22>
 80014b8:	1b9b      	subs	r3, r3, r6
 80014ba:	50a3      	str	r3, [r4, r2]
 80014bc:	e7b3      	b.n	8001426 <_malloc_r+0x22>
 80014be:	6862      	ldr	r2, [r4, #4]
 80014c0:	42a3      	cmp	r3, r4
 80014c2:	bf0c      	ite	eq
 80014c4:	6032      	streq	r2, [r6, #0]
 80014c6:	605a      	strne	r2, [r3, #4]
 80014c8:	e7ec      	b.n	80014a4 <_malloc_r+0xa0>
 80014ca:	4623      	mov	r3, r4
 80014cc:	6864      	ldr	r4, [r4, #4]
 80014ce:	e7b2      	b.n	8001436 <_malloc_r+0x32>
 80014d0:	4634      	mov	r4, r6
 80014d2:	6876      	ldr	r6, [r6, #4]
 80014d4:	e7b9      	b.n	800144a <_malloc_r+0x46>
 80014d6:	230c      	movs	r3, #12
 80014d8:	4638      	mov	r0, r7
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	f000 f84c 	bl	8001578 <__malloc_unlock>
 80014e0:	e7a1      	b.n	8001426 <_malloc_r+0x22>
 80014e2:	6025      	str	r5, [r4, #0]
 80014e4:	e7de      	b.n	80014a4 <_malloc_r+0xa0>
 80014e6:	bf00      	nop
 80014e8:	200000f0 	.word	0x200000f0

080014ec <_realloc_r>:
 80014ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014f0:	4680      	mov	r8, r0
 80014f2:	4614      	mov	r4, r2
 80014f4:	460e      	mov	r6, r1
 80014f6:	b921      	cbnz	r1, 8001502 <_realloc_r+0x16>
 80014f8:	4611      	mov	r1, r2
 80014fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80014fe:	f7ff bf81 	b.w	8001404 <_malloc_r>
 8001502:	b92a      	cbnz	r2, 8001510 <_realloc_r+0x24>
 8001504:	f7ff ff16 	bl	8001334 <_free_r>
 8001508:	4625      	mov	r5, r4
 800150a:	4628      	mov	r0, r5
 800150c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001510:	f000 f838 	bl	8001584 <_malloc_usable_size_r>
 8001514:	4284      	cmp	r4, r0
 8001516:	4607      	mov	r7, r0
 8001518:	d802      	bhi.n	8001520 <_realloc_r+0x34>
 800151a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800151e:	d812      	bhi.n	8001546 <_realloc_r+0x5a>
 8001520:	4621      	mov	r1, r4
 8001522:	4640      	mov	r0, r8
 8001524:	f7ff ff6e 	bl	8001404 <_malloc_r>
 8001528:	4605      	mov	r5, r0
 800152a:	2800      	cmp	r0, #0
 800152c:	d0ed      	beq.n	800150a <_realloc_r+0x1e>
 800152e:	42bc      	cmp	r4, r7
 8001530:	4622      	mov	r2, r4
 8001532:	4631      	mov	r1, r6
 8001534:	bf28      	it	cs
 8001536:	463a      	movcs	r2, r7
 8001538:	f7ff fed4 	bl	80012e4 <memcpy>
 800153c:	4631      	mov	r1, r6
 800153e:	4640      	mov	r0, r8
 8001540:	f7ff fef8 	bl	8001334 <_free_r>
 8001544:	e7e1      	b.n	800150a <_realloc_r+0x1e>
 8001546:	4635      	mov	r5, r6
 8001548:	e7df      	b.n	800150a <_realloc_r+0x1e>
	...

0800154c <_sbrk_r>:
 800154c:	b538      	push	{r3, r4, r5, lr}
 800154e:	2300      	movs	r3, #0
 8001550:	4d05      	ldr	r5, [pc, #20]	; (8001568 <_sbrk_r+0x1c>)
 8001552:	4604      	mov	r4, r0
 8001554:	4608      	mov	r0, r1
 8001556:	602b      	str	r3, [r5, #0]
 8001558:	f7fe ff9c 	bl	8000494 <_sbrk>
 800155c:	1c43      	adds	r3, r0, #1
 800155e:	d102      	bne.n	8001566 <_sbrk_r+0x1a>
 8001560:	682b      	ldr	r3, [r5, #0]
 8001562:	b103      	cbz	r3, 8001566 <_sbrk_r+0x1a>
 8001564:	6023      	str	r3, [r4, #0]
 8001566:	bd38      	pop	{r3, r4, r5, pc}
 8001568:	200000f8 	.word	0x200000f8

0800156c <__malloc_lock>:
 800156c:	4801      	ldr	r0, [pc, #4]	; (8001574 <__malloc_lock+0x8>)
 800156e:	f000 b811 	b.w	8001594 <__retarget_lock_acquire_recursive>
 8001572:	bf00      	nop
 8001574:	200000fc 	.word	0x200000fc

08001578 <__malloc_unlock>:
 8001578:	4801      	ldr	r0, [pc, #4]	; (8001580 <__malloc_unlock+0x8>)
 800157a:	f000 b80c 	b.w	8001596 <__retarget_lock_release_recursive>
 800157e:	bf00      	nop
 8001580:	200000fc 	.word	0x200000fc

08001584 <_malloc_usable_size_r>:
 8001584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001588:	1f18      	subs	r0, r3, #4
 800158a:	2b00      	cmp	r3, #0
 800158c:	bfbc      	itt	lt
 800158e:	580b      	ldrlt	r3, [r1, r0]
 8001590:	18c0      	addlt	r0, r0, r3
 8001592:	4770      	bx	lr

08001594 <__retarget_lock_acquire_recursive>:
 8001594:	4770      	bx	lr

08001596 <__retarget_lock_release_recursive>:
 8001596:	4770      	bx	lr

08001598 <_init>:
 8001598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800159a:	bf00      	nop
 800159c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800159e:	bc08      	pop	{r3}
 80015a0:	469e      	mov	lr, r3
 80015a2:	4770      	bx	lr

080015a4 <_fini>:
 80015a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015a6:	bf00      	nop
 80015a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015aa:	bc08      	pop	{r3}
 80015ac:	469e      	mov	lr, r3
 80015ae:	4770      	bx	lr
