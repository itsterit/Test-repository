
Metal_Detector_F103_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001558  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08001688  08001688  00011688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001728  08001728  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001728  08001728  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001728  08001728  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001728  08001728  00011728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800172c  0800172c  0001172c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000068  08001798  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08001798  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002da6  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000eca  00000000  00000000  00022e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000288  00000000  00000000  00023d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e0  00000000  00000000  00023f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012d30  00000000  00000000  00024170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000048d7  00000000  00000000  00036ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a05d  00000000  00000000  0003b777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000957d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ba0  00000000  00000000  00095824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	08001670 	.word	0x08001670

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	08001670 	.word	0x08001670

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <_Z16ADC1_IN9_PB1_iniv>:
#include <string.h>
#include "stm32f1xx.h"
#include "main.h"

void ADC1_IN9_PB1_ini()
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
  // Input mode
  GPIOB->CRL &= ~GPIO_CRL_MODE1;
 8000186:	4b3d      	ldr	r3, [pc, #244]	; (800027c <_Z16ADC1_IN9_PB1_iniv+0xfc>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4a3c      	ldr	r2, [pc, #240]	; (800027c <_Z16ADC1_IN9_PB1_iniv+0xfc>)
 800018c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000190:	6013      	str	r3, [r2, #0]
  GPIOB->CRL |= (0b00 << GPIO_CRL_MODE1_Pos);
 8000192:	4b3a      	ldr	r3, [pc, #232]	; (800027c <_Z16ADC1_IN9_PB1_iniv+0xfc>)
 8000194:	4a39      	ldr	r2, [pc, #228]	; (800027c <_Z16ADC1_IN9_PB1_iniv+0xfc>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	6013      	str	r3, [r2, #0]
  // In input mode - Analog mode
  GPIOB->CRL &= ~GPIO_CRL_CNF1;
 800019a:	4b38      	ldr	r3, [pc, #224]	; (800027c <_Z16ADC1_IN9_PB1_iniv+0xfc>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a37      	ldr	r2, [pc, #220]	; (800027c <_Z16ADC1_IN9_PB1_iniv+0xfc>)
 80001a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001a4:	6013      	str	r3, [r2, #0]
  GPIOB->CRL |= (0b00 << GPIO_CRL_CNF1_Pos);
 80001a6:	4b35      	ldr	r3, [pc, #212]	; (800027c <_Z16ADC1_IN9_PB1_iniv+0xfc>)
 80001a8:	4a34      	ldr	r2, [pc, #208]	; (800027c <_Z16ADC1_IN9_PB1_iniv+0xfc>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	6013      	str	r3, [r2, #0]
  // Тактирование порта B
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80001ae:	4b34      	ldr	r3, [pc, #208]	; (8000280 <_Z16ADC1_IN9_PB1_iniv+0x100>)
 80001b0:	699b      	ldr	r3, [r3, #24]
 80001b2:	4a33      	ldr	r2, [pc, #204]	; (8000280 <_Z16ADC1_IN9_PB1_iniv+0x100>)
 80001b4:	f043 0308 	orr.w	r3, r3, #8
 80001b8:	6193      	str	r3, [r2, #24]

  // Тактирование АЦП 1
  RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80001ba:	4b31      	ldr	r3, [pc, #196]	; (8000280 <_Z16ADC1_IN9_PB1_iniv+0x100>)
 80001bc:	699b      	ldr	r3, [r3, #24]
 80001be:	4a30      	ldr	r2, [pc, #192]	; (8000280 <_Z16ADC1_IN9_PB1_iniv+0x100>)
 80001c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001c4:	6193      	str	r3, [r2, #24]
  ADC1->CR2 |= ADC_CR2_ADON;
 80001c6:	4b2f      	ldr	r3, [pc, #188]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 80001c8:	689b      	ldr	r3, [r3, #8]
 80001ca:	4a2e      	ldr	r2, [pc, #184]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 80001cc:	f043 0301 	orr.w	r3, r3, #1
 80001d0:	6093      	str	r3, [r2, #8]

  ADC1->SR = 0x00;
 80001d2:	4b2c      	ldr	r3, [pc, #176]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]

  // 1.5 cycles
  ADC1->SMPR2 &= ~ADC_SMPR2_SMP9;
 80001d8:	4b2a      	ldr	r3, [pc, #168]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 80001da:	691b      	ldr	r3, [r3, #16]
 80001dc:	4a29      	ldr	r2, [pc, #164]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 80001de:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80001e2:	6113      	str	r3, [r2, #16]
  ADC1->SMPR2 |= (0b000 << ADC_SMPR2_SMP9_Pos);
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 80001e6:	4a27      	ldr	r2, [pc, #156]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 80001e8:	691b      	ldr	r3, [r3, #16]
 80001ea:	6113      	str	r3, [r2, #16]

  // 1 conversion
  ADC1->SQR1 &= ~ADC_SQR1_L;
 80001ec:	4b25      	ldr	r3, [pc, #148]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 80001ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001f0:	4a24      	ldr	r2, [pc, #144]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 80001f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001f6:	62d3      	str	r3, [r2, #44]	; 0x2c
  ADC1->SQR1 |= (0b0000 << ADC_SQR1_L_Pos);
 80001f8:	4b22      	ldr	r3, [pc, #136]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 80001fa:	4a22      	ldr	r2, [pc, #136]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 80001fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001fe:	62d3      	str	r3, [r2, #44]	; 0x2c

  // 9й кАНАЛ
  ADC1->SQR3 = 0x00;
 8000200:	4b20      	ldr	r3, [pc, #128]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 8000202:	2200      	movs	r2, #0
 8000204:	635a      	str	r2, [r3, #52]	; 0x34
  ADC1->SQR3 |= (0b1001 << ADC_SQR3_SQ1_Pos);
 8000206:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 8000208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800020a:	4a1e      	ldr	r2, [pc, #120]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 800020c:	f043 0309 	orr.w	r3, r3, #9
 8000210:	6353      	str	r3, [r2, #52]	; 0x34

  ADC1->SQR2 = 0x00;
 8000212:	4b1c      	ldr	r3, [pc, #112]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 8000214:	2200      	movs	r2, #0
 8000216:	631a      	str	r2, [r3, #48]	; 0x30

  ADC1->SQR1 = 0x00;
 8000218:	4b1a      	ldr	r3, [pc, #104]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 800021a:	2200      	movs	r2, #0
 800021c:	62da      	str	r2, [r3, #44]	; 0x2c

  for (int StartUpCounter = 0; StartUpCounter <= 0x1000; StartUpCounter++)
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000228:	dc03      	bgt.n	8000232 <_Z16ADC1_IN9_PB1_iniv+0xb2>
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	3301      	adds	r3, #1
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	e7f7      	b.n	8000222 <_Z16ADC1_IN9_PB1_iniv+0xa2>
  {
  }                         // Небольшая задержка, что бы изменения вступили в силу
  ADC1->CR2 |= ADC_CR2_CAL; // запуск калибровки
 8000232:	4b14      	ldr	r3, [pc, #80]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	4a13      	ldr	r2, [pc, #76]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 8000238:	f043 0304 	orr.w	r3, r3, #4
 800023c:	6093      	str	r3, [r2, #8]
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0); // ожидание окончания калибровки
 800023e:	4b11      	ldr	r3, [pc, #68]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 8000240:	689b      	ldr	r3, [r3, #8]
 8000242:	f003 0304 	and.w	r3, r3, #4
 8000246:	2b00      	cmp	r3, #0
 8000248:	bf14      	ite	ne
 800024a:	2301      	movne	r3, #1
 800024c:	2300      	moveq	r3, #0
 800024e:	b2db      	uxtb	r3, r3
 8000250:	2b00      	cmp	r3, #0
 8000252:	d000      	beq.n	8000256 <_Z16ADC1_IN9_PB1_iniv+0xd6>
 8000254:	e7f3      	b.n	800023e <_Z16ADC1_IN9_PB1_iniv+0xbe>

  // SWSTART
  ADC1->CR2 |= 
 8000256:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 8000258:	689b      	ldr	r3, [r3, #8]
 800025a:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 800025c:	f443 13f0 	orr.w	r3, r3, #1966080	; 0x1e0000
 8000260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000264:	6093      	str	r3, [r2, #8]
    | ADC_CR2_EXTTRIG 
    | ADC_CR2_EXTSEL 
    | (0b111 << ADC_CR2_EXTSEL_Pos);

  // Врубить прерывание по преобразованию
  ADC1->CR1 |= ADC_CR1_EOCIE;
 8000266:	4b07      	ldr	r3, [pc, #28]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	4a06      	ldr	r2, [pc, #24]	; (8000284 <_Z16ADC1_IN9_PB1_iniv+0x104>)
 800026c:	f043 0320 	orr.w	r3, r3, #32
 8000270:	6053      	str	r3, [r2, #4]
  //NVIC_EnableIRQ(ADC1_2_IRQn);
}
 8000272:	bf00      	nop
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr
 800027c:	40010c00 	.word	0x40010c00
 8000280:	40021000 	.word	0x40021000
 8000284:	40012400 	.word	0x40012400

08000288 <_Z6PinSetv>:
  RCC->CFGR |= (RCC_CFGR_HPRE_DIV1);
  */
}

void PinSet()
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  // Тактирование порта C
  RCC->APB2ENR |= (RCC_APB2ENR_IOPCEN);
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <_Z6PinSetv+0x44>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <_Z6PinSetv+0x44>)
 8000292:	f043 0310 	orr.w	r3, r3, #16
 8000296:	6193      	str	r3, [r2, #24]
  // Output mode, max speed 50 MHz
  GPIOC->CRH &= ~(GPIO_CRH_MODE13);
 8000298:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <_Z6PinSetv+0x48>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	4a0c      	ldr	r2, [pc, #48]	; (80002d0 <_Z6PinSetv+0x48>)
 800029e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80002a2:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= (0b11 << GPIO_CRH_MODE13_Pos);
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <_Z6PinSetv+0x48>)
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <_Z6PinSetv+0x48>)
 80002aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80002ae:	6053      	str	r3, [r2, #4]
  // General purpose output push-pull
  GPIOC->CRH &= ~(GPIO_CRH_CNF13);
 80002b0:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <_Z6PinSetv+0x48>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <_Z6PinSetv+0x48>)
 80002b6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80002ba:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= (0b00 << GPIO_CRH_CNF13_Pos);
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <_Z6PinSetv+0x48>)
 80002be:	4a04      	ldr	r2, [pc, #16]	; (80002d0 <_Z6PinSetv+0x48>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	6053      	str	r3, [r2, #4]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	40021000 	.word	0x40021000
 80002d0:	40011000 	.word	0x40011000

080002d4 <main>:

int i = 0;
uint16_t src[10] = {0};

int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b08a      	sub	sp, #40	; 0x28
 80002d8:	af04      	add	r7, sp, #16
   * @brief   Start HSI clock
   *
   * @details Returns 1 if launch is successful
   * @details HSE not divided for PLL entry
   */
  ClockControl::HSE::Start_HSE();
 80002da:	f000 fa69 	bl	80007b0 <_ZN12ClockControl3HSE9Start_HSEEv>
  ClockControl::HSE::PLL::Clean_PLLXTPRE();
 80002de:	f000 fa9f 	bl	8000820 <_ZN12ClockControl3HSE3PLL14Clean_PLLXTPREEv>
   * @brief   PLL clocking from HSE
   *          Set PLL as system clock
   * @details Written only when PLL is disabled
   * @details On successful launch pll returns 1
   */
  ClockControl::HSE::PLL::Set_PLLSRC_HSE();
 80002e2:	f000 fa8f 	bl	8000804 <_ZN12ClockControl3HSE3PLL14Set_PLLSRC_HSEEv>
  ClockControl::HSE::PLL::Set_PLL_MUL(6);
 80002e6:	2006      	movs	r0, #6
 80002e8:	f000 faa6 	bl	8000838 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt>
  ClockControl::HSE::PLL::Start_PLL();
 80002ec:	f000 facc 	bl	8000888 <_ZN12ClockControl3HSE3PLL9Start_PLLEv>
  ClockControl::HSE::PLL::Set_SW_PLL();
 80002f0:	f000 faf4 	bl	80008dc <_ZN12ClockControl3HSE3PLL10Set_SW_PLLEv>
   * @details APB1 timers                   - 48Mhz
   * @details APB2 peripherals              - 48Mhz
   * @details APB1 timers                   - 48Mhz
   * @details To ADC                        - 12Mhz
   */
  ClockControl::Set_AHB_Prescaler(1);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f000 f8e1 	bl	80004bc <_ZN12ClockControl17Set_AHB_PrescalerEt>
  ClockControl::Set_APB1_Prescaler(2);
 80002fa:	2002      	movs	r0, #2
 80002fc:	f000 f964 	bl	80005c8 <_ZN12ClockControl18Set_APB1_PrescalerEt>
  ClockControl::Set_APB2_Prescaler(1);
 8000300:	2001      	movs	r0, #1
 8000302:	f000 f9bb 	bl	800067c <_ZN12ClockControl18Set_APB2_PrescalerEt>
  ClockControl::Set_ADC_Prescaler(4);
 8000306:	2004      	movs	r0, #4
 8000308:	f000 fa12 	bl	8000730 <_ZN12ClockControl17Set_ADC_PrescalerEt>

  PinSet();
 800030c:	f7ff ffbc 	bl	8000288 <_Z6PinSetv>
  Uart2_Ini(USART2, 24000000, 9600);
 8000310:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000314:	4920      	ldr	r1, [pc, #128]	; (8000398 <main+0xc4>)
 8000316:	4821      	ldr	r0, [pc, #132]	; (800039c <main+0xc8>)
 8000318:	f000 fc28 	bl	8000b6c <_Z9Uart2_IniP13USART_TypeDefli>
  ADC1_IN9_PB1_ini();
 800031c:	f7ff ff30 	bl	8000180 <_Z16ADC1_IN9_PB1_iniv>

  DmaControlConfig DMA_cfg;
  DMA_cfg.MEM2MEM = MEM2MEM_Disabled;
 8000320:	2300      	movs	r3, #0
 8000322:	723b      	strb	r3, [r7, #8]
  DMA_cfg.PL      = PL_VeryHigh;
 8000324:	2303      	movs	r3, #3
 8000326:	727b      	strb	r3, [r7, #9]
  DMA_cfg.MSIZE   = MSIZE_16bits;
 8000328:	2301      	movs	r3, #1
 800032a:	72bb      	strb	r3, [r7, #10]
  DMA_cfg.PSIZE   = PSIZE_16bits;
 800032c:	2301      	movs	r3, #1
 800032e:	72fb      	strb	r3, [r7, #11]
  DMA_cfg.MINC    = MINC_Enabled;
 8000330:	2301      	movs	r3, #1
 8000332:	733b      	strb	r3, [r7, #12]
  DMA_cfg.PINC    = PINC_Disabled;
 8000334:	2300      	movs	r3, #0
 8000336:	737b      	strb	r3, [r7, #13]
  DMA_cfg.CIRC    = CIRC_Enabled;
 8000338:	2301      	movs	r3, #1
 800033a:	73bb      	strb	r3, [r7, #14]
  DMA_cfg.DIR     = Read_From_Peripheral;
 800033c:	2300      	movs	r3, #0
 800033e:	73fb      	strb	r3, [r7, #15]
  DMA_cfg.TEIE    = TEIE_Enabled;
 8000340:	2301      	movs	r3, #1
 8000342:	743b      	strb	r3, [r7, #16]
  DMA_cfg.HTIE    = HTIE_Disabled;
 8000344:	2300      	movs	r3, #0
 8000346:	747b      	strb	r3, [r7, #17]
  DMA_cfg.TCIE    = TCIE_Enabled;
 8000348:	2301      	movs	r3, #1
 800034a:	74bb      	strb	r3, [r7, #18]
  DMA_cfg.EN      = EN_Enabled;
 800034c:	2301      	movs	r3, #1
 800034e:	74fb      	strb	r3, [r7, #19]
  DmaControl Dma_Ch1(DMA1, DMA1_Channel1, &DMA_cfg, 5, (uint32_t*)&src, (uint32_t*)&ADC1->DR);
 8000350:	f107 0308 	add.w	r3, r7, #8
 8000354:	1d38      	adds	r0, r7, #4
 8000356:	4a12      	ldr	r2, [pc, #72]	; (80003a0 <main+0xcc>)
 8000358:	9202      	str	r2, [sp, #8]
 800035a:	4a12      	ldr	r2, [pc, #72]	; (80003a4 <main+0xd0>)
 800035c:	9201      	str	r2, [sp, #4]
 800035e:	2205      	movs	r2, #5
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <main+0xd4>)
 8000364:	4911      	ldr	r1, [pc, #68]	; (80003ac <main+0xd8>)
 8000366:	f000 fae3 	bl	8000930 <_ZN10DmaControlC1EP11DMA_TypeDefP19DMA_Channel_TypeDefP16DmaControlConfigtPmS6_>

  while (1)
  {  
    ADC1->CR2 |= ADC_CR2_ADON;
 800036a:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <main+0xdc>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	4a10      	ldr	r2, [pc, #64]	; (80003b0 <main+0xdc>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <main+0xdc>)
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <main+0xdc>)
 800037c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000380:	6093      	str	r3, [r2, #8]

    for (int i = 0; i != 1000000; i++)
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <main+0xe0>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d0ed      	beq.n	800036a <main+0x96>
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	3301      	adds	r3, #1
 8000392:	617b      	str	r3, [r7, #20]
 8000394:	e7f7      	b.n	8000386 <main+0xb2>
 8000396:	bf00      	nop
 8000398:	016e3600 	.word	0x016e3600
 800039c:	40004400 	.word	0x40004400
 80003a0:	4001244c 	.word	0x4001244c
 80003a4:	20000084 	.word	0x20000084
 80003a8:	40020008 	.word	0x40020008
 80003ac:	40020000 	.word	0x40020000
 80003b0:	40012400 	.word	0x40012400
 80003b4:	000f4240 	.word	0x000f4240

080003b8 <ADC1_2_IRQHandler>:
extern "C"
{
#endif

    void ADC1_2_IRQHandler()
    {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b09a      	sub	sp, #104	; 0x68
 80003bc:	af00      	add	r7, sp, #0
        if (ADC1->SR & ADC_SR_EOC)
 80003be:	4b11      	ldr	r3, [pc, #68]	; (8000404 <ADC1_2_IRQHandler+0x4c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f003 0302 	and.w	r3, r3, #2
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	bf14      	ite	ne
 80003ca:	2301      	movne	r3, #1
 80003cc:	2300      	moveq	r3, #0
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d00f      	beq.n	80003f4 <ADC1_2_IRQHandler+0x3c>
        {
            char buf[100];
            sprintf(buf, " ADC1_2_IRQHandler-> %ld \n\r", (ADC1->DR) * 3000 / 4096);
 80003d4:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <ADC1_2_IRQHandler+0x4c>)
 80003d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80003dc:	fb02 f303 	mul.w	r3, r2, r3
 80003e0:	0b1a      	lsrs	r2, r3, #12
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4908      	ldr	r1, [pc, #32]	; (8000408 <ADC1_2_IRQHandler+0x50>)
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fcc0 	bl	8000d6c <siprintf>
            Uart2_StrWrite(buf);
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 fb82 	bl	8000af8 <_Z14Uart2_StrWritePc>
        }

        ADC1->SR = 0x00;
 80003f4:	4b03      	ldr	r3, [pc, #12]	; (8000404 <ADC1_2_IRQHandler+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
    }
 80003fa:	bf00      	nop
 80003fc:	3768      	adds	r7, #104	; 0x68
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40012400 	.word	0x40012400
 8000408:	08001688 	.word	0x08001688

0800040c <TIM1_UP_IRQHandler>:

    void TIM1_UP_IRQHandler(void)
    {
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
        GPIOC->ODR |= (GPIO_ODR_ODR13);
 8000410:	4b0a      	ldr	r3, [pc, #40]	; (800043c <TIM1_UP_IRQHandler+0x30>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	4a09      	ldr	r2, [pc, #36]	; (800043c <TIM1_UP_IRQHandler+0x30>)
 8000416:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800041a:	60d3      	str	r3, [r2, #12]
        GPIOC->ODR &= ~(GPIO_ODR_ODR13);
 800041c:	4b07      	ldr	r3, [pc, #28]	; (800043c <TIM1_UP_IRQHandler+0x30>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	4a06      	ldr	r2, [pc, #24]	; (800043c <TIM1_UP_IRQHandler+0x30>)
 8000422:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000426:	60d3      	str	r3, [r2, #12]
        TIM1->SR &= ~TIM_SR_UIF;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <TIM1_UP_IRQHandler+0x34>)
 800042a:	691b      	ldr	r3, [r3, #16]
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <TIM1_UP_IRQHandler+0x34>)
 800042e:	f023 0301 	bic.w	r3, r3, #1
 8000432:	6113      	str	r3, [r2, #16]
    }
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40011000 	.word	0x40011000
 8000440:	40012c00 	.word	0x40012c00

08000444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800044c:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <_sbrk+0x5c>)
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <_sbrk+0x60>)
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000458:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d102      	bne.n	8000466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <_sbrk+0x64>)
 8000462:	4a12      	ldr	r2, [pc, #72]	; (80004ac <_sbrk+0x68>)
 8000464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <_sbrk+0x64>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4413      	add	r3, r2
 800046e:	693a      	ldr	r2, [r7, #16]
 8000470:	429a      	cmp	r2, r3
 8000472:	d207      	bcs.n	8000484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000474:	f000 fc48 	bl	8000d08 <__errno>
 8000478:	4603      	mov	r3, r0
 800047a:	220c      	movs	r2, #12
 800047c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800047e:	f04f 33ff 	mov.w	r3, #4294967295
 8000482:	e009      	b.n	8000498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <_sbrk+0x64>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <_sbrk+0x64>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	4a05      	ldr	r2, [pc, #20]	; (80004a8 <_sbrk+0x64>)
 8000494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3718      	adds	r7, #24
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20005000 	.word	0x20005000
 80004a4:	00000400 	.word	0x00000400
 80004a8:	20000098 	.word	0x20000098
 80004ac:	20000118 	.word	0x20000118

080004b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <_ZN12ClockControl17Set_AHB_PrescalerEt>:
	 * Use default setting
	 * 8Mhz HSI
	 */
}
void ClockControl::Set_AHB_Prescaler(unsigned short AHB_Prescaler_Value)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	80fb      	strh	r3, [r7, #6]
	switch (AHB_Prescaler_Value)
 80004c6:	88fb      	ldrh	r3, [r7, #6]
 80004c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004cc:	d068      	beq.n	80005a0 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xe4>
 80004ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004d2:	dc6c      	bgt.n	80005ae <_ZN12ClockControl17Set_AHB_PrescalerEt+0xf2>
 80004d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004d8:	d05b      	beq.n	8000592 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xd6>
 80004da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004de:	dc66      	bgt.n	80005ae <_ZN12ClockControl17Set_AHB_PrescalerEt+0xf2>
 80004e0:	2b80      	cmp	r3, #128	; 0x80
 80004e2:	d04f      	beq.n	8000584 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xc8>
 80004e4:	2b80      	cmp	r3, #128	; 0x80
 80004e6:	dc62      	bgt.n	80005ae <_ZN12ClockControl17Set_AHB_PrescalerEt+0xf2>
 80004e8:	2b10      	cmp	r3, #16
 80004ea:	dc25      	bgt.n	8000538 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x7c>
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	db5e      	blt.n	80005ae <_ZN12ClockControl17Set_AHB_PrescalerEt+0xf2>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	2b0e      	cmp	r3, #14
 80004f4:	d85b      	bhi.n	80005ae <_ZN12ClockControl17Set_AHB_PrescalerEt+0xf2>
 80004f6:	a201      	add	r2, pc, #4	; (adr r2, 80004fc <_ZN12ClockControl17Set_AHB_PrescalerEt+0x40>)
 80004f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fc:	0800053f 	.word	0x0800053f
 8000500:	080005af 	.word	0x080005af
 8000504:	0800054d 	.word	0x0800054d
 8000508:	080005af 	.word	0x080005af
 800050c:	080005af 	.word	0x080005af
 8000510:	080005af 	.word	0x080005af
 8000514:	0800055b 	.word	0x0800055b
 8000518:	080005af 	.word	0x080005af
 800051c:	080005af 	.word	0x080005af
 8000520:	080005af 	.word	0x080005af
 8000524:	080005af 	.word	0x080005af
 8000528:	080005af 	.word	0x080005af
 800052c:	080005af 	.word	0x080005af
 8000530:	080005af 	.word	0x080005af
 8000534:	08000569 	.word	0x08000569
 8000538:	2b40      	cmp	r3, #64	; 0x40
 800053a:	d01c      	beq.n	8000576 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xba>
 800053c:	e037      	b.n	80005ae <_ZN12ClockControl17Set_AHB_PrescalerEt+0xf2>
	{
	case 2:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV2;
 800053e:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	4a20      	ldr	r2, [pc, #128]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 8000544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000548:	6053      	str	r3, [r2, #4]
		break;
 800054a:	e035      	b.n	80005b8 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xfc>
	case 4:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV4;
 800054c:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 8000552:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000556:	6053      	str	r3, [r2, #4]
		break;
 8000558:	e02e      	b.n	80005b8 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xfc>
	case 8:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV8;
 800055a:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	4a19      	ldr	r2, [pc, #100]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 8000560:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000564:	6053      	str	r3, [r2, #4]
		break;
 8000566:	e027      	b.n	80005b8 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xfc>
	case 16:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV16;
 8000568:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	4a15      	ldr	r2, [pc, #84]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 800056e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000572:	6053      	str	r3, [r2, #4]
		break;
 8000574:	e020      	b.n	80005b8 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xfc>
	case 64:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV64;
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 800057c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000580:	6053      	str	r3, [r2, #4]
		break;
 8000582:	e019      	b.n	80005b8 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xfc>
	case 128:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV128;
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 800058a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800058e:	6053      	str	r3, [r2, #4]
		break;
 8000590:	e012      	b.n	80005b8 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xfc>
	case 256:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV256;
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 8000598:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800059c:	6053      	str	r3, [r2, #4]
		break;
 800059e:	e00b      	b.n	80005b8 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xfc>
	case 512:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV512;
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 80005a6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80005aa:	6053      	str	r3, [r2, #4]
		break;
 80005ac:	e004      	b.n	80005b8 <_ZN12ClockControl17Set_AHB_PrescalerEt+0xfc>
	default:
		RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <_ZN12ClockControl17Set_AHB_PrescalerEt+0x108>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	6053      	str	r3, [r2, #4]
	}
}
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <_ZN12ClockControl18Set_APB1_PrescalerEt>:
void ClockControl::Set_APB1_Prescaler(unsigned short APB1_Prescaler_Value)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]
	switch (APB1_Prescaler_Value)
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	3b01      	subs	r3, #1
 80005d6:	2b0f      	cmp	r3, #15
 80005d8:	d843      	bhi.n	8000662 <_ZN12ClockControl18Set_APB1_PrescalerEt+0x9a>
 80005da:	a201      	add	r2, pc, #4	; (adr r2, 80005e0 <_ZN12ClockControl18Set_APB1_PrescalerEt+0x18>)
 80005dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e0:	08000621 	.word	0x08000621
 80005e4:	0800062b 	.word	0x0800062b
 80005e8:	08000663 	.word	0x08000663
 80005ec:	08000639 	.word	0x08000639
 80005f0:	08000663 	.word	0x08000663
 80005f4:	08000663 	.word	0x08000663
 80005f8:	08000663 	.word	0x08000663
 80005fc:	08000647 	.word	0x08000647
 8000600:	08000663 	.word	0x08000663
 8000604:	08000663 	.word	0x08000663
 8000608:	08000663 	.word	0x08000663
 800060c:	08000663 	.word	0x08000663
 8000610:	08000663 	.word	0x08000663
 8000614:	08000663 	.word	0x08000663
 8000618:	08000663 	.word	0x08000663
 800061c:	08000655 	.word	0x08000655
	{
	case 1:
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 8000622:	4a15      	ldr	r2, [pc, #84]	; (8000678 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	6053      	str	r3, [r2, #4]
		break;
 8000628:	e020      	b.n	800066c <_ZN12ClockControl18Set_APB1_PrescalerEt+0xa4>
	case 2:
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 8000630:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000634:	6053      	str	r3, [r2, #4]
		break;
 8000636:	e019      	b.n	800066c <_ZN12ClockControl18Set_APB1_PrescalerEt+0xa4>
	case 4:
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 800063e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000642:	6053      	str	r3, [r2, #4]
		break;
 8000644:	e012      	b.n	800066c <_ZN12ClockControl18Set_APB1_PrescalerEt+0xa4>
	case 8:
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV8;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 800064c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8000650:	6053      	str	r3, [r2, #4]
		break;
 8000652:	e00b      	b.n	800066c <_ZN12ClockControl18Set_APB1_PrescalerEt+0xa4>
	case 16:
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV16;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 800065a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800065e:	6053      	str	r3, [r2, #4]
		break;
 8000660:	e004      	b.n	800066c <_ZN12ClockControl18Set_APB1_PrescalerEt+0xa4>
	default:
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <_ZN12ClockControl18Set_APB1_PrescalerEt+0xb0>)
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	6053      	str	r3, [r2, #4]
	}
}
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000

0800067c <_ZN12ClockControl18Set_APB2_PrescalerEt>:
void ClockControl::Set_APB2_Prescaler(unsigned short APB2_Prescaler_Value)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	80fb      	strh	r3, [r7, #6]
	switch (APB2_Prescaler_Value)
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	3b01      	subs	r3, #1
 800068a:	2b0f      	cmp	r3, #15
 800068c:	d843      	bhi.n	8000716 <_ZN12ClockControl18Set_APB2_PrescalerEt+0x9a>
 800068e:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <_ZN12ClockControl18Set_APB2_PrescalerEt+0x18>)
 8000690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000694:	080006d5 	.word	0x080006d5
 8000698:	080006df 	.word	0x080006df
 800069c:	08000717 	.word	0x08000717
 80006a0:	080006ed 	.word	0x080006ed
 80006a4:	08000717 	.word	0x08000717
 80006a8:	08000717 	.word	0x08000717
 80006ac:	08000717 	.word	0x08000717
 80006b0:	080006fb 	.word	0x080006fb
 80006b4:	08000717 	.word	0x08000717
 80006b8:	08000717 	.word	0x08000717
 80006bc:	08000717 	.word	0x08000717
 80006c0:	08000717 	.word	0x08000717
 80006c4:	08000717 	.word	0x08000717
 80006c8:	08000717 	.word	0x08000717
 80006cc:	08000717 	.word	0x08000717
 80006d0:	08000709 	.word	0x08000709
	{
	case 1:
		RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	6053      	str	r3, [r2, #4]
		break;
 80006dc:	e020      	b.n	8000720 <_ZN12ClockControl18Set_APB2_PrescalerEt+0xa4>
	case 2:
		RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 80006e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006e8:	6053      	str	r3, [r2, #4]
		break;
 80006ea:	e019      	b.n	8000720 <_ZN12ClockControl18Set_APB2_PrescalerEt+0xa4>
	case 4:
		RCC->CFGR |= RCC_CFGR_PPRE2_DIV4;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	4a0e      	ldr	r2, [pc, #56]	; (800072c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 80006f2:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80006f6:	6053      	str	r3, [r2, #4]
		break;
 80006f8:	e012      	b.n	8000720 <_ZN12ClockControl18Set_APB2_PrescalerEt+0xa4>
	case 8:
		RCC->CFGR |= RCC_CFGR_PPRE2_DIV8;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 8000700:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000704:	6053      	str	r3, [r2, #4]
		break;
 8000706:	e00b      	b.n	8000720 <_ZN12ClockControl18Set_APB2_PrescalerEt+0xa4>
	case 16:
		RCC->CFGR |= RCC_CFGR_PPRE2_DIV16;
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	4a07      	ldr	r2, [pc, #28]	; (800072c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 800070e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000712:	6053      	str	r3, [r2, #4]
		break;
 8000714:	e004      	b.n	8000720 <_ZN12ClockControl18Set_APB2_PrescalerEt+0xa4>
	default:
		RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <_ZN12ClockControl18Set_APB2_PrescalerEt+0xb0>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	6053      	str	r3, [r2, #4]
	}
}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <_ZN12ClockControl17Set_ADC_PrescalerEt>:
void ClockControl::Set_ADC_Prescaler(unsigned short ADC_Prescaler_Value)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	80fb      	strh	r3, [r7, #6]
	switch (ADC_Prescaler_Value)
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	3b02      	subs	r3, #2
 800073e:	2b06      	cmp	r3, #6
 8000740:	d82a      	bhi.n	8000798 <_ZN12ClockControl17Set_ADC_PrescalerEt+0x68>
 8000742:	a201      	add	r2, pc, #4	; (adr r2, 8000748 <_ZN12ClockControl17Set_ADC_PrescalerEt+0x18>)
 8000744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000748:	08000765 	.word	0x08000765
 800074c:	08000799 	.word	0x08000799
 8000750:	0800076f 	.word	0x0800076f
 8000754:	08000799 	.word	0x08000799
 8000758:	0800077d 	.word	0x0800077d
 800075c:	08000799 	.word	0x08000799
 8000760:	0800078b 	.word	0x0800078b
	{
	case 2:
		RCC->CFGR |= RCC_CFGR_ADCPRE_DIV2;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 8000766:	4a11      	ldr	r2, [pc, #68]	; (80007ac <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	6053      	str	r3, [r2, #4]
		break;
 800076c:	e019      	b.n	80007a2 <_ZN12ClockControl17Set_ADC_PrescalerEt+0x72>
	case 4:
		RCC->CFGR |= RCC_CFGR_ADCPRE_DIV4;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 8000774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000778:	6053      	str	r3, [r2, #4]
		break;
 800077a:	e012      	b.n	80007a2 <_ZN12ClockControl17Set_ADC_PrescalerEt+0x72>
	case 6:
		RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 8000782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000786:	6053      	str	r3, [r2, #4]
		break;
 8000788:	e00b      	b.n	80007a2 <_ZN12ClockControl17Set_ADC_PrescalerEt+0x72>
	case 8:
		RCC->CFGR |= RCC_CFGR_ADCPRE_DIV8;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	4a07      	ldr	r2, [pc, #28]	; (80007ac <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 8000790:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000794:	6053      	str	r3, [r2, #4]
		break;
 8000796:	e004      	b.n	80007a2 <_ZN12ClockControl17Set_ADC_PrescalerEt+0x72>
	default:
		RCC->CFGR |= RCC_CFGR_ADCPRE_DIV2;
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 800079a:	4a04      	ldr	r2, [pc, #16]	; (80007ac <_ZN12ClockControl17Set_ADC_PrescalerEt+0x7c>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	6053      	str	r3, [r2, #4]
	}
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	40021000 	.word	0x40021000

080007b0 <_ZN12ClockControl3HSE9Start_HSEEv>:
{
	RCC->CFGR &= ~RCC_CFGR_USBPRE;
}

bool ClockControl::HSE::Start_HSE()
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <_ZN12ClockControl3HSE9Start_HSEEv+0x50>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a11      	ldr	r2, [pc, #68]	; (8000800 <_ZN12ClockControl3HSE9Start_HSEEv+0x50>)
 80007bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007c0:	6013      	str	r3, [r2, #0]

	for (int StartUpCounter = 0;; StartUpCounter++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
	{
		if (StartUpCounter > 0x1000)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007cc:	dd01      	ble.n	80007d2 <_ZN12ClockControl3HSE9Start_HSEEv+0x22>
			return 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e010      	b.n	80007f4 <_ZN12ClockControl3HSE9Start_HSEEv+0x44>
		else if (RCC->CR & RCC_CR_HSERDY)
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <_ZN12ClockControl3HSE9Start_HSEEv+0x50>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007da:	2b00      	cmp	r3, #0
 80007dc:	bf14      	ite	ne
 80007de:	2301      	movne	r3, #1
 80007e0:	2300      	moveq	r3, #0
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <_ZN12ClockControl3HSE9Start_HSEEv+0x3c>
			return 1;
 80007e8:	2301      	movs	r3, #1
 80007ea:	e003      	b.n	80007f4 <_ZN12ClockControl3HSE9Start_HSEEv+0x44>
	for (int StartUpCounter = 0;; StartUpCounter++)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3301      	adds	r3, #1
 80007f0:	607b      	str	r3, [r7, #4]
		if (StartUpCounter > 0x1000)
 80007f2:	e7e8      	b.n	80007c6 <_ZN12ClockControl3HSE9Start_HSEEv+0x16>
	}
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <_ZN12ClockControl3HSE3PLL14Set_PLLSRC_HSEEv>:
void ClockControl::HSE::Stop_HSE()
{
	RCC->CR &= ~RCC_CR_HSEON;
}
void ClockControl::HSE::PLL::Set_PLLSRC_HSE()
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <_ZN12ClockControl3HSE3PLL14Set_PLLSRC_HSEEv+0x18>)
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	4a03      	ldr	r2, [pc, #12]	; (800081c <_ZN12ClockControl3HSE3PLL14Set_PLLSRC_HSEEv+0x18>)
 800080e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000812:	6053      	str	r3, [r2, #4]
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	40021000 	.word	0x40021000

08000820 <_ZN12ClockControl3HSE3PLL14Clean_PLLXTPREEv>:
void ClockControl::HSE::PLL::Set_PLLXTPRE()
{
	RCC->CFGR |= (1 << RCC_CFGR_PLLXTPRE_Pos);
}
void ClockControl::HSE::PLL::Clean_PLLXTPRE()
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
	RCC->CFGR &= ~(0 << RCC_CFGR_PLLXTPRE_Pos);
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <_ZN12ClockControl3HSE3PLL14Clean_PLLXTPREEv+0x14>)
 8000826:	4a03      	ldr	r2, [pc, #12]	; (8000834 <_ZN12ClockControl3HSE3PLL14Clean_PLLXTPREEv+0x14>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	6053      	str	r3, [r2, #4]
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000

08000838 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt>:
void ClockControl::HSE::PLL::Set_PLL_MUL(unsigned short PLL_MUL_Value)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	80fb      	strh	r3, [r7, #6]
	if (PLL_MUL_Value < 2)
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d804      	bhi.n	8000852 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x1a>
	{
		RCC->CFGR |= RCC_CFGR_PLLMULL2;
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x4c>)
 800084a:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x4c>)
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	6053      	str	r3, [r2, #4]
		else
		{
			RCC->CFGR |= ((PLL_MUL_Value - 2) << RCC_CFGR_PLLMULL_Pos);
		}
	}
}
 8000850:	e012      	b.n	8000878 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x40>
		if (PLL_MUL_Value > 0b1111)
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	2b0f      	cmp	r3, #15
 8000856:	d906      	bls.n	8000866 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x2e>
			RCC->CFGR |= RCC_CFGR_PLLMULL16;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x4c>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	4a09      	ldr	r2, [pc, #36]	; (8000884 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x4c>)
 800085e:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8000862:	6053      	str	r3, [r2, #4]
}
 8000864:	e008      	b.n	8000878 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x40>
			RCC->CFGR |= ((PLL_MUL_Value - 2) << RCC_CFGR_PLLMULL_Pos);
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x4c>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	88fa      	ldrh	r2, [r7, #6]
 800086c:	3a02      	subs	r2, #2
 800086e:	0492      	lsls	r2, r2, #18
 8000870:	4611      	mov	r1, r2
 8000872:	4a04      	ldr	r2, [pc, #16]	; (8000884 <_ZN12ClockControl3HSE3PLL11Set_PLL_MULEt+0x4c>)
 8000874:	430b      	orrs	r3, r1
 8000876:	6053      	str	r3, [r2, #4]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000

08000888 <_ZN12ClockControl3HSE3PLL9Start_PLLEv>:
bool ClockControl::HSE::PLL::Start_PLL()
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_PLLON;
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <_ZN12ClockControl3HSE3PLL9Start_PLLEv+0x50>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <_ZN12ClockControl3HSE3PLL9Start_PLLEv+0x50>)
 8000894:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000898:	6013      	str	r3, [r2, #0]

	for (int StartUpCounter = 0;; StartUpCounter++)
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
	{
		if (StartUpCounter > 0x1000)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008a4:	dd01      	ble.n	80008aa <_ZN12ClockControl3HSE3PLL9Start_PLLEv+0x22>
			return 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	e010      	b.n	80008cc <_ZN12ClockControl3HSE3PLL9Start_PLLEv+0x44>
		else if (RCC->CR & RCC_CR_PLLRDY)
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <_ZN12ClockControl3HSE3PLL9Start_PLLEv+0x50>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bf14      	ite	ne
 80008b6:	2301      	movne	r3, #1
 80008b8:	2300      	moveq	r3, #0
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <_ZN12ClockControl3HSE3PLL9Start_PLLEv+0x3c>
			return 1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	e003      	b.n	80008cc <_ZN12ClockControl3HSE3PLL9Start_PLLEv+0x44>
	for (int StartUpCounter = 0;; StartUpCounter++)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3301      	adds	r3, #1
 80008c8:	607b      	str	r3, [r7, #4]
		if (StartUpCounter > 0x1000)
 80008ca:	e7e8      	b.n	800089e <_ZN12ClockControl3HSE3PLL9Start_PLLEv+0x16>
	}
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <_ZN12ClockControl3HSE3PLL10Set_SW_PLLEv>:
void ClockControl::HSE::PLL::Set_SW_PLL()
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <_ZN12ClockControl3HSE3PLL10Set_SW_PLLEv+0x18>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	4a03      	ldr	r2, [pc, #12]	; (80008f4 <_ZN12ClockControl3HSE3PLL10Set_SW_PLLEv+0x18>)
 80008e6:	f043 0302 	orr.w	r3, r3, #2
 80008ea:	6053      	str	r3, [r2, #4]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	40021000 	.word	0x40021000

080008f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db0b      	blt.n	8000922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	f003 021f 	and.w	r2, r3, #31
 8000910:	4906      	ldr	r1, [pc, #24]	; (800092c <__NVIC_EnableIRQ+0x34>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	095b      	lsrs	r3, r3, #5
 8000918:	2001      	movs	r0, #1
 800091a:	fa00 f202 	lsl.w	r2, r0, r2
 800091e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	e000e100 	.word	0xe000e100

08000930 <_ZN10DmaControlC1EP11DMA_TypeDefP19DMA_Channel_TypeDefP16DmaControlConfigtPmS6_>:
#include <stdint.h>
#include "stm32f1xx.h"
#include <DmaControl/DmaControl.h>
#include "main.h"

DmaControl::DmaControl(DMA_TypeDef *DMA_Num, DMA_Channel_TypeDef *DMA_Channel, DmaControlConfig *cfg, uint16_t Counter, uint32_t *DataPointer, uint32_t *PeripheryPointer)
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
 800093c:	603b      	str	r3, [r7, #0]
{   
  RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 800093e:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <_ZN10DmaControlC1EP11DMA_TypeDefP19DMA_Channel_TypeDefP16DmaControlConfigtPmS6_+0xb4>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4a28      	ldr	r2, [pc, #160]	; (80009e4 <_ZN10DmaControlC1EP11DMA_TypeDefP19DMA_Channel_TypeDefP16DmaControlConfigtPmS6_+0xb4>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6153      	str	r3, [r2, #20]

  DMA_Channel->CNDTR = Counter;                    // кадры для передачи
 800094a:	8b3a      	ldrh	r2, [r7, #24]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	605a      	str	r2, [r3, #4]
  DMA_Channel->CMAR  = (uint32_t)DataPointer;      // адрес памяти
 8000950:	69fa      	ldr	r2, [r7, #28]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	60da      	str	r2, [r3, #12]
  DMA_Channel->CPAR  = (uint32_t)PeripheryPointer; // адрес периферии
 8000956:	6a3a      	ldr	r2, [r7, #32]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	609a      	str	r2, [r3, #8]

  DMA_Num->IFCR |= 
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f043 020f 	orr.w	r2, r3, #15
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	605a      	str	r2, [r3, #4]
       DMA_IFCR_CTEIF1  // Channel 1 transfer error clear
     | DMA_IFCR_CHTIF1  // Channel 1 half transfer clear
     | DMA_IFCR_CTCIF1  // Channel 1 transfer complete clear
     | DMA_IFCR_CGIF1;  // Channel 1 global interrupt clear

  DMA_Channel->CCR  = 0x00;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
  DMA_Channel->CCR |= 
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
        (cfg->MEM2MEM << DMA_CCR_MEM2MEM_Pos)  // Memory to memory mode disabled
 8000972:	683a      	ldr	r2, [r7, #0]
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	0391      	lsls	r1, r2, #14
      | (cfg->PL      << DMA_CCR_PL_Pos)       // Channel priority level
 8000978:	683a      	ldr	r2, [r7, #0]
 800097a:	7852      	ldrb	r2, [r2, #1]
 800097c:	0312      	lsls	r2, r2, #12
 800097e:	4311      	orrs	r1, r2
      | (cfg->MSIZE   << DMA_CCR_MSIZE_Pos)    // Memory size
 8000980:	683a      	ldr	r2, [r7, #0]
 8000982:	7892      	ldrb	r2, [r2, #2]
 8000984:	0292      	lsls	r2, r2, #10
 8000986:	4311      	orrs	r1, r2
      | (cfg->PSIZE   << DMA_CCR_PSIZE_Pos)    // Peripheral size
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	78d2      	ldrb	r2, [r2, #3]
 800098c:	0212      	lsls	r2, r2, #8
 800098e:	4311      	orrs	r1, r2
      | (cfg->MINC    << DMA_CCR_MINC_Pos)     // Memory increment mode
 8000990:	683a      	ldr	r2, [r7, #0]
 8000992:	7912      	ldrb	r2, [r2, #4]
 8000994:	01d2      	lsls	r2, r2, #7
 8000996:	4311      	orrs	r1, r2
      | (cfg->PINC    << DMA_CCR_PINC_Pos)     // Peripheral increment mode
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	7952      	ldrb	r2, [r2, #5]
 800099c:	0192      	lsls	r2, r2, #6
 800099e:	4311      	orrs	r1, r2
      | (cfg->CIRC    << DMA_CCR_CIRC_Pos)     // Circular mode
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	7992      	ldrb	r2, [r2, #6]
 80009a4:	0152      	lsls	r2, r2, #5
 80009a6:	4311      	orrs	r1, r2
      | (cfg->DIR     << DMA_CCR_DIR_Pos)      // Data transfer direction
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	79d2      	ldrb	r2, [r2, #7]
 80009ac:	0112      	lsls	r2, r2, #4
 80009ae:	4311      	orrs	r1, r2
      | (cfg->TEIE    << DMA_CCR_TEIE_Pos)     // Transfer error interrupt enable
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	7a12      	ldrb	r2, [r2, #8]
 80009b4:	00d2      	lsls	r2, r2, #3
 80009b6:	4311      	orrs	r1, r2
      | (cfg->HTIE    << DMA_CCR_HTIE_Pos)     // Half transfer interrupt enable
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	7a52      	ldrb	r2, [r2, #9]
 80009bc:	0092      	lsls	r2, r2, #2
 80009be:	4311      	orrs	r1, r2
      | (cfg->TCIE    << DMA_CCR_TCIE_Pos)     // Transfer complete interrupt enable
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	7a92      	ldrb	r2, [r2, #10]
 80009c4:	0052      	lsls	r2, r2, #1
 80009c6:	430a      	orrs	r2, r1
      | (cfg->EN      << DMA_CCR_EN_Pos);      // Channel enable
 80009c8:	6839      	ldr	r1, [r7, #0]
 80009ca:	7ac9      	ldrb	r1, [r1, #11]
 80009cc:	430a      	orrs	r2, r1
  DMA_Channel->CCR |= 
 80009ce:	431a      	orrs	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	601a      	str	r2, [r3, #0]

  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009d4:	200b      	movs	r0, #11
 80009d6:	f7ff ff8f 	bl	80008f8 <__NVIC_EnableIRQ>
}
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000

080009e8 <DMA1_Channel1_IRQHandler>:
extern "C"
{
#endif

  void DMA1_Channel1_IRQHandler(void)
  {
 80009e8:	b5b0      	push	{r4, r5, r7, lr}
 80009ea:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80009ee:	af04      	add	r7, sp, #16
    char buf[500] = {0};
 80009f0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80009f4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	3304      	adds	r3, #4
 80009fe:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 f9a9 	bl	8000d5c <memset>
      " Val_0 -> %d \n\r"
      " Val_1 -> %d \n\r"
      " Val_2 -> %d \n\r"
      " Val_3 -> %d \n\r"
      " Val_4 -> %d \n\r",
     (src[0])*3000 / 4096,
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <DMA1_Channel1_IRQHandler+0xcc>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a14:	fb02 f303 	mul.w	r3, r2, r3
    (buf, 
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	da01      	bge.n	8000a20 <DMA1_Channel1_IRQHandler+0x38>
 8000a1c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a20:	131b      	asrs	r3, r3, #12
 8000a22:	461c      	mov	r4, r3
     (src[1])*3000 / 4096,
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <DMA1_Channel1_IRQHandler+0xcc>)
 8000a26:	885b      	ldrh	r3, [r3, #2]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a2e:	fb02 f303 	mul.w	r3, r2, r3
    (buf, 
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	da01      	bge.n	8000a3a <DMA1_Channel1_IRQHandler+0x52>
 8000a36:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a3a:	131b      	asrs	r3, r3, #12
 8000a3c:	461d      	mov	r5, r3
     (src[2])*3000 / 4096,
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <DMA1_Channel1_IRQHandler+0xcc>)
 8000a40:	889b      	ldrh	r3, [r3, #4]
 8000a42:	461a      	mov	r2, r3
 8000a44:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a48:	fb02 f303 	mul.w	r3, r2, r3
    (buf, 
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	da01      	bge.n	8000a54 <DMA1_Channel1_IRQHandler+0x6c>
 8000a50:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a54:	131b      	asrs	r3, r3, #12
 8000a56:	461a      	mov	r2, r3
     (src[3])*3000 / 4096,
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <DMA1_Channel1_IRQHandler+0xcc>)
 8000a5a:	88db      	ldrh	r3, [r3, #6]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a62:	fb01 f303 	mul.w	r3, r1, r3
    (buf, 
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	da01      	bge.n	8000a6e <DMA1_Channel1_IRQHandler+0x86>
 8000a6a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a6e:	131b      	asrs	r3, r3, #12
 8000a70:	4619      	mov	r1, r3
     (src[4])*3000 / 4096
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <DMA1_Channel1_IRQHandler+0xcc>)
 8000a74:	891b      	ldrh	r3, [r3, #8]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a7c:	fb00 f303 	mul.w	r3, r0, r3
    (buf, 
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	da01      	bge.n	8000a88 <DMA1_Channel1_IRQHandler+0xa0>
 8000a84:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a88:	131b      	asrs	r3, r3, #12
 8000a8a:	1d38      	adds	r0, r7, #4
 8000a8c:	9302      	str	r3, [sp, #8]
 8000a8e:	9101      	str	r1, [sp, #4]
 8000a90:	9200      	str	r2, [sp, #0]
 8000a92:	462b      	mov	r3, r5
 8000a94:	4622      	mov	r2, r4
 8000a96:	4908      	ldr	r1, [pc, #32]	; (8000ab8 <DMA1_Channel1_IRQHandler+0xd0>)
 8000a98:	f000 f968 	bl	8000d6c <siprintf>
    );
    Uart2_StrWrite(buf);
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f82a 	bl	8000af8 <_Z14Uart2_StrWritePc>

    DMA1->IFCR =
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <DMA1_Channel1_IRQHandler+0xd4>)
 8000aa6:	220f      	movs	r2, #15
 8000aa8:	605a      	str	r2, [r3, #4]
        DMA_IFCR_CTEIF1   // Channel 1 transfer error clear
        | DMA_IFCR_CHTIF1 // Channel 1 half transfer clear
        | DMA_IFCR_CTCIF1 // Channel 1 transfer complete clear
        | DMA_IFCR_CGIF1; // Channel 1 global interrupt clear
  }
 8000aaa:	bf00      	nop
 8000aac:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab4:	20000084 	.word	0x20000084
 8000ab8:	080016a4 	.word	0x080016a4
 8000abc:	40020000 	.word	0x40020000

08000ac0 <__NVIC_EnableIRQ>:
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db0b      	blt.n	8000aea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 021f 	and.w	r2, r3, #31
 8000ad8:	4906      	ldr	r1, [pc, #24]	; (8000af4 <__NVIC_EnableIRQ+0x34>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	095b      	lsrs	r3, r3, #5
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	e000e100 	.word	0xe000e100

08000af8 <_Z14Uart2_StrWritePc>:
short Uart2_Counter = 0;
short Uart2_Len = 0;
char Uart2_BufSend[100] = {0};

void Uart2_StrWrite(char Buf[100])
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if (Uart2_Cond)
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <_Z14Uart2_StrWritePc+0x60>)
 8000b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d021      	beq.n	8000b4e <_Z14Uart2_StrWritePc+0x56>
  {
    Uart2_Cond = 0;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <_Z14Uart2_StrWritePc+0x60>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	801a      	strh	r2, [r3, #0]
    Uart2_Counter = 0;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <_Z14Uart2_StrWritePc+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	801a      	strh	r2, [r3, #0]
    Uart2_Len = 0;
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <_Z14Uart2_StrWritePc+0x68>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	801a      	strh	r2, [r3, #0]

    strcpy(Uart2_BufSend, Buf);
 8000b1c:	6879      	ldr	r1, [r7, #4]
 8000b1e:	4811      	ldr	r0, [pc, #68]	; (8000b64 <_Z14Uart2_StrWritePc+0x6c>)
 8000b20:	f000 f944 	bl	8000dac <strcpy>
    Uart2_Len = strlen(Uart2_BufSend);
 8000b24:	480f      	ldr	r0, [pc, #60]	; (8000b64 <_Z14Uart2_StrWritePc+0x6c>)
 8000b26:	f7ff fb23 	bl	8000170 <strlen>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <_Z14Uart2_StrWritePc+0x68>)
 8000b30:	801a      	strh	r2, [r3, #0]

    USART2->DR = Uart2_BufSend[Uart2_Counter];
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <_Z14Uart2_StrWritePc+0x64>)
 8000b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <_Z14Uart2_StrWritePc+0x6c>)
 8000b3c:	5c9a      	ldrb	r2, [r3, r2]
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <_Z14Uart2_StrWritePc+0x70>)
 8000b40:	605a      	str	r2, [r3, #4]
    USART2->CR1 |= USART_CR1_TXEIE;
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <_Z14Uart2_StrWritePc+0x70>)
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <_Z14Uart2_StrWritePc+0x70>)
 8000b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4c:	60d3      	str	r3, [r2, #12]
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	2000009c 	.word	0x2000009c
 8000b60:	2000009e 	.word	0x2000009e
 8000b64:	200000a0 	.word	0x200000a0
 8000b68:	40004400 	.word	0x40004400

08000b6c <_Z9Uart2_IniP13USART_TypeDefli>:

void Uart2_Ini(USART_TypeDef *UartNumb, long int UartBusCLK, int BaudRate)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  /*  включаем тактирование UART  */
  RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000b78:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <_Z9Uart2_IniP13USART_TypeDefli+0x9c>)
 8000b7a:	69db      	ldr	r3, [r3, #28]
 8000b7c:	4a22      	ldr	r2, [pc, #136]	; (8000c08 <_Z9Uart2_IniP13USART_TypeDefli+0x9c>)
 8000b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b82:	61d3      	str	r3, [r2, #28]

  /*  UART2 использует выводы: PA2 (TX) и PA3 (RX).  */
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; // тактирование порта GPIOA
 8000b84:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <_Z9Uart2_IniP13USART_TypeDefli+0x9c>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a1f      	ldr	r2, [pc, #124]	; (8000c08 <_Z9Uart2_IniP13USART_TypeDefli+0x9c>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6193      	str	r3, [r2, #24]

  /*  PA2_Tx  */
  GPIOA->CRL &= ~(GPIO_CRL_CNF2);
 8000b90:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a1d      	ldr	r2, [pc, #116]	; (8000c0c <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 8000b96:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000b9a:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= (0b10 << GPIO_CRL_CNF2_Pos); // Alternate Function outpu Push-pull
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a1a      	ldr	r2, [pc, #104]	; (8000c0c <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 8000ba2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ba6:	6013      	str	r3, [r2, #0]
  GPIOA->CRL &= ~(GPIO_CRL_MODE2);
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 8000bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bb2:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= (0b11 << GPIO_CRL_MODE2_Pos); // Max speed
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 8000bba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000bbe:	6013      	str	r3, [r2, #0]

  /*  PA3_Rx  */

  /*  конфигурация UART2  */
  UartNumb->CR1 = 0x00;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  UartNumb->CR1 |= USART_CR1_UE; // разрешаем USART2
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	60da      	str	r2, [r3, #12]

  /*  USARTDIV = Fck / (16 * BAUD) = 72000000 / (16 * 9600) = 468,75        */
  /*  Значение регистра USART_BRR = 468,75 * 16 = 7500 - скорость 9600 бод  */
  // USART2->BRR = 833;  // скорость 9600 бод при частоте 8 Мгц
  UartNumb->BRR = UartBusCLK / BaudRate;
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	609a      	str	r2, [r3, #8]

 // разрешаем приемник, передатчик и прерывание по приему
  UartNumb->CR1 |= USART_CR1_TE 
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	f043 020c 	orr.w	r2, r3, #12
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	60da      	str	r2, [r3, #12]
                | USART_CR1_RE;

  UartNumb->CR2 = 0;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  UartNumb->CR3 = 0;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]

  NVIC_EnableIRQ(USART2_IRQn);
 8000bf8:	2026      	movs	r0, #38	; 0x26
 8000bfa:	f7ff ff61 	bl	8000ac0 <__NVIC_EnableIRQ>
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40010800 	.word	0x40010800

08000c10 <USART2_IRQHandler>:
#ifdef __cplusplus
extern "C"
{
#endif
    void USART2_IRQHandler(void)
    {
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
        if (USART2->SR & USART_SR_TXE)
 8000c14:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <USART2_IRQHandler+0x90>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	bf14      	ite	ne
 8000c20:	2301      	movne	r3, #1
 8000c22:	2300      	moveq	r3, #0
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d035      	beq.n	8000c96 <USART2_IRQHandler+0x86>
        {
            if (Uart2_Counter < Uart2_Len)
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <USART2_IRQHandler+0x94>)
 8000c2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <USART2_IRQHandler+0x98>)
 8000c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	da1a      	bge.n	8000c70 <USART2_IRQHandler+0x60>
            {
                Uart2_Counter++;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <USART2_IRQHandler+0x94>)
 8000c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	3301      	adds	r3, #1
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	b21a      	sxth	r2, r3
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <USART2_IRQHandler+0x94>)
 8000c4a:	801a      	strh	r2, [r3, #0]
                USART2->DR = Uart2_BufSend[Uart2_Counter];
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <USART2_IRQHandler+0x94>)
 8000c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <USART2_IRQHandler+0x9c>)
 8000c56:	5c9a      	ldrb	r2, [r3, r2]
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <USART2_IRQHandler+0x90>)
 8000c5a:	605a      	str	r2, [r3, #4]

                USART2->SR = 0x00;
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <USART2_IRQHandler+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
                USART2->CR1 &= ~USART_CR1_TCIE;
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <USART2_IRQHandler+0x90>)
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <USART2_IRQHandler+0x90>)
 8000c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c6c:	60d3      	str	r3, [r2, #12]
                Uart2_Len = 0;
                Uart2_BufSend[100] = {0};
                USART2->CR1 &= ~USART_CR1_TXEIE;
            }
        }
    }
 8000c6e:	e012      	b.n	8000c96 <USART2_IRQHandler+0x86>
                Uart2_Cond = 1;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <USART2_IRQHandler+0xa0>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	801a      	strh	r2, [r3, #0]
                Uart2_Counter = 0;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <USART2_IRQHandler+0x94>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	801a      	strh	r2, [r3, #0]
                Uart2_Len = 0;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <USART2_IRQHandler+0x98>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	801a      	strh	r2, [r3, #0]
                Uart2_BufSend[100] = {0};
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <USART2_IRQHandler+0x9c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                USART2->CR1 &= ~USART_CR1_TXEIE;
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <USART2_IRQHandler+0x90>)
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <USART2_IRQHandler+0x90>)
 8000c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c94:	60d3      	str	r3, [r2, #12]
    }
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40004400 	.word	0x40004400
 8000ca4:	2000009c 	.word	0x2000009c
 8000ca8:	2000009e 	.word	0x2000009e
 8000cac:	200000a0 	.word	0x200000a0
 8000cb0:	20000000 	.word	0x20000000

08000cb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cb6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb8:	f7ff fbfa 	bl	80004b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	; (8000cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <LoopForever+0xe>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	; (8000d00 <LoopForever+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ce2:	f000 f817 	bl	8000d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce6:	f7ff faf5 	bl	80002d4 <main>

08000cea <LoopForever>:

LoopForever:
  b LoopForever
 8000cea:	e7fe      	b.n	8000cea <LoopForever>
  ldr   r0, =_estack
 8000cec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cf8:	08001730 	.word	0x08001730
  ldr r2, =_sbss
 8000cfc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d00:	20000114 	.word	0x20000114

08000d04 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC3_IRQHandler>
	...

08000d08 <__errno>:
 8000d08:	4b01      	ldr	r3, [pc, #4]	; (8000d10 <__errno+0x8>)
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000004 	.word	0x20000004

08000d14 <__libc_init_array>:
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	2600      	movs	r6, #0
 8000d18:	4d0c      	ldr	r5, [pc, #48]	; (8000d4c <__libc_init_array+0x38>)
 8000d1a:	4c0d      	ldr	r4, [pc, #52]	; (8000d50 <__libc_init_array+0x3c>)
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	10a4      	asrs	r4, r4, #2
 8000d20:	42a6      	cmp	r6, r4
 8000d22:	d109      	bne.n	8000d38 <__libc_init_array+0x24>
 8000d24:	f000 fca4 	bl	8001670 <_init>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	4d0a      	ldr	r5, [pc, #40]	; (8000d54 <__libc_init_array+0x40>)
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	; (8000d58 <__libc_init_array+0x44>)
 8000d2e:	1b64      	subs	r4, r4, r5
 8000d30:	10a4      	asrs	r4, r4, #2
 8000d32:	42a6      	cmp	r6, r4
 8000d34:	d105      	bne.n	8000d42 <__libc_init_array+0x2e>
 8000d36:	bd70      	pop	{r4, r5, r6, pc}
 8000d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d3c:	4798      	blx	r3
 8000d3e:	3601      	adds	r6, #1
 8000d40:	e7ee      	b.n	8000d20 <__libc_init_array+0xc>
 8000d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d46:	4798      	blx	r3
 8000d48:	3601      	adds	r6, #1
 8000d4a:	e7f2      	b.n	8000d32 <__libc_init_array+0x1e>
 8000d4c:	08001728 	.word	0x08001728
 8000d50:	08001728 	.word	0x08001728
 8000d54:	08001728 	.word	0x08001728
 8000d58:	0800172c 	.word	0x0800172c

08000d5c <memset>:
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	4402      	add	r2, r0
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d100      	bne.n	8000d66 <memset+0xa>
 8000d64:	4770      	bx	lr
 8000d66:	f803 1b01 	strb.w	r1, [r3], #1
 8000d6a:	e7f9      	b.n	8000d60 <memset+0x4>

08000d6c <siprintf>:
 8000d6c:	b40e      	push	{r1, r2, r3}
 8000d6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000d72:	b500      	push	{lr}
 8000d74:	b09c      	sub	sp, #112	; 0x70
 8000d76:	ab1d      	add	r3, sp, #116	; 0x74
 8000d78:	9002      	str	r0, [sp, #8]
 8000d7a:	9006      	str	r0, [sp, #24]
 8000d7c:	9107      	str	r1, [sp, #28]
 8000d7e:	9104      	str	r1, [sp, #16]
 8000d80:	4808      	ldr	r0, [pc, #32]	; (8000da4 <siprintf+0x38>)
 8000d82:	4909      	ldr	r1, [pc, #36]	; (8000da8 <siprintf+0x3c>)
 8000d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d88:	9105      	str	r1, [sp, #20]
 8000d8a:	6800      	ldr	r0, [r0, #0]
 8000d8c:	a902      	add	r1, sp, #8
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	f000 f870 	bl	8000e74 <_svfiprintf_r>
 8000d94:	2200      	movs	r2, #0
 8000d96:	9b02      	ldr	r3, [sp, #8]
 8000d98:	701a      	strb	r2, [r3, #0]
 8000d9a:	b01c      	add	sp, #112	; 0x70
 8000d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000da0:	b003      	add	sp, #12
 8000da2:	4770      	bx	lr
 8000da4:	20000004 	.word	0x20000004
 8000da8:	ffff0208 	.word	0xffff0208

08000dac <strcpy>:
 8000dac:	4603      	mov	r3, r0
 8000dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000db2:	f803 2b01 	strb.w	r2, [r3], #1
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	d1f9      	bne.n	8000dae <strcpy+0x2>
 8000dba:	4770      	bx	lr

08000dbc <__ssputs_r>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	688e      	ldr	r6, [r1, #8]
 8000dc2:	4682      	mov	sl, r0
 8000dc4:	429e      	cmp	r6, r3
 8000dc6:	460c      	mov	r4, r1
 8000dc8:	4690      	mov	r8, r2
 8000dca:	461f      	mov	r7, r3
 8000dcc:	d838      	bhi.n	8000e40 <__ssputs_r+0x84>
 8000dce:	898a      	ldrh	r2, [r1, #12]
 8000dd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000dd4:	d032      	beq.n	8000e3c <__ssputs_r+0x80>
 8000dd6:	6825      	ldr	r5, [r4, #0]
 8000dd8:	6909      	ldr	r1, [r1, #16]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	eba5 0901 	sub.w	r9, r5, r1
 8000de0:	6965      	ldr	r5, [r4, #20]
 8000de2:	444b      	add	r3, r9
 8000de4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000de8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000dec:	106d      	asrs	r5, r5, #1
 8000dee:	429d      	cmp	r5, r3
 8000df0:	bf38      	it	cc
 8000df2:	461d      	movcc	r5, r3
 8000df4:	0553      	lsls	r3, r2, #21
 8000df6:	d531      	bpl.n	8000e5c <__ssputs_r+0xa0>
 8000df8:	4629      	mov	r1, r5
 8000dfa:	f000 fb6f 	bl	80014dc <_malloc_r>
 8000dfe:	4606      	mov	r6, r0
 8000e00:	b950      	cbnz	r0, 8000e18 <__ssputs_r+0x5c>
 8000e02:	230c      	movs	r3, #12
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f8ca 3000 	str.w	r3, [sl]
 8000e0c:	89a3      	ldrh	r3, [r4, #12]
 8000e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e12:	81a3      	strh	r3, [r4, #12]
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	464a      	mov	r2, r9
 8000e1a:	6921      	ldr	r1, [r4, #16]
 8000e1c:	f000 face 	bl	80013bc <memcpy>
 8000e20:	89a3      	ldrh	r3, [r4, #12]
 8000e22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e2a:	81a3      	strh	r3, [r4, #12]
 8000e2c:	6126      	str	r6, [r4, #16]
 8000e2e:	444e      	add	r6, r9
 8000e30:	6026      	str	r6, [r4, #0]
 8000e32:	463e      	mov	r6, r7
 8000e34:	6165      	str	r5, [r4, #20]
 8000e36:	eba5 0509 	sub.w	r5, r5, r9
 8000e3a:	60a5      	str	r5, [r4, #8]
 8000e3c:	42be      	cmp	r6, r7
 8000e3e:	d900      	bls.n	8000e42 <__ssputs_r+0x86>
 8000e40:	463e      	mov	r6, r7
 8000e42:	4632      	mov	r2, r6
 8000e44:	4641      	mov	r1, r8
 8000e46:	6820      	ldr	r0, [r4, #0]
 8000e48:	f000 fac6 	bl	80013d8 <memmove>
 8000e4c:	68a3      	ldr	r3, [r4, #8]
 8000e4e:	2000      	movs	r0, #0
 8000e50:	1b9b      	subs	r3, r3, r6
 8000e52:	60a3      	str	r3, [r4, #8]
 8000e54:	6823      	ldr	r3, [r4, #0]
 8000e56:	4433      	add	r3, r6
 8000e58:	6023      	str	r3, [r4, #0]
 8000e5a:	e7db      	b.n	8000e14 <__ssputs_r+0x58>
 8000e5c:	462a      	mov	r2, r5
 8000e5e:	f000 fbb1 	bl	80015c4 <_realloc_r>
 8000e62:	4606      	mov	r6, r0
 8000e64:	2800      	cmp	r0, #0
 8000e66:	d1e1      	bne.n	8000e2c <__ssputs_r+0x70>
 8000e68:	4650      	mov	r0, sl
 8000e6a:	6921      	ldr	r1, [r4, #16]
 8000e6c:	f000 face 	bl	800140c <_free_r>
 8000e70:	e7c7      	b.n	8000e02 <__ssputs_r+0x46>
	...

08000e74 <_svfiprintf_r>:
 8000e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e78:	4698      	mov	r8, r3
 8000e7a:	898b      	ldrh	r3, [r1, #12]
 8000e7c:	4607      	mov	r7, r0
 8000e7e:	061b      	lsls	r3, r3, #24
 8000e80:	460d      	mov	r5, r1
 8000e82:	4614      	mov	r4, r2
 8000e84:	b09d      	sub	sp, #116	; 0x74
 8000e86:	d50e      	bpl.n	8000ea6 <_svfiprintf_r+0x32>
 8000e88:	690b      	ldr	r3, [r1, #16]
 8000e8a:	b963      	cbnz	r3, 8000ea6 <_svfiprintf_r+0x32>
 8000e8c:	2140      	movs	r1, #64	; 0x40
 8000e8e:	f000 fb25 	bl	80014dc <_malloc_r>
 8000e92:	6028      	str	r0, [r5, #0]
 8000e94:	6128      	str	r0, [r5, #16]
 8000e96:	b920      	cbnz	r0, 8000ea2 <_svfiprintf_r+0x2e>
 8000e98:	230c      	movs	r3, #12
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	e0d1      	b.n	8001046 <_svfiprintf_r+0x1d2>
 8000ea2:	2340      	movs	r3, #64	; 0x40
 8000ea4:	616b      	str	r3, [r5, #20]
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8000eaa:	2320      	movs	r3, #32
 8000eac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000eb0:	2330      	movs	r3, #48	; 0x30
 8000eb2:	f04f 0901 	mov.w	r9, #1
 8000eb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000eba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001060 <_svfiprintf_r+0x1ec>
 8000ebe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000ec2:	4623      	mov	r3, r4
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000eca:	b10a      	cbz	r2, 8000ed0 <_svfiprintf_r+0x5c>
 8000ecc:	2a25      	cmp	r2, #37	; 0x25
 8000ece:	d1f9      	bne.n	8000ec4 <_svfiprintf_r+0x50>
 8000ed0:	ebba 0b04 	subs.w	fp, sl, r4
 8000ed4:	d00b      	beq.n	8000eee <_svfiprintf_r+0x7a>
 8000ed6:	465b      	mov	r3, fp
 8000ed8:	4622      	mov	r2, r4
 8000eda:	4629      	mov	r1, r5
 8000edc:	4638      	mov	r0, r7
 8000ede:	f7ff ff6d 	bl	8000dbc <__ssputs_r>
 8000ee2:	3001      	adds	r0, #1
 8000ee4:	f000 80aa 	beq.w	800103c <_svfiprintf_r+0x1c8>
 8000ee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000eea:	445a      	add	r2, fp
 8000eec:	9209      	str	r2, [sp, #36]	; 0x24
 8000eee:	f89a 3000 	ldrb.w	r3, [sl]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 80a2 	beq.w	800103c <_svfiprintf_r+0x1c8>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f04f 32ff 	mov.w	r2, #4294967295
 8000efe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000f02:	f10a 0a01 	add.w	sl, sl, #1
 8000f06:	9304      	str	r3, [sp, #16]
 8000f08:	9307      	str	r3, [sp, #28]
 8000f0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000f0e:	931a      	str	r3, [sp, #104]	; 0x68
 8000f10:	4654      	mov	r4, sl
 8000f12:	2205      	movs	r2, #5
 8000f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f18:	4851      	ldr	r0, [pc, #324]	; (8001060 <_svfiprintf_r+0x1ec>)
 8000f1a:	f000 fa41 	bl	80013a0 <memchr>
 8000f1e:	9a04      	ldr	r2, [sp, #16]
 8000f20:	b9d8      	cbnz	r0, 8000f5a <_svfiprintf_r+0xe6>
 8000f22:	06d0      	lsls	r0, r2, #27
 8000f24:	bf44      	itt	mi
 8000f26:	2320      	movmi	r3, #32
 8000f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f2c:	0711      	lsls	r1, r2, #28
 8000f2e:	bf44      	itt	mi
 8000f30:	232b      	movmi	r3, #43	; 0x2b
 8000f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f36:	f89a 3000 	ldrb.w	r3, [sl]
 8000f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8000f3c:	d015      	beq.n	8000f6a <_svfiprintf_r+0xf6>
 8000f3e:	4654      	mov	r4, sl
 8000f40:	2000      	movs	r0, #0
 8000f42:	f04f 0c0a 	mov.w	ip, #10
 8000f46:	9a07      	ldr	r2, [sp, #28]
 8000f48:	4621      	mov	r1, r4
 8000f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f4e:	3b30      	subs	r3, #48	; 0x30
 8000f50:	2b09      	cmp	r3, #9
 8000f52:	d94e      	bls.n	8000ff2 <_svfiprintf_r+0x17e>
 8000f54:	b1b0      	cbz	r0, 8000f84 <_svfiprintf_r+0x110>
 8000f56:	9207      	str	r2, [sp, #28]
 8000f58:	e014      	b.n	8000f84 <_svfiprintf_r+0x110>
 8000f5a:	eba0 0308 	sub.w	r3, r0, r8
 8000f5e:	fa09 f303 	lsl.w	r3, r9, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	46a2      	mov	sl, r4
 8000f66:	9304      	str	r3, [sp, #16]
 8000f68:	e7d2      	b.n	8000f10 <_svfiprintf_r+0x9c>
 8000f6a:	9b03      	ldr	r3, [sp, #12]
 8000f6c:	1d19      	adds	r1, r3, #4
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	9103      	str	r1, [sp, #12]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	bfbb      	ittet	lt
 8000f76:	425b      	neglt	r3, r3
 8000f78:	f042 0202 	orrlt.w	r2, r2, #2
 8000f7c:	9307      	strge	r3, [sp, #28]
 8000f7e:	9307      	strlt	r3, [sp, #28]
 8000f80:	bfb8      	it	lt
 8000f82:	9204      	strlt	r2, [sp, #16]
 8000f84:	7823      	ldrb	r3, [r4, #0]
 8000f86:	2b2e      	cmp	r3, #46	; 0x2e
 8000f88:	d10c      	bne.n	8000fa4 <_svfiprintf_r+0x130>
 8000f8a:	7863      	ldrb	r3, [r4, #1]
 8000f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8000f8e:	d135      	bne.n	8000ffc <_svfiprintf_r+0x188>
 8000f90:	9b03      	ldr	r3, [sp, #12]
 8000f92:	3402      	adds	r4, #2
 8000f94:	1d1a      	adds	r2, r3, #4
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	9203      	str	r2, [sp, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	bfb8      	it	lt
 8000f9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000fa2:	9305      	str	r3, [sp, #20]
 8000fa4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001064 <_svfiprintf_r+0x1f0>
 8000fa8:	2203      	movs	r2, #3
 8000faa:	4650      	mov	r0, sl
 8000fac:	7821      	ldrb	r1, [r4, #0]
 8000fae:	f000 f9f7 	bl	80013a0 <memchr>
 8000fb2:	b140      	cbz	r0, 8000fc6 <_svfiprintf_r+0x152>
 8000fb4:	2340      	movs	r3, #64	; 0x40
 8000fb6:	eba0 000a 	sub.w	r0, r0, sl
 8000fba:	fa03 f000 	lsl.w	r0, r3, r0
 8000fbe:	9b04      	ldr	r3, [sp, #16]
 8000fc0:	3401      	adds	r4, #1
 8000fc2:	4303      	orrs	r3, r0
 8000fc4:	9304      	str	r3, [sp, #16]
 8000fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fca:	2206      	movs	r2, #6
 8000fcc:	4826      	ldr	r0, [pc, #152]	; (8001068 <_svfiprintf_r+0x1f4>)
 8000fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000fd2:	f000 f9e5 	bl	80013a0 <memchr>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	d038      	beq.n	800104c <_svfiprintf_r+0x1d8>
 8000fda:	4b24      	ldr	r3, [pc, #144]	; (800106c <_svfiprintf_r+0x1f8>)
 8000fdc:	bb1b      	cbnz	r3, 8001026 <_svfiprintf_r+0x1b2>
 8000fde:	9b03      	ldr	r3, [sp, #12]
 8000fe0:	3307      	adds	r3, #7
 8000fe2:	f023 0307 	bic.w	r3, r3, #7
 8000fe6:	3308      	adds	r3, #8
 8000fe8:	9303      	str	r3, [sp, #12]
 8000fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fec:	4433      	add	r3, r6
 8000fee:	9309      	str	r3, [sp, #36]	; 0x24
 8000ff0:	e767      	b.n	8000ec2 <_svfiprintf_r+0x4e>
 8000ff2:	460c      	mov	r4, r1
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ffa:	e7a5      	b.n	8000f48 <_svfiprintf_r+0xd4>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f04f 0c0a 	mov.w	ip, #10
 8001002:	4619      	mov	r1, r3
 8001004:	3401      	adds	r4, #1
 8001006:	9305      	str	r3, [sp, #20]
 8001008:	4620      	mov	r0, r4
 800100a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800100e:	3a30      	subs	r2, #48	; 0x30
 8001010:	2a09      	cmp	r2, #9
 8001012:	d903      	bls.n	800101c <_svfiprintf_r+0x1a8>
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0c5      	beq.n	8000fa4 <_svfiprintf_r+0x130>
 8001018:	9105      	str	r1, [sp, #20]
 800101a:	e7c3      	b.n	8000fa4 <_svfiprintf_r+0x130>
 800101c:	4604      	mov	r4, r0
 800101e:	2301      	movs	r3, #1
 8001020:	fb0c 2101 	mla	r1, ip, r1, r2
 8001024:	e7f0      	b.n	8001008 <_svfiprintf_r+0x194>
 8001026:	ab03      	add	r3, sp, #12
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	462a      	mov	r2, r5
 800102c:	4638      	mov	r0, r7
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <_svfiprintf_r+0x1fc>)
 8001030:	a904      	add	r1, sp, #16
 8001032:	f3af 8000 	nop.w
 8001036:	1c42      	adds	r2, r0, #1
 8001038:	4606      	mov	r6, r0
 800103a:	d1d6      	bne.n	8000fea <_svfiprintf_r+0x176>
 800103c:	89ab      	ldrh	r3, [r5, #12]
 800103e:	065b      	lsls	r3, r3, #25
 8001040:	f53f af2c 	bmi.w	8000e9c <_svfiprintf_r+0x28>
 8001044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001046:	b01d      	add	sp, #116	; 0x74
 8001048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800104c:	ab03      	add	r3, sp, #12
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	462a      	mov	r2, r5
 8001052:	4638      	mov	r0, r7
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <_svfiprintf_r+0x1fc>)
 8001056:	a904      	add	r1, sp, #16
 8001058:	f000 f87c 	bl	8001154 <_printf_i>
 800105c:	e7eb      	b.n	8001036 <_svfiprintf_r+0x1c2>
 800105e:	bf00      	nop
 8001060:	080016f3 	.word	0x080016f3
 8001064:	080016f9 	.word	0x080016f9
 8001068:	080016fd 	.word	0x080016fd
 800106c:	00000000 	.word	0x00000000
 8001070:	08000dbd 	.word	0x08000dbd

08001074 <_printf_common>:
 8001074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001078:	4616      	mov	r6, r2
 800107a:	4699      	mov	r9, r3
 800107c:	688a      	ldr	r2, [r1, #8]
 800107e:	690b      	ldr	r3, [r1, #16]
 8001080:	4607      	mov	r7, r0
 8001082:	4293      	cmp	r3, r2
 8001084:	bfb8      	it	lt
 8001086:	4613      	movlt	r3, r2
 8001088:	6033      	str	r3, [r6, #0]
 800108a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800108e:	460c      	mov	r4, r1
 8001090:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001094:	b10a      	cbz	r2, 800109a <_printf_common+0x26>
 8001096:	3301      	adds	r3, #1
 8001098:	6033      	str	r3, [r6, #0]
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	0699      	lsls	r1, r3, #26
 800109e:	bf42      	ittt	mi
 80010a0:	6833      	ldrmi	r3, [r6, #0]
 80010a2:	3302      	addmi	r3, #2
 80010a4:	6033      	strmi	r3, [r6, #0]
 80010a6:	6825      	ldr	r5, [r4, #0]
 80010a8:	f015 0506 	ands.w	r5, r5, #6
 80010ac:	d106      	bne.n	80010bc <_printf_common+0x48>
 80010ae:	f104 0a19 	add.w	sl, r4, #25
 80010b2:	68e3      	ldr	r3, [r4, #12]
 80010b4:	6832      	ldr	r2, [r6, #0]
 80010b6:	1a9b      	subs	r3, r3, r2
 80010b8:	42ab      	cmp	r3, r5
 80010ba:	dc28      	bgt.n	800110e <_printf_common+0x9a>
 80010bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80010c0:	1e13      	subs	r3, r2, #0
 80010c2:	6822      	ldr	r2, [r4, #0]
 80010c4:	bf18      	it	ne
 80010c6:	2301      	movne	r3, #1
 80010c8:	0692      	lsls	r2, r2, #26
 80010ca:	d42d      	bmi.n	8001128 <_printf_common+0xb4>
 80010cc:	4649      	mov	r1, r9
 80010ce:	4638      	mov	r0, r7
 80010d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80010d4:	47c0      	blx	r8
 80010d6:	3001      	adds	r0, #1
 80010d8:	d020      	beq.n	800111c <_printf_common+0xa8>
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	68e5      	ldr	r5, [r4, #12]
 80010de:	f003 0306 	and.w	r3, r3, #6
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf18      	it	ne
 80010e6:	2500      	movne	r5, #0
 80010e8:	6832      	ldr	r2, [r6, #0]
 80010ea:	f04f 0600 	mov.w	r6, #0
 80010ee:	68a3      	ldr	r3, [r4, #8]
 80010f0:	bf08      	it	eq
 80010f2:	1aad      	subeq	r5, r5, r2
 80010f4:	6922      	ldr	r2, [r4, #16]
 80010f6:	bf08      	it	eq
 80010f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80010fc:	4293      	cmp	r3, r2
 80010fe:	bfc4      	itt	gt
 8001100:	1a9b      	subgt	r3, r3, r2
 8001102:	18ed      	addgt	r5, r5, r3
 8001104:	341a      	adds	r4, #26
 8001106:	42b5      	cmp	r5, r6
 8001108:	d11a      	bne.n	8001140 <_printf_common+0xcc>
 800110a:	2000      	movs	r0, #0
 800110c:	e008      	b.n	8001120 <_printf_common+0xac>
 800110e:	2301      	movs	r3, #1
 8001110:	4652      	mov	r2, sl
 8001112:	4649      	mov	r1, r9
 8001114:	4638      	mov	r0, r7
 8001116:	47c0      	blx	r8
 8001118:	3001      	adds	r0, #1
 800111a:	d103      	bne.n	8001124 <_printf_common+0xb0>
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001124:	3501      	adds	r5, #1
 8001126:	e7c4      	b.n	80010b2 <_printf_common+0x3e>
 8001128:	2030      	movs	r0, #48	; 0x30
 800112a:	18e1      	adds	r1, r4, r3
 800112c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001136:	4422      	add	r2, r4
 8001138:	3302      	adds	r3, #2
 800113a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800113e:	e7c5      	b.n	80010cc <_printf_common+0x58>
 8001140:	2301      	movs	r3, #1
 8001142:	4622      	mov	r2, r4
 8001144:	4649      	mov	r1, r9
 8001146:	4638      	mov	r0, r7
 8001148:	47c0      	blx	r8
 800114a:	3001      	adds	r0, #1
 800114c:	d0e6      	beq.n	800111c <_printf_common+0xa8>
 800114e:	3601      	adds	r6, #1
 8001150:	e7d9      	b.n	8001106 <_printf_common+0x92>
	...

08001154 <_printf_i>:
 8001154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001158:	7e0f      	ldrb	r7, [r1, #24]
 800115a:	4691      	mov	r9, r2
 800115c:	2f78      	cmp	r7, #120	; 0x78
 800115e:	4680      	mov	r8, r0
 8001160:	460c      	mov	r4, r1
 8001162:	469a      	mov	sl, r3
 8001164:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001166:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800116a:	d807      	bhi.n	800117c <_printf_i+0x28>
 800116c:	2f62      	cmp	r7, #98	; 0x62
 800116e:	d80a      	bhi.n	8001186 <_printf_i+0x32>
 8001170:	2f00      	cmp	r7, #0
 8001172:	f000 80d9 	beq.w	8001328 <_printf_i+0x1d4>
 8001176:	2f58      	cmp	r7, #88	; 0x58
 8001178:	f000 80a4 	beq.w	80012c4 <_printf_i+0x170>
 800117c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001184:	e03a      	b.n	80011fc <_printf_i+0xa8>
 8001186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800118a:	2b15      	cmp	r3, #21
 800118c:	d8f6      	bhi.n	800117c <_printf_i+0x28>
 800118e:	a101      	add	r1, pc, #4	; (adr r1, 8001194 <_printf_i+0x40>)
 8001190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001194:	080011ed 	.word	0x080011ed
 8001198:	08001201 	.word	0x08001201
 800119c:	0800117d 	.word	0x0800117d
 80011a0:	0800117d 	.word	0x0800117d
 80011a4:	0800117d 	.word	0x0800117d
 80011a8:	0800117d 	.word	0x0800117d
 80011ac:	08001201 	.word	0x08001201
 80011b0:	0800117d 	.word	0x0800117d
 80011b4:	0800117d 	.word	0x0800117d
 80011b8:	0800117d 	.word	0x0800117d
 80011bc:	0800117d 	.word	0x0800117d
 80011c0:	0800130f 	.word	0x0800130f
 80011c4:	08001231 	.word	0x08001231
 80011c8:	080012f1 	.word	0x080012f1
 80011cc:	0800117d 	.word	0x0800117d
 80011d0:	0800117d 	.word	0x0800117d
 80011d4:	08001331 	.word	0x08001331
 80011d8:	0800117d 	.word	0x0800117d
 80011dc:	08001231 	.word	0x08001231
 80011e0:	0800117d 	.word	0x0800117d
 80011e4:	0800117d 	.word	0x0800117d
 80011e8:	080012f9 	.word	0x080012f9
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	1d1a      	adds	r2, r3, #4
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	602a      	str	r2, [r5, #0]
 80011f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80011f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80011fc:	2301      	movs	r3, #1
 80011fe:	e0a4      	b.n	800134a <_printf_i+0x1f6>
 8001200:	6820      	ldr	r0, [r4, #0]
 8001202:	6829      	ldr	r1, [r5, #0]
 8001204:	0606      	lsls	r6, r0, #24
 8001206:	f101 0304 	add.w	r3, r1, #4
 800120a:	d50a      	bpl.n	8001222 <_printf_i+0xce>
 800120c:	680e      	ldr	r6, [r1, #0]
 800120e:	602b      	str	r3, [r5, #0]
 8001210:	2e00      	cmp	r6, #0
 8001212:	da03      	bge.n	800121c <_printf_i+0xc8>
 8001214:	232d      	movs	r3, #45	; 0x2d
 8001216:	4276      	negs	r6, r6
 8001218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800121c:	230a      	movs	r3, #10
 800121e:	485e      	ldr	r0, [pc, #376]	; (8001398 <_printf_i+0x244>)
 8001220:	e019      	b.n	8001256 <_printf_i+0x102>
 8001222:	680e      	ldr	r6, [r1, #0]
 8001224:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001228:	602b      	str	r3, [r5, #0]
 800122a:	bf18      	it	ne
 800122c:	b236      	sxthne	r6, r6
 800122e:	e7ef      	b.n	8001210 <_printf_i+0xbc>
 8001230:	682b      	ldr	r3, [r5, #0]
 8001232:	6820      	ldr	r0, [r4, #0]
 8001234:	1d19      	adds	r1, r3, #4
 8001236:	6029      	str	r1, [r5, #0]
 8001238:	0601      	lsls	r1, r0, #24
 800123a:	d501      	bpl.n	8001240 <_printf_i+0xec>
 800123c:	681e      	ldr	r6, [r3, #0]
 800123e:	e002      	b.n	8001246 <_printf_i+0xf2>
 8001240:	0646      	lsls	r6, r0, #25
 8001242:	d5fb      	bpl.n	800123c <_printf_i+0xe8>
 8001244:	881e      	ldrh	r6, [r3, #0]
 8001246:	2f6f      	cmp	r7, #111	; 0x6f
 8001248:	bf0c      	ite	eq
 800124a:	2308      	moveq	r3, #8
 800124c:	230a      	movne	r3, #10
 800124e:	4852      	ldr	r0, [pc, #328]	; (8001398 <_printf_i+0x244>)
 8001250:	2100      	movs	r1, #0
 8001252:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001256:	6865      	ldr	r5, [r4, #4]
 8001258:	2d00      	cmp	r5, #0
 800125a:	bfa8      	it	ge
 800125c:	6821      	ldrge	r1, [r4, #0]
 800125e:	60a5      	str	r5, [r4, #8]
 8001260:	bfa4      	itt	ge
 8001262:	f021 0104 	bicge.w	r1, r1, #4
 8001266:	6021      	strge	r1, [r4, #0]
 8001268:	b90e      	cbnz	r6, 800126e <_printf_i+0x11a>
 800126a:	2d00      	cmp	r5, #0
 800126c:	d04d      	beq.n	800130a <_printf_i+0x1b6>
 800126e:	4615      	mov	r5, r2
 8001270:	fbb6 f1f3 	udiv	r1, r6, r3
 8001274:	fb03 6711 	mls	r7, r3, r1, r6
 8001278:	5dc7      	ldrb	r7, [r0, r7]
 800127a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800127e:	4637      	mov	r7, r6
 8001280:	42bb      	cmp	r3, r7
 8001282:	460e      	mov	r6, r1
 8001284:	d9f4      	bls.n	8001270 <_printf_i+0x11c>
 8001286:	2b08      	cmp	r3, #8
 8001288:	d10b      	bne.n	80012a2 <_printf_i+0x14e>
 800128a:	6823      	ldr	r3, [r4, #0]
 800128c:	07de      	lsls	r6, r3, #31
 800128e:	d508      	bpl.n	80012a2 <_printf_i+0x14e>
 8001290:	6923      	ldr	r3, [r4, #16]
 8001292:	6861      	ldr	r1, [r4, #4]
 8001294:	4299      	cmp	r1, r3
 8001296:	bfde      	ittt	le
 8001298:	2330      	movle	r3, #48	; 0x30
 800129a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800129e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80012a2:	1b52      	subs	r2, r2, r5
 80012a4:	6122      	str	r2, [r4, #16]
 80012a6:	464b      	mov	r3, r9
 80012a8:	4621      	mov	r1, r4
 80012aa:	4640      	mov	r0, r8
 80012ac:	f8cd a000 	str.w	sl, [sp]
 80012b0:	aa03      	add	r2, sp, #12
 80012b2:	f7ff fedf 	bl	8001074 <_printf_common>
 80012b6:	3001      	adds	r0, #1
 80012b8:	d14c      	bne.n	8001354 <_printf_i+0x200>
 80012ba:	f04f 30ff 	mov.w	r0, #4294967295
 80012be:	b004      	add	sp, #16
 80012c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012c4:	4834      	ldr	r0, [pc, #208]	; (8001398 <_printf_i+0x244>)
 80012c6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80012ca:	6829      	ldr	r1, [r5, #0]
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80012d2:	6029      	str	r1, [r5, #0]
 80012d4:	061d      	lsls	r5, r3, #24
 80012d6:	d514      	bpl.n	8001302 <_printf_i+0x1ae>
 80012d8:	07df      	lsls	r7, r3, #31
 80012da:	bf44      	itt	mi
 80012dc:	f043 0320 	orrmi.w	r3, r3, #32
 80012e0:	6023      	strmi	r3, [r4, #0]
 80012e2:	b91e      	cbnz	r6, 80012ec <_printf_i+0x198>
 80012e4:	6823      	ldr	r3, [r4, #0]
 80012e6:	f023 0320 	bic.w	r3, r3, #32
 80012ea:	6023      	str	r3, [r4, #0]
 80012ec:	2310      	movs	r3, #16
 80012ee:	e7af      	b.n	8001250 <_printf_i+0xfc>
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	f043 0320 	orr.w	r3, r3, #32
 80012f6:	6023      	str	r3, [r4, #0]
 80012f8:	2378      	movs	r3, #120	; 0x78
 80012fa:	4828      	ldr	r0, [pc, #160]	; (800139c <_printf_i+0x248>)
 80012fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001300:	e7e3      	b.n	80012ca <_printf_i+0x176>
 8001302:	0659      	lsls	r1, r3, #25
 8001304:	bf48      	it	mi
 8001306:	b2b6      	uxthmi	r6, r6
 8001308:	e7e6      	b.n	80012d8 <_printf_i+0x184>
 800130a:	4615      	mov	r5, r2
 800130c:	e7bb      	b.n	8001286 <_printf_i+0x132>
 800130e:	682b      	ldr	r3, [r5, #0]
 8001310:	6826      	ldr	r6, [r4, #0]
 8001312:	1d18      	adds	r0, r3, #4
 8001314:	6961      	ldr	r1, [r4, #20]
 8001316:	6028      	str	r0, [r5, #0]
 8001318:	0635      	lsls	r5, r6, #24
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	d501      	bpl.n	8001322 <_printf_i+0x1ce>
 800131e:	6019      	str	r1, [r3, #0]
 8001320:	e002      	b.n	8001328 <_printf_i+0x1d4>
 8001322:	0670      	lsls	r0, r6, #25
 8001324:	d5fb      	bpl.n	800131e <_printf_i+0x1ca>
 8001326:	8019      	strh	r1, [r3, #0]
 8001328:	2300      	movs	r3, #0
 800132a:	4615      	mov	r5, r2
 800132c:	6123      	str	r3, [r4, #16]
 800132e:	e7ba      	b.n	80012a6 <_printf_i+0x152>
 8001330:	682b      	ldr	r3, [r5, #0]
 8001332:	2100      	movs	r1, #0
 8001334:	1d1a      	adds	r2, r3, #4
 8001336:	602a      	str	r2, [r5, #0]
 8001338:	681d      	ldr	r5, [r3, #0]
 800133a:	6862      	ldr	r2, [r4, #4]
 800133c:	4628      	mov	r0, r5
 800133e:	f000 f82f 	bl	80013a0 <memchr>
 8001342:	b108      	cbz	r0, 8001348 <_printf_i+0x1f4>
 8001344:	1b40      	subs	r0, r0, r5
 8001346:	6060      	str	r0, [r4, #4]
 8001348:	6863      	ldr	r3, [r4, #4]
 800134a:	6123      	str	r3, [r4, #16]
 800134c:	2300      	movs	r3, #0
 800134e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001352:	e7a8      	b.n	80012a6 <_printf_i+0x152>
 8001354:	462a      	mov	r2, r5
 8001356:	4649      	mov	r1, r9
 8001358:	4640      	mov	r0, r8
 800135a:	6923      	ldr	r3, [r4, #16]
 800135c:	47d0      	blx	sl
 800135e:	3001      	adds	r0, #1
 8001360:	d0ab      	beq.n	80012ba <_printf_i+0x166>
 8001362:	6823      	ldr	r3, [r4, #0]
 8001364:	079b      	lsls	r3, r3, #30
 8001366:	d413      	bmi.n	8001390 <_printf_i+0x23c>
 8001368:	68e0      	ldr	r0, [r4, #12]
 800136a:	9b03      	ldr	r3, [sp, #12]
 800136c:	4298      	cmp	r0, r3
 800136e:	bfb8      	it	lt
 8001370:	4618      	movlt	r0, r3
 8001372:	e7a4      	b.n	80012be <_printf_i+0x16a>
 8001374:	2301      	movs	r3, #1
 8001376:	4632      	mov	r2, r6
 8001378:	4649      	mov	r1, r9
 800137a:	4640      	mov	r0, r8
 800137c:	47d0      	blx	sl
 800137e:	3001      	adds	r0, #1
 8001380:	d09b      	beq.n	80012ba <_printf_i+0x166>
 8001382:	3501      	adds	r5, #1
 8001384:	68e3      	ldr	r3, [r4, #12]
 8001386:	9903      	ldr	r1, [sp, #12]
 8001388:	1a5b      	subs	r3, r3, r1
 800138a:	42ab      	cmp	r3, r5
 800138c:	dcf2      	bgt.n	8001374 <_printf_i+0x220>
 800138e:	e7eb      	b.n	8001368 <_printf_i+0x214>
 8001390:	2500      	movs	r5, #0
 8001392:	f104 0619 	add.w	r6, r4, #25
 8001396:	e7f5      	b.n	8001384 <_printf_i+0x230>
 8001398:	08001704 	.word	0x08001704
 800139c:	08001715 	.word	0x08001715

080013a0 <memchr>:
 80013a0:	4603      	mov	r3, r0
 80013a2:	b510      	push	{r4, lr}
 80013a4:	b2c9      	uxtb	r1, r1
 80013a6:	4402      	add	r2, r0
 80013a8:	4293      	cmp	r3, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	d101      	bne.n	80013b2 <memchr+0x12>
 80013ae:	2000      	movs	r0, #0
 80013b0:	e003      	b.n	80013ba <memchr+0x1a>
 80013b2:	7804      	ldrb	r4, [r0, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	428c      	cmp	r4, r1
 80013b8:	d1f6      	bne.n	80013a8 <memchr+0x8>
 80013ba:	bd10      	pop	{r4, pc}

080013bc <memcpy>:
 80013bc:	440a      	add	r2, r1
 80013be:	4291      	cmp	r1, r2
 80013c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80013c4:	d100      	bne.n	80013c8 <memcpy+0xc>
 80013c6:	4770      	bx	lr
 80013c8:	b510      	push	{r4, lr}
 80013ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80013ce:	4291      	cmp	r1, r2
 80013d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80013d4:	d1f9      	bne.n	80013ca <memcpy+0xe>
 80013d6:	bd10      	pop	{r4, pc}

080013d8 <memmove>:
 80013d8:	4288      	cmp	r0, r1
 80013da:	b510      	push	{r4, lr}
 80013dc:	eb01 0402 	add.w	r4, r1, r2
 80013e0:	d902      	bls.n	80013e8 <memmove+0x10>
 80013e2:	4284      	cmp	r4, r0
 80013e4:	4623      	mov	r3, r4
 80013e6:	d807      	bhi.n	80013f8 <memmove+0x20>
 80013e8:	1e43      	subs	r3, r0, #1
 80013ea:	42a1      	cmp	r1, r4
 80013ec:	d008      	beq.n	8001400 <memmove+0x28>
 80013ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80013f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80013f6:	e7f8      	b.n	80013ea <memmove+0x12>
 80013f8:	4601      	mov	r1, r0
 80013fa:	4402      	add	r2, r0
 80013fc:	428a      	cmp	r2, r1
 80013fe:	d100      	bne.n	8001402 <memmove+0x2a>
 8001400:	bd10      	pop	{r4, pc}
 8001402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001406:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800140a:	e7f7      	b.n	80013fc <memmove+0x24>

0800140c <_free_r>:
 800140c:	b538      	push	{r3, r4, r5, lr}
 800140e:	4605      	mov	r5, r0
 8001410:	2900      	cmp	r1, #0
 8001412:	d040      	beq.n	8001496 <_free_r+0x8a>
 8001414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001418:	1f0c      	subs	r4, r1, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	bfb8      	it	lt
 800141e:	18e4      	addlt	r4, r4, r3
 8001420:	f000 f910 	bl	8001644 <__malloc_lock>
 8001424:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <_free_r+0x8c>)
 8001426:	6813      	ldr	r3, [r2, #0]
 8001428:	b933      	cbnz	r3, 8001438 <_free_r+0x2c>
 800142a:	6063      	str	r3, [r4, #4]
 800142c:	6014      	str	r4, [r2, #0]
 800142e:	4628      	mov	r0, r5
 8001430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001434:	f000 b90c 	b.w	8001650 <__malloc_unlock>
 8001438:	42a3      	cmp	r3, r4
 800143a:	d908      	bls.n	800144e <_free_r+0x42>
 800143c:	6820      	ldr	r0, [r4, #0]
 800143e:	1821      	adds	r1, r4, r0
 8001440:	428b      	cmp	r3, r1
 8001442:	bf01      	itttt	eq
 8001444:	6819      	ldreq	r1, [r3, #0]
 8001446:	685b      	ldreq	r3, [r3, #4]
 8001448:	1809      	addeq	r1, r1, r0
 800144a:	6021      	streq	r1, [r4, #0]
 800144c:	e7ed      	b.n	800142a <_free_r+0x1e>
 800144e:	461a      	mov	r2, r3
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	b10b      	cbz	r3, 8001458 <_free_r+0x4c>
 8001454:	42a3      	cmp	r3, r4
 8001456:	d9fa      	bls.n	800144e <_free_r+0x42>
 8001458:	6811      	ldr	r1, [r2, #0]
 800145a:	1850      	adds	r0, r2, r1
 800145c:	42a0      	cmp	r0, r4
 800145e:	d10b      	bne.n	8001478 <_free_r+0x6c>
 8001460:	6820      	ldr	r0, [r4, #0]
 8001462:	4401      	add	r1, r0
 8001464:	1850      	adds	r0, r2, r1
 8001466:	4283      	cmp	r3, r0
 8001468:	6011      	str	r1, [r2, #0]
 800146a:	d1e0      	bne.n	800142e <_free_r+0x22>
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4401      	add	r1, r0
 8001472:	6011      	str	r1, [r2, #0]
 8001474:	6053      	str	r3, [r2, #4]
 8001476:	e7da      	b.n	800142e <_free_r+0x22>
 8001478:	d902      	bls.n	8001480 <_free_r+0x74>
 800147a:	230c      	movs	r3, #12
 800147c:	602b      	str	r3, [r5, #0]
 800147e:	e7d6      	b.n	800142e <_free_r+0x22>
 8001480:	6820      	ldr	r0, [r4, #0]
 8001482:	1821      	adds	r1, r4, r0
 8001484:	428b      	cmp	r3, r1
 8001486:	bf01      	itttt	eq
 8001488:	6819      	ldreq	r1, [r3, #0]
 800148a:	685b      	ldreq	r3, [r3, #4]
 800148c:	1809      	addeq	r1, r1, r0
 800148e:	6021      	streq	r1, [r4, #0]
 8001490:	6063      	str	r3, [r4, #4]
 8001492:	6054      	str	r4, [r2, #4]
 8001494:	e7cb      	b.n	800142e <_free_r+0x22>
 8001496:	bd38      	pop	{r3, r4, r5, pc}
 8001498:	20000104 	.word	0x20000104

0800149c <sbrk_aligned>:
 800149c:	b570      	push	{r4, r5, r6, lr}
 800149e:	4e0e      	ldr	r6, [pc, #56]	; (80014d8 <sbrk_aligned+0x3c>)
 80014a0:	460c      	mov	r4, r1
 80014a2:	6831      	ldr	r1, [r6, #0]
 80014a4:	4605      	mov	r5, r0
 80014a6:	b911      	cbnz	r1, 80014ae <sbrk_aligned+0x12>
 80014a8:	f000 f8bc 	bl	8001624 <_sbrk_r>
 80014ac:	6030      	str	r0, [r6, #0]
 80014ae:	4621      	mov	r1, r4
 80014b0:	4628      	mov	r0, r5
 80014b2:	f000 f8b7 	bl	8001624 <_sbrk_r>
 80014b6:	1c43      	adds	r3, r0, #1
 80014b8:	d00a      	beq.n	80014d0 <sbrk_aligned+0x34>
 80014ba:	1cc4      	adds	r4, r0, #3
 80014bc:	f024 0403 	bic.w	r4, r4, #3
 80014c0:	42a0      	cmp	r0, r4
 80014c2:	d007      	beq.n	80014d4 <sbrk_aligned+0x38>
 80014c4:	1a21      	subs	r1, r4, r0
 80014c6:	4628      	mov	r0, r5
 80014c8:	f000 f8ac 	bl	8001624 <_sbrk_r>
 80014cc:	3001      	adds	r0, #1
 80014ce:	d101      	bne.n	80014d4 <sbrk_aligned+0x38>
 80014d0:	f04f 34ff 	mov.w	r4, #4294967295
 80014d4:	4620      	mov	r0, r4
 80014d6:	bd70      	pop	{r4, r5, r6, pc}
 80014d8:	20000108 	.word	0x20000108

080014dc <_malloc_r>:
 80014dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014e0:	1ccd      	adds	r5, r1, #3
 80014e2:	f025 0503 	bic.w	r5, r5, #3
 80014e6:	3508      	adds	r5, #8
 80014e8:	2d0c      	cmp	r5, #12
 80014ea:	bf38      	it	cc
 80014ec:	250c      	movcc	r5, #12
 80014ee:	2d00      	cmp	r5, #0
 80014f0:	4607      	mov	r7, r0
 80014f2:	db01      	blt.n	80014f8 <_malloc_r+0x1c>
 80014f4:	42a9      	cmp	r1, r5
 80014f6:	d905      	bls.n	8001504 <_malloc_r+0x28>
 80014f8:	230c      	movs	r3, #12
 80014fa:	2600      	movs	r6, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4630      	mov	r0, r6
 8001500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001504:	4e2e      	ldr	r6, [pc, #184]	; (80015c0 <_malloc_r+0xe4>)
 8001506:	f000 f89d 	bl	8001644 <__malloc_lock>
 800150a:	6833      	ldr	r3, [r6, #0]
 800150c:	461c      	mov	r4, r3
 800150e:	bb34      	cbnz	r4, 800155e <_malloc_r+0x82>
 8001510:	4629      	mov	r1, r5
 8001512:	4638      	mov	r0, r7
 8001514:	f7ff ffc2 	bl	800149c <sbrk_aligned>
 8001518:	1c43      	adds	r3, r0, #1
 800151a:	4604      	mov	r4, r0
 800151c:	d14d      	bne.n	80015ba <_malloc_r+0xde>
 800151e:	6834      	ldr	r4, [r6, #0]
 8001520:	4626      	mov	r6, r4
 8001522:	2e00      	cmp	r6, #0
 8001524:	d140      	bne.n	80015a8 <_malloc_r+0xcc>
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	4631      	mov	r1, r6
 800152a:	4638      	mov	r0, r7
 800152c:	eb04 0803 	add.w	r8, r4, r3
 8001530:	f000 f878 	bl	8001624 <_sbrk_r>
 8001534:	4580      	cmp	r8, r0
 8001536:	d13a      	bne.n	80015ae <_malloc_r+0xd2>
 8001538:	6821      	ldr	r1, [r4, #0]
 800153a:	3503      	adds	r5, #3
 800153c:	1a6d      	subs	r5, r5, r1
 800153e:	f025 0503 	bic.w	r5, r5, #3
 8001542:	3508      	adds	r5, #8
 8001544:	2d0c      	cmp	r5, #12
 8001546:	bf38      	it	cc
 8001548:	250c      	movcc	r5, #12
 800154a:	4638      	mov	r0, r7
 800154c:	4629      	mov	r1, r5
 800154e:	f7ff ffa5 	bl	800149c <sbrk_aligned>
 8001552:	3001      	adds	r0, #1
 8001554:	d02b      	beq.n	80015ae <_malloc_r+0xd2>
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	442b      	add	r3, r5
 800155a:	6023      	str	r3, [r4, #0]
 800155c:	e00e      	b.n	800157c <_malloc_r+0xa0>
 800155e:	6822      	ldr	r2, [r4, #0]
 8001560:	1b52      	subs	r2, r2, r5
 8001562:	d41e      	bmi.n	80015a2 <_malloc_r+0xc6>
 8001564:	2a0b      	cmp	r2, #11
 8001566:	d916      	bls.n	8001596 <_malloc_r+0xba>
 8001568:	1961      	adds	r1, r4, r5
 800156a:	42a3      	cmp	r3, r4
 800156c:	6025      	str	r5, [r4, #0]
 800156e:	bf18      	it	ne
 8001570:	6059      	strne	r1, [r3, #4]
 8001572:	6863      	ldr	r3, [r4, #4]
 8001574:	bf08      	it	eq
 8001576:	6031      	streq	r1, [r6, #0]
 8001578:	5162      	str	r2, [r4, r5]
 800157a:	604b      	str	r3, [r1, #4]
 800157c:	4638      	mov	r0, r7
 800157e:	f104 060b 	add.w	r6, r4, #11
 8001582:	f000 f865 	bl	8001650 <__malloc_unlock>
 8001586:	f026 0607 	bic.w	r6, r6, #7
 800158a:	1d23      	adds	r3, r4, #4
 800158c:	1af2      	subs	r2, r6, r3
 800158e:	d0b6      	beq.n	80014fe <_malloc_r+0x22>
 8001590:	1b9b      	subs	r3, r3, r6
 8001592:	50a3      	str	r3, [r4, r2]
 8001594:	e7b3      	b.n	80014fe <_malloc_r+0x22>
 8001596:	6862      	ldr	r2, [r4, #4]
 8001598:	42a3      	cmp	r3, r4
 800159a:	bf0c      	ite	eq
 800159c:	6032      	streq	r2, [r6, #0]
 800159e:	605a      	strne	r2, [r3, #4]
 80015a0:	e7ec      	b.n	800157c <_malloc_r+0xa0>
 80015a2:	4623      	mov	r3, r4
 80015a4:	6864      	ldr	r4, [r4, #4]
 80015a6:	e7b2      	b.n	800150e <_malloc_r+0x32>
 80015a8:	4634      	mov	r4, r6
 80015aa:	6876      	ldr	r6, [r6, #4]
 80015ac:	e7b9      	b.n	8001522 <_malloc_r+0x46>
 80015ae:	230c      	movs	r3, #12
 80015b0:	4638      	mov	r0, r7
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	f000 f84c 	bl	8001650 <__malloc_unlock>
 80015b8:	e7a1      	b.n	80014fe <_malloc_r+0x22>
 80015ba:	6025      	str	r5, [r4, #0]
 80015bc:	e7de      	b.n	800157c <_malloc_r+0xa0>
 80015be:	bf00      	nop
 80015c0:	20000104 	.word	0x20000104

080015c4 <_realloc_r>:
 80015c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015c8:	4680      	mov	r8, r0
 80015ca:	4614      	mov	r4, r2
 80015cc:	460e      	mov	r6, r1
 80015ce:	b921      	cbnz	r1, 80015da <_realloc_r+0x16>
 80015d0:	4611      	mov	r1, r2
 80015d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80015d6:	f7ff bf81 	b.w	80014dc <_malloc_r>
 80015da:	b92a      	cbnz	r2, 80015e8 <_realloc_r+0x24>
 80015dc:	f7ff ff16 	bl	800140c <_free_r>
 80015e0:	4625      	mov	r5, r4
 80015e2:	4628      	mov	r0, r5
 80015e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015e8:	f000 f838 	bl	800165c <_malloc_usable_size_r>
 80015ec:	4284      	cmp	r4, r0
 80015ee:	4607      	mov	r7, r0
 80015f0:	d802      	bhi.n	80015f8 <_realloc_r+0x34>
 80015f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80015f6:	d812      	bhi.n	800161e <_realloc_r+0x5a>
 80015f8:	4621      	mov	r1, r4
 80015fa:	4640      	mov	r0, r8
 80015fc:	f7ff ff6e 	bl	80014dc <_malloc_r>
 8001600:	4605      	mov	r5, r0
 8001602:	2800      	cmp	r0, #0
 8001604:	d0ed      	beq.n	80015e2 <_realloc_r+0x1e>
 8001606:	42bc      	cmp	r4, r7
 8001608:	4622      	mov	r2, r4
 800160a:	4631      	mov	r1, r6
 800160c:	bf28      	it	cs
 800160e:	463a      	movcs	r2, r7
 8001610:	f7ff fed4 	bl	80013bc <memcpy>
 8001614:	4631      	mov	r1, r6
 8001616:	4640      	mov	r0, r8
 8001618:	f7ff fef8 	bl	800140c <_free_r>
 800161c:	e7e1      	b.n	80015e2 <_realloc_r+0x1e>
 800161e:	4635      	mov	r5, r6
 8001620:	e7df      	b.n	80015e2 <_realloc_r+0x1e>
	...

08001624 <_sbrk_r>:
 8001624:	b538      	push	{r3, r4, r5, lr}
 8001626:	2300      	movs	r3, #0
 8001628:	4d05      	ldr	r5, [pc, #20]	; (8001640 <_sbrk_r+0x1c>)
 800162a:	4604      	mov	r4, r0
 800162c:	4608      	mov	r0, r1
 800162e:	602b      	str	r3, [r5, #0]
 8001630:	f7fe ff08 	bl	8000444 <_sbrk>
 8001634:	1c43      	adds	r3, r0, #1
 8001636:	d102      	bne.n	800163e <_sbrk_r+0x1a>
 8001638:	682b      	ldr	r3, [r5, #0]
 800163a:	b103      	cbz	r3, 800163e <_sbrk_r+0x1a>
 800163c:	6023      	str	r3, [r4, #0]
 800163e:	bd38      	pop	{r3, r4, r5, pc}
 8001640:	2000010c 	.word	0x2000010c

08001644 <__malloc_lock>:
 8001644:	4801      	ldr	r0, [pc, #4]	; (800164c <__malloc_lock+0x8>)
 8001646:	f000 b811 	b.w	800166c <__retarget_lock_acquire_recursive>
 800164a:	bf00      	nop
 800164c:	20000110 	.word	0x20000110

08001650 <__malloc_unlock>:
 8001650:	4801      	ldr	r0, [pc, #4]	; (8001658 <__malloc_unlock+0x8>)
 8001652:	f000 b80c 	b.w	800166e <__retarget_lock_release_recursive>
 8001656:	bf00      	nop
 8001658:	20000110 	.word	0x20000110

0800165c <_malloc_usable_size_r>:
 800165c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001660:	1f18      	subs	r0, r3, #4
 8001662:	2b00      	cmp	r3, #0
 8001664:	bfbc      	itt	lt
 8001666:	580b      	ldrlt	r3, [r1, r0]
 8001668:	18c0      	addlt	r0, r0, r3
 800166a:	4770      	bx	lr

0800166c <__retarget_lock_acquire_recursive>:
 800166c:	4770      	bx	lr

0800166e <__retarget_lock_release_recursive>:
 800166e:	4770      	bx	lr

08001670 <_init>:
 8001670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001672:	bf00      	nop
 8001674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001676:	bc08      	pop	{r3}
 8001678:	469e      	mov	lr, r3
 800167a:	4770      	bx	lr

0800167c <_fini>:
 800167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800167e:	bf00      	nop
 8001680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001682:	bc08      	pop	{r3}
 8001684:	469e      	mov	lr, r3
 8001686:	4770      	bx	lr
