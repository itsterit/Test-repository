
Metal_Detector_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000454  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000584  0800058c  0001058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000584  08000584  0001058c  2**0
                  CONTENTS
  4 .ARM          00000000  08000584  08000584  0001058c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000584  0800058c  0001058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000584  08000584  00010584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000588  08000588  00010588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800058c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800058c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001058c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000dd1  00000000  00000000  000105b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000050f  00000000  00000000  00011386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00011898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  00011958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011e68  00000000  00000000  00011a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000147b  00000000  00000000  00023878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058ffb  00000000  00000000  00024cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007dcee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001c0  00000000  00000000  0007dd40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800056c 	.word	0x0800056c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800056c 	.word	0x0800056c

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	; (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <_Z16ADC1_IN9_PB1_iniv>:
#include <string.h>
#include "stm32f1xx.h"
#include "main.h"

void ADC1_IN9_PB1_ini()
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
  // Input mode
  GPIOB->CRL &= ~GPIO_CRL_MODE1;
 80001ae:	4b43      	ldr	r3, [pc, #268]	; (80002bc <_Z16ADC1_IN9_PB1_iniv+0x114>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a42      	ldr	r2, [pc, #264]	; (80002bc <_Z16ADC1_IN9_PB1_iniv+0x114>)
 80001b4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80001b8:	6013      	str	r3, [r2, #0]
  GPIOB->CRL |= (0b00 << GPIO_CRL_MODE1_Pos); 
 80001ba:	4b40      	ldr	r3, [pc, #256]	; (80002bc <_Z16ADC1_IN9_PB1_iniv+0x114>)
 80001bc:	4a3f      	ldr	r2, [pc, #252]	; (80002bc <_Z16ADC1_IN9_PB1_iniv+0x114>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	6013      	str	r3, [r2, #0]
  // In input mode - Analog mode
  GPIOB->CRL &= ~GPIO_CRL_CNF1;
 80001c2:	4b3e      	ldr	r3, [pc, #248]	; (80002bc <_Z16ADC1_IN9_PB1_iniv+0x114>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a3d      	ldr	r2, [pc, #244]	; (80002bc <_Z16ADC1_IN9_PB1_iniv+0x114>)
 80001c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001cc:	6013      	str	r3, [r2, #0]
  GPIOB->CRL |= (0b00 << GPIO_CRL_CNF1_Pos);  
 80001ce:	4b3b      	ldr	r3, [pc, #236]	; (80002bc <_Z16ADC1_IN9_PB1_iniv+0x114>)
 80001d0:	4a3a      	ldr	r2, [pc, #232]	; (80002bc <_Z16ADC1_IN9_PB1_iniv+0x114>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	6013      	str	r3, [r2, #0]
  // Тактирование порта B
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;     
 80001d6:	4b3a      	ldr	r3, [pc, #232]	; (80002c0 <_Z16ADC1_IN9_PB1_iniv+0x118>)
 80001d8:	699b      	ldr	r3, [r3, #24]
 80001da:	4a39      	ldr	r2, [pc, #228]	; (80002c0 <_Z16ADC1_IN9_PB1_iniv+0x118>)
 80001dc:	f043 0308 	orr.w	r3, r3, #8
 80001e0:	6193      	str	r3, [r2, #24]

  // Тактирование АЦП 1
  RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;         
 80001e2:	4b37      	ldr	r3, [pc, #220]	; (80002c0 <_Z16ADC1_IN9_PB1_iniv+0x118>)
 80001e4:	699b      	ldr	r3, [r3, #24]
 80001e6:	4a36      	ldr	r2, [pc, #216]	; (80002c0 <_Z16ADC1_IN9_PB1_iniv+0x118>)
 80001e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001ec:	6193      	str	r3, [r2, #24]
  ADC1->CR2 |= ADC_CR2_ADON; 
 80001ee:	4b35      	ldr	r3, [pc, #212]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 80001f0:	689b      	ldr	r3, [r3, #8]
 80001f2:	4a34      	ldr	r2, [pc, #208]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 80001f4:	f043 0301 	orr.w	r3, r3, #1
 80001f8:	6093      	str	r3, [r2, #8]

  ADC1->SR = 0x00;
 80001fa:	4b32      	ldr	r3, [pc, #200]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]

  // 1.5 cycles
  ADC1->SMPR2 &= ~ADC_SMPR2_SMP9; 
 8000200:	4b30      	ldr	r3, [pc, #192]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000202:	691b      	ldr	r3, [r3, #16]
 8000204:	4a2f      	ldr	r2, [pc, #188]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000206:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800020a:	6113      	str	r3, [r2, #16]
  ADC1->SMPR2 |= (0b000 << ADC_SMPR2_SMP9_Pos); 
 800020c:	4b2d      	ldr	r3, [pc, #180]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 800020e:	4a2d      	ldr	r2, [pc, #180]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000210:	691b      	ldr	r3, [r3, #16]
 8000212:	6113      	str	r3, [r2, #16]
  
  // 1 conversion
  ADC1->SQR1 &= ~ADC_SQR1_L;
 8000214:	4b2b      	ldr	r3, [pc, #172]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000218:	4a2a      	ldr	r2, [pc, #168]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 800021a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800021e:	62d3      	str	r3, [r2, #44]	; 0x2c
  ADC1->SQR1 |= (0b0000 << ADC_SQR1_L_Pos);     
 8000220:	4b28      	ldr	r3, [pc, #160]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000222:	4a28      	ldr	r2, [pc, #160]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000226:	62d3      	str	r3, [r2, #44]	; 0x2c

  // 9й кАНАЛ
  ADC1->SQR3 = 0x00;
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 800022a:	2200      	movs	r2, #0
 800022c:	635a      	str	r2, [r3, #52]	; 0x34
  ADC1->SQR3 |= (0b1001 << ADC_SQR3_SQ1_Pos);        
 800022e:	4b25      	ldr	r3, [pc, #148]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000232:	4a24      	ldr	r2, [pc, #144]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000234:	f043 0309 	orr.w	r3, r3, #9
 8000238:	6353      	str	r3, [r2, #52]	; 0x34

  ADC1->SQR2 = 0x00;
 800023a:	4b22      	ldr	r3, [pc, #136]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 800023c:	2200      	movs	r2, #0
 800023e:	631a      	str	r2, [r3, #48]	; 0x30

  ADC1->SQR1 = 0x00;
 8000240:	4b20      	ldr	r3, [pc, #128]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000242:	2200      	movs	r2, #0
 8000244:	62da      	str	r2, [r3, #44]	; 0x2c

  for (int StartUpCounter = 0; StartUpCounter <= 0x1000; StartUpCounter++){} // Небольшая задержка, что бы изменения вступили в силу
 8000246:	2300      	movs	r3, #0
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000250:	dc03      	bgt.n	800025a <_Z16ADC1_IN9_PB1_iniv+0xb2>
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	3301      	adds	r3, #1
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	e7f7      	b.n	800024a <_Z16ADC1_IN9_PB1_iniv+0xa2>
  ADC1->CR2 |= ADC_CR2_CAL;                                                  // запуск калибровки
 800025a:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	4a19      	ldr	r2, [pc, #100]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000260:	f043 0304 	orr.w	r3, r3, #4
 8000264:	6093      	str	r3, [r2, #8]
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0) ;                                   // ожидание окончания калибровки
 8000266:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	f003 0304 	and.w	r3, r3, #4
 800026e:	2b00      	cmp	r3, #0
 8000270:	bf14      	ite	ne
 8000272:	2301      	movne	r3, #1
 8000274:	2300      	moveq	r3, #0
 8000276:	b2db      	uxtb	r3, r3
 8000278:	2b00      	cmp	r3, #0
 800027a:	d000      	beq.n	800027e <_Z16ADC1_IN9_PB1_iniv+0xd6>
 800027c:	e7f3      	b.n	8000266 <_Z16ADC1_IN9_PB1_iniv+0xbe>

  // SWSTART
  ADC1->CR2 |= ADC_CR2_EXTTRIG;   
 800027e:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000280:	689b      	ldr	r3, [r3, #8]
 8000282:	4a10      	ldr	r2, [pc, #64]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000288:	6093      	str	r3, [r2, #8]
  ADC1->CR2 &= ~ADC_CR2_EXTSEL; 
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 800028c:	689b      	ldr	r3, [r3, #8]
 800028e:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000290:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8000294:	6093      	str	r3, [r2, #8]
  ADC1->CR2 |= (0b111 << ADC_CR2_EXTSEL_Pos);
 8000296:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 8000298:	689b      	ldr	r3, [r3, #8]
 800029a:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 800029c:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80002a0:	6093      	str	r3, [r2, #8]

  // Врубить прерывание по преобразованию
  ADC1->CR1 |= ADC_CR1_EOCIE; 
 80002a2:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	4a07      	ldr	r2, [pc, #28]	; (80002c4 <_Z16ADC1_IN9_PB1_iniv+0x11c>)
 80002a8:	f043 0320 	orr.w	r3, r3, #32
 80002ac:	6053      	str	r3, [r2, #4]
  NVIC_EnableIRQ(ADC1_2_IRQn);
 80002ae:	2012      	movs	r0, #18
 80002b0:	f7ff ff5e 	bl	8000170 <__NVIC_EnableIRQ>
}
 80002b4:	bf00      	nop
 80002b6:	3708      	adds	r7, #8
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40010c00 	.word	0x40010c00
 80002c0:	40021000 	.word	0x40021000
 80002c4:	40012400 	.word	0x40012400

080002c8 <_Z8ClockSetv>:
  RCC->CFGR &= ~(RCC_CFGR_MCO_Msk);         // Сначала устанавливаем все в ноль
  RCC->CFGR |= (0b100 << RCC_CFGR_MCO_Pos); // SYSCLK
}

void ClockSet()
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
  /*  Тактирование от встройки  */
  RCC->CR |= (RCC_CR_HSION);
 80002ce:	4b2b      	ldr	r3, [pc, #172]	; (800037c <_Z8ClockSetv+0xb4>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a2a      	ldr	r2, [pc, #168]	; (800037c <_Z8ClockSetv+0xb4>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6013      	str	r3, [r2, #0]

  /*  Проверка запуска  */
  for (int StartUpCounter = 0;; StartUpCounter++)
 80002da:	2300      	movs	r3, #0
 80002dc:	607b      	str	r3, [r7, #4]
  {
    if (StartUpCounter > 0x1000)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002e4:	dc42      	bgt.n	800036c <_Z8ClockSetv+0xa4>
    {
      return;
    }
    else
    {
      if (RCC->CR & RCC_CR_HSIRDY)
 80002e6:	4b25      	ldr	r3, [pc, #148]	; (800037c <_Z8ClockSetv+0xb4>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0302 	and.w	r3, r3, #2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	bf14      	ite	ne
 80002f2:	2301      	movne	r3, #1
 80002f4:	2300      	moveq	r3, #0
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d103      	bne.n	8000304 <_Z8ClockSetv+0x3c>
  for (int StartUpCounter = 0;; StartUpCounter++)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	3301      	adds	r3, #1
 8000300:	607b      	str	r3, [r7, #4]
    if (StartUpCounter > 0x1000)
 8000302:	e7ec      	b.n	80002de <_Z8ClockSetv+0x16>
      {
        break;
 8000304:	bf00      	nop
      }
    }
  }

  /*  HSI clock divided by 2  */
  RCC->CFGR &= ~(RCC_CFGR_PLLSRC);
 8000306:	4b1d      	ldr	r3, [pc, #116]	; (800037c <_Z8ClockSetv+0xb4>)
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	4a1c      	ldr	r2, [pc, #112]	; (800037c <_Z8ClockSetv+0xb4>)
 800030c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000310:	6053      	str	r3, [r2, #4]

  /* Множитель PLL Х7 */
  RCC->CFGR |= (RCC_CFGR_PLLMULL7);
 8000312:	4b1a      	ldr	r3, [pc, #104]	; (800037c <_Z8ClockSetv+0xb4>)
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	4a19      	ldr	r2, [pc, #100]	; (800037c <_Z8ClockSetv+0xb4>)
 8000318:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 800031c:	6053      	str	r3, [r2, #4]

  /*  Запуск PLL  */
  RCC->CR |= (RCC_CR_PLLON);
 800031e:	4b17      	ldr	r3, [pc, #92]	; (800037c <_Z8ClockSetv+0xb4>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a16      	ldr	r2, [pc, #88]	; (800037c <_Z8ClockSetv+0xb4>)
 8000324:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000328:	6013      	str	r3, [r2, #0]

  /*  Проверка запуска  */
  for (int StartUpCounter = 0;; StartUpCounter++)
 800032a:	2300      	movs	r3, #0
 800032c:	603b      	str	r3, [r7, #0]
  {
    if (StartUpCounter > 0x1000)
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000334:	dc1c      	bgt.n	8000370 <_Z8ClockSetv+0xa8>
    {
      return;
    }
    else
    {
      if (RCC->CR & RCC_CR_PLLRDY)
 8000336:	4b11      	ldr	r3, [pc, #68]	; (800037c <_Z8ClockSetv+0xb4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800033e:	2b00      	cmp	r3, #0
 8000340:	bf14      	ite	ne
 8000342:	2301      	movne	r3, #1
 8000344:	2300      	moveq	r3, #0
 8000346:	b2db      	uxtb	r3, r3
 8000348:	2b00      	cmp	r3, #0
 800034a:	d103      	bne.n	8000354 <_Z8ClockSetv+0x8c>
  for (int StartUpCounter = 0;; StartUpCounter++)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	3301      	adds	r3, #1
 8000350:	603b      	str	r3, [r7, #0]
    if (StartUpCounter > 0x1000)
 8000352:	e7ec      	b.n	800032e <_Z8ClockSetv+0x66>
      {
        break;
 8000354:	bf00      	nop
      }
    }
  }

  /*  Тактирование системы от PLL*/
  RCC->CFGR |= (RCC_CFGR_SW_PLL);
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <_Z8ClockSetv+0xb4>)
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	4a08      	ldr	r2, [pc, #32]	; (800037c <_Z8ClockSetv+0xb4>)
 800035c:	f043 0302 	orr.w	r3, r3, #2
 8000360:	6053      	str	r3, [r2, #4]

  /*  AHB Prescaler  */
  RCC->CFGR |= (RCC_CFGR_HPRE_DIV1);
 8000362:	4b06      	ldr	r3, [pc, #24]	; (800037c <_Z8ClockSetv+0xb4>)
 8000364:	4a05      	ldr	r2, [pc, #20]	; (800037c <_Z8ClockSetv+0xb4>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	6053      	str	r3, [r2, #4]
 800036a:	e002      	b.n	8000372 <_Z8ClockSetv+0xaa>
      return;
 800036c:	bf00      	nop
 800036e:	e000      	b.n	8000372 <_Z8ClockSetv+0xaa>
      return;
 8000370:	bf00      	nop
}
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000

08000380 <_Z9Uart2_IniP13USART_TypeDefli>:
    USART2->CR1 |= USART_CR1_TXEIE;
  }
}

void Uart2_Ini(USART_TypeDef *UartNumb, long int UartBusCLK, int BaudRate)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
  /*  включаем тактирование UART  */
  RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800038c:	4b23      	ldr	r3, [pc, #140]	; (800041c <_Z9Uart2_IniP13USART_TypeDefli+0x9c>)
 800038e:	69db      	ldr	r3, [r3, #28]
 8000390:	4a22      	ldr	r2, [pc, #136]	; (800041c <_Z9Uart2_IniP13USART_TypeDefli+0x9c>)
 8000392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000396:	61d3      	str	r3, [r2, #28]

  /*  UART2 использует выводы: PA2 (TX) и PA3 (RX).  */
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; // тактирование порта GPIOA
 8000398:	4b20      	ldr	r3, [pc, #128]	; (800041c <_Z9Uart2_IniP13USART_TypeDefli+0x9c>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a1f      	ldr	r2, [pc, #124]	; (800041c <_Z9Uart2_IniP13USART_TypeDefli+0x9c>)
 800039e:	f043 0304 	orr.w	r3, r3, #4
 80003a2:	6193      	str	r3, [r2, #24]

  /*  PA2_Tx  */
  GPIOA->CRL &= ~(GPIO_CRL_CNF2);
 80003a4:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a1d      	ldr	r2, [pc, #116]	; (8000420 <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 80003aa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80003ae:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= (0b10 << GPIO_CRL_CNF2_Pos); // Alternate Function outpu Push-pull
 80003b0:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a1a      	ldr	r2, [pc, #104]	; (8000420 <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 80003b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003ba:	6013      	str	r3, [r2, #0]
  GPIOA->CRL &= ~(GPIO_CRL_MODE2);
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a17      	ldr	r2, [pc, #92]	; (8000420 <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 80003c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003c6:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= (0b11 << GPIO_CRL_MODE2_Pos); // Max speed
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a14      	ldr	r2, [pc, #80]	; (8000420 <_Z9Uart2_IniP13USART_TypeDefli+0xa0>)
 80003ce:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80003d2:	6013      	str	r3, [r2, #0]

  /*  PA3_Rx  */

  /*  конфигурация UART2  */
  UartNumb->CR1 = 0x00;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  UartNumb->CR1 |= USART_CR1_UE; // разрешаем USART2
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	60da      	str	r2, [r3, #12]

  /*  USARTDIV = Fck / (16 * BAUD) = 72000000 / (16 * 9600) = 468,75        */
  /*  Значение регистра USART_BRR = 468,75 * 16 = 7500 - скорость 9600 бод  */
  // USART2->BRR = 833;  // скорость 9600 бод при частоте 8 Мгц
  UartNumb->BRR = UartBusCLK / BaudRate;
 80003e6:	68ba      	ldr	r2, [r7, #8]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80003ee:	461a      	mov	r2, r3
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	609a      	str	r2, [r3, #8]

  /*  Разрешаем работу приемника  и передатчика. Прерывания по событиям UART не разрешаем  */
  UartNumb->CR1 |= USART_CR1_TE | USART_CR1_RE; // разрешаем приемник и передатчик
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	f043 020c 	orr.w	r2, r3, #12
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	60da      	str	r2, [r3, #12]
  UartNumb->CR2 = 0;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	2200      	movs	r2, #0
 8000404:	611a      	str	r2, [r3, #16]
  UartNumb->CR3 = 0;
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	2200      	movs	r2, #0
 800040a:	615a      	str	r2, [r3, #20]

  NVIC_EnableIRQ(USART2_IRQn);
 800040c:	2026      	movs	r0, #38	; 0x26
 800040e:	f7ff feaf 	bl	8000170 <__NVIC_EnableIRQ>
}
 8000412:	bf00      	nop
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000
 8000420:	40010800 	.word	0x40010800

08000424 <_Z6PinSetv>:

void PinSet()
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  // Тактирование порта C  
  RCC->APB2ENR |= (RCC_APB2ENR_IOPCEN);
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <_Z6PinSetv+0x44>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <_Z6PinSetv+0x44>)
 800042e:	f043 0310 	orr.w	r3, r3, #16
 8000432:	6193      	str	r3, [r2, #24]
  // Output mode, max speed 50 MHz 
  GPIOC->CRH &= ~(GPIO_CRH_MODE13);
 8000434:	4b0d      	ldr	r3, [pc, #52]	; (800046c <_Z6PinSetv+0x48>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	4a0c      	ldr	r2, [pc, #48]	; (800046c <_Z6PinSetv+0x48>)
 800043a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800043e:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= (0b11 << GPIO_CRH_MODE13_Pos);
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <_Z6PinSetv+0x48>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	4a09      	ldr	r2, [pc, #36]	; (800046c <_Z6PinSetv+0x48>)
 8000446:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800044a:	6053      	str	r3, [r2, #4]
  // General purpose output push-pull  
  GPIOC->CRH &= ~(GPIO_CRH_CNF13);
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <_Z6PinSetv+0x48>)
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	4a06      	ldr	r2, [pc, #24]	; (800046c <_Z6PinSetv+0x48>)
 8000452:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000456:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= (0b00 << GPIO_CRH_CNF13_Pos);
 8000458:	4b04      	ldr	r3, [pc, #16]	; (800046c <_Z6PinSetv+0x48>)
 800045a:	4a04      	ldr	r2, [pc, #16]	; (800046c <_Z6PinSetv+0x48>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	6053      	str	r3, [r2, #4]
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	40021000 	.word	0x40021000
 800046c:	40011000 	.word	0x40011000

08000470 <main>:
short Uart2_Counter 	 = 0;
short Uart2_Len 		 = 0;
char  Uart2_BufSend[100] = {0};

int main(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000476:	b672      	cpsid	i
}
 8000478:	bf00      	nop
	__disable_irq();
		ADC1_IN9_PB1_ini();
 800047a:	f7ff fe95 	bl	80001a8 <_Z16ADC1_IN9_PB1_iniv>
		//McoSet();
		ClockSet();
 800047e:	f7ff ff23 	bl	80002c8 <_Z8ClockSetv>
		PinSet();
 8000482:	f7ff ffcf 	bl	8000424 <_Z6PinSetv>
		Uart2_Ini(USART2, 28000000, 9600);
 8000486:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800048a:	490b      	ldr	r1, [pc, #44]	; (80004b8 <main+0x48>)
 800048c:	480b      	ldr	r0, [pc, #44]	; (80004bc <main+0x4c>)
 800048e:	f7ff ff77 	bl	8000380 <_Z9Uart2_IniP13USART_TypeDefli>
  __ASM volatile ("cpsie i" : : : "memory");
 8000492:	b662      	cpsie	i
}
 8000494:	bf00      	nop

    while(1)
    {
		//GPIOC->ODR |= GPIO_ODR_ODR13;
		//ADC1->CR2 |= ADC_CR2_SWSTART;
		GPIOC->ODR ^= GPIO_ODR_ODR13; 
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <main+0x50>)
 8000498:	68db      	ldr	r3, [r3, #12]
 800049a:	4a09      	ldr	r2, [pc, #36]	; (80004c0 <main+0x50>)
 800049c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80004a0:	60d3      	str	r3, [r2, #12]
		for(int i = 0; i != 1000; i++){}
 80004a2:	2300      	movs	r3, #0
 80004a4:	607b      	str	r3, [r7, #4]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004ac:	d0f3      	beq.n	8000496 <main+0x26>
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	3301      	adds	r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	e7f7      	b.n	80004a6 <main+0x36>
 80004b6:	bf00      	nop
 80004b8:	01ab3f00 	.word	0x01ab3f00
 80004bc:	40004400 	.word	0x40004400
 80004c0:	40011000 	.word	0x40011000

080004c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d0:	480d      	ldr	r0, [pc, #52]	; (8000508 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004d4:	f7ff fff6 	bl	80004c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d8:	480c      	ldr	r0, [pc, #48]	; (800050c <LoopForever+0x6>)
  ldr r1, =_edata
 80004da:	490d      	ldr	r1, [pc, #52]	; (8000510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004dc:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <LoopForever+0xe>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e0:	e002      	b.n	80004e8 <LoopCopyDataInit>

080004e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e6:	3304      	adds	r3, #4

080004e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ec:	d3f9      	bcc.n	80004e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ee:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f0:	4c0a      	ldr	r4, [pc, #40]	; (800051c <LoopForever+0x16>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f4:	e001      	b.n	80004fa <LoopFillZerobss>

080004f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f8:	3204      	adds	r2, #4

080004fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004fc:	d3fb      	bcc.n	80004f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004fe:	f000 f811 	bl	8000524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000502:	f7ff ffb5 	bl	8000470 <main>

08000506 <LoopForever>:

LoopForever:
    b LoopForever
 8000506:	e7fe      	b.n	8000506 <LoopForever>
  ldr   r0, =_estack
 8000508:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000510:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000514:	0800058c 	.word	0x0800058c
  ldr r2, =_sbss
 8000518:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800051c:	2000001c 	.word	0x2000001c

08000520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000520:	e7fe      	b.n	8000520 <ADC1_2_IRQHandler>
	...

08000524 <__libc_init_array>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	2600      	movs	r6, #0
 8000528:	4d0c      	ldr	r5, [pc, #48]	; (800055c <__libc_init_array+0x38>)
 800052a:	4c0d      	ldr	r4, [pc, #52]	; (8000560 <__libc_init_array+0x3c>)
 800052c:	1b64      	subs	r4, r4, r5
 800052e:	10a4      	asrs	r4, r4, #2
 8000530:	42a6      	cmp	r6, r4
 8000532:	d109      	bne.n	8000548 <__libc_init_array+0x24>
 8000534:	f000 f81a 	bl	800056c <_init>
 8000538:	2600      	movs	r6, #0
 800053a:	4d0a      	ldr	r5, [pc, #40]	; (8000564 <__libc_init_array+0x40>)
 800053c:	4c0a      	ldr	r4, [pc, #40]	; (8000568 <__libc_init_array+0x44>)
 800053e:	1b64      	subs	r4, r4, r5
 8000540:	10a4      	asrs	r4, r4, #2
 8000542:	42a6      	cmp	r6, r4
 8000544:	d105      	bne.n	8000552 <__libc_init_array+0x2e>
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	f855 3b04 	ldr.w	r3, [r5], #4
 800054c:	4798      	blx	r3
 800054e:	3601      	adds	r6, #1
 8000550:	e7ee      	b.n	8000530 <__libc_init_array+0xc>
 8000552:	f855 3b04 	ldr.w	r3, [r5], #4
 8000556:	4798      	blx	r3
 8000558:	3601      	adds	r6, #1
 800055a:	e7f2      	b.n	8000542 <__libc_init_array+0x1e>
 800055c:	08000584 	.word	0x08000584
 8000560:	08000584 	.word	0x08000584
 8000564:	08000584 	.word	0x08000584
 8000568:	08000588 	.word	0x08000588

0800056c <_init>:
 800056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056e:	bf00      	nop
 8000570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000572:	bc08      	pop	{r3}
 8000574:	469e      	mov	lr, r3
 8000576:	4770      	bx	lr

08000578 <_fini>:
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057a:	bf00      	nop
 800057c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057e:	bc08      	pop	{r3}
 8000580:	469e      	mov	lr, r3
 8000582:	4770      	bx	lr
